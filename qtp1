
CLM:''____________________________________________''' This file contains all the common/shared functions for the CLM Suite of Applications - DARTS, TRAX, SERFS'Option Explicit
Dim CLMEnvVarPath, CLMDataPath, CLMTestDataPath, CLMORPathDim CLMLibPath, CLMRolesPath, CLMRolesSheet, CLMRolesKeyColumn, CLMInputDataPath, CLMInputDataSheet, CLMInputDataKeyColumnDim inputDataDim vMinWaitTime, vInterimWaitTime, vMaxWaitTimeDim Global_DB_ResultSet : Global_DB_ResultSet = ""
CLMEnvVarPath = CLMSharedDriveCLMDataPath = CLMSharedDrive + "Input Data\"CLMTestDataPath = CLMSharedDrive + "Test Data\"CLMORPath = CLMSharedDrive + "Object Repositories\"
' trying to implement where data is drawn from the inputsheetCLMLibPath = CLMSharedDrive + "Libraries\"CLMInputDataPath = CLMDataPath + "CLM_InputData.xls"CLMInputDataSheet = "Sheet1"CLMInputDataKeyColumn = "ScriptName"
Dim DictObj ' For storing the user roles/IDs/passwords for login Dim GLOBAL_LOAN_NUM, GLOBAL_LOAN_STATE, GLOBAL_ENV, GLOBAL_ERR_MSG,GLOBAL_CASE_NUMBER,GLOBAL_REO_IDDim GLOBAL_CAMPAIGN_IDDim GLOBAL_LOAN_SERVICING_FEEDim GLOBAL_CASEIDDim GLOBAL_NET_SALES_PROCEEDSDim SYS_DATEDim GLOBAL_DB_NAMEDim GLOBAL_DB_ARRAYDim ISSUE_DETAILSDim StartTime, EndTimeDim GLOBAL_CLM_WEB_USERROLEDim GLOBAL_DARTS_JAVA_USERROLEDim GLOBAL_CASE_STATUSDim GLOBAL_LOAN_SERVICER
ISSUE_DETAILS = ""GLOBAL_DB_ARRAY = array("")
'Added By Praveen MAndava - 12/02/2015Environment.Value("BrowserHwnd") = 0Environment.Value("BrowserTitle") = ""Environment.Value("NeedToRestore") = FalseEnvironment.Value("RestoreValue") = ""Environment.Value("LoanNum_From_DLQ_Table") = False'Environment.Value("LoanNum_From_DLQ_Table") = TrueEnvironment.Value("ReportFailureAsFail") = TrueEnvironment.Value("OverRiddableExceptions") = FalseEnvironment.Value("ValidationErrors") = FalseEnvironment.Value("ValidationErrorsText") = ""Environment.Value("UPBAmount") = "0.0"Environment.Value("LettersSentOpenLink") = ""Environment.Value("UserRoleInputSheet") = ""Environment.Value("EnterServicerComments") = TrueEnvironment.Value("IgnoreGetSystemDate") = FalseEnvironment.Value("TestCaseNameForTestData") = FalseEnvironment.Value("NumOfCasesToTry") = 0Environment.Value("SetEligibilityReviewedFlag") = TrueEnvironment.Value("TotalIndebtednessAmount") = ""
''' This function Logs into the AMN Web UIFunction CLM_WEB_Login(ByVal Role) Reporter.ReportEvent micDone,"START","CLM_WEB_Login"  Dim URL,CTWS Dim TempFlag : TempFlag = False Dim MaxTimeOut : MaxTimeOut = 180  URL = Environment.Value("AMN_URL")  'Code Updated by Praveen Mandava  'to get browser hwnd  TempFlag =  false 'TempFlag = LaunchAndGetBrowserHWND(URL, MaxTimeOut)  If Not TempFlag Then  SystemUtil.CloseProcessByName("iexplore.exe")  Wait(5)  SystemUtil.Run "iexplore", "-noframemerging " + URL,,,3   'Browser("AMN").Navigate URL   Browser("AMN").Page("AMN").Sync     Set CTWS = Browser("AMN").Page("AMN").Link("Continue to this website")   'Call WaitForAnObject(CTWS,MaxTimeOut)  If Browser("AMN").Page("AMN").Link("Continue to this website").Exist(4) Then      Browser("AMN").Page("AMN").Link("Continue to this website").Click  End If          Set vObj =  Browser("AMN").Page("AMN").WebEdit("username")  Call WaitForAnObject(vObj,MaxTimeOut)    Environment.Value("BrowserTitle") = Browser("AMN").GetROProperty("Title")  Environment.Value("BrowserHwnd")  = Browser("AMN").GetROProperty("hwnd") End If
 If DictObj.Exists(Role & ".Role") = True Then  GetTestObject(AMN_USERNAME).Set DictObj.Item(Role & ".UserID")  GLOBAL_CLM_WEB_USERROLE = DictObj.Item(Role & ".UserID")  wait(2)  GetTestObject(AMN_PASSWORD).Set DictObj.Item(Role & ".Password") End If
 GetTestObject(AMN_LOGIN_BTN).Click GetTestObject(AMNBROWSER).Sync
 If Err.Number <> 0 Then  CLM_ErrorHandler "CLM_WEB_Login",Err.Description Else  Reporter.ReportEvent micDone,"END","CLM_WEB_Login" End IfEnd Function
''' This function initializes the exeuction and the script; this has to be called in every script firstFunction CLM_InitializeScript  Reporter.ReportEvent micDone,"START","CLM_InitializeScript" StartTime = Timer
 Setting("DefaultTimeOut")="60000" vMinWaitTime   =  60 vInterimWaitTime = 120 vMaxWaitTime   =  240
  SystemUtil.CloseProcessByName("iexplore.exe")  SystemUtil.CloseProcessByName("java.exe")  SystemUtil.CloseProcessByName("javaw.exe")
 'RegisterUserFunc "Page", "Sync", "Sync",False
 Call CreditUAT_LoadSharedLibs Call CLM_LoadLibraries 'Call CLM_LoadUserInfo Call CLM_LoadObjectRepos Call CLM_LoadScriptLibraries  ' Get execution enviironment  - Anbu, 3/12/14 Dim execConfigFile, envFile execConfigFile = CLMSharedDrive & "CLM_ExecutionConfig.xls"  'Code Update by Praveen Mandava - 03/09/2016 'Update to handle situations where InSprint team would like to execute tests without results 'being uploaded to ALM If Environment.Value("InSprint_NoALM_Execution") Then    GLOBAL_ENV = "S3TEST" Else          GLOBAL_ENV = CreditUAT_GetEnvironment(execConfigFile)  End If
 'Code Update by Praveen Mandava - 03/14/2016 'Update to handle different Database, User ID and Passwords for UAT and SIT Teams If Instr(1, UCase(GLOBAL_ENV), "TEST", 1) > 0 Then       GLOBAL_SHARED_ID         = Environment.Value("SharedID_SIT")       GLOBAL_SHARED_ID_PWD_DB  = Environment.Value("SharedIDPwd_DB_SIT") ElseIf  Instr(1, UCase(GLOBAL_ENV), "ACPT", 1) > 0  Then         GLOBAL_SHARED_ID              = Environment.Value("SharedID_UAT")       GLOBAL_SHARED_ID_PWD_DB       = Environment.Value("SharedIDPwd_DB_UAT")       GLOBAL_WEBSERVICE_REST_ID     = Environment.Value("SharedID_WebService_Rest_UAT")          GLOBAL_WEBSERVICE_REST_ID_PWD = Environment.Value("SharedIDPwd_WebService_Rest_UAT") Else           GLOBAL_SHARED_ID         = Environment.Value("SharedID")       GLOBAL_SHARED_ID_PWD_DB  = Environment.Value("SharedIDPwd_DB")  End If envFile = GLOBAL_ENV + "_CLM_Environment_Variables.xml" Environment.LoadFromFile CLMEnvVarPath + envFile
 GLOBAL_DB_NAME = Environment.Value("DBName")  'Now built the Roles (User IDs and PWD) based on the Environment to use - either SIT or UAT environments Call CLM_LoadUserInfo  'Set up Input test data - Praveen Mandava 09/22/2015 Set inputData = CLM_GetTestData() 'Call CLM_Java_CleanUp
 If Err.Number <> 0 Then  CLM_ErrorHandler "CLM_InitializeScript",Err.Description Else  Reporter.ReportEvent micDone,"END","CLM_InitializeScript" End If End Function
''' This function is used to login to the CLM application Function CLM_Login(ByVal Role) Reporter.ReportEvent micDone,"START","CLM_Login" Dim URL, TempObj Dim Counter : Counter = 0 Dim TempFlag : TempFlag = False Dim NotfFlag : NotfFlag = False  URL = Environment.Value("CLM_URL")
 SystemUtil.Run "iexplore", "-noframemerging " + URL,,,3 Set TempObj = Browser("Title:=.*CLM.*", "Index:=0").Page("Index:=0").Link("text:=Launch Credit Loss Management.*", "Index:=0")'Added to handle the Notification popup click on Open button Moses Arnold Darla 03/11/2016 12:31 pm Set Notifobj_Open = Browser("Title:=.*CLM.*", "Index:=0").WinObject("acc_name:=Notification").WinButton("nativeclass:=push button","acc_name:=Open") ' changes native class property push button to split Button Moses Arnold DArla 03/15/2016 Set Notifobj_Save = Browser("Title:=.*CLM.*", "Index:=0").WinObject("acc_name:=Notification").WinButton("nativeclass:=push button","acc_name:=Save") If TempObj.Exist(30) Then        TempObj.Click         Else        CLM_ErrorHandler "CLM_Login", "Unable to Launch CLM Browser"        Exit Function End If 'Browser("CLM").Page("CLM").Link("Launch Credit Loss Management").Click  Environment.Value("UserRoleInputSheet") = Trim(Role)  Do While TempFlag = False     'Check and see if CLM Login Window Exists        If Not JavaDialog("CLM Login").JavaEdit("Username").Exist(1) Then              ' Check if Java Notification Pop-up at the bottom exists (either to Open or Save Java)              If Not NotfFlag Then                    If Notifobj_Open.Exist(4) Then                           Notifobj_Open.Click                      NotfFlag = True                   ElseIf Notifobj_Save.Exist(1) Then                           Notifobj_Save.Click                      NotfFlag = True                                      End If'                   If Notifobj_Save.Exist(1) Then'                      Notifobj_Save.Click'                      NotfFlag = True'                   End If   '                   If Notifobj_Open.Exist(4) Then  '                         Notifobj_Open.Click'                      NotfFlag = True'                   End If              End If           'CHeck and see if Java Authentication Required WIndow Exists           If JavaDialog("title:=Authentication Required", "index:=0").Exist(1) Then Call QTP_clickOkOnJavaAuthenticationRequired           'Check and See if Java Security Warning Exists           If Window("regexpwndtitle:=Security Warning").Exist(1) Then Call QTP_clickRunOnJavaSecurityWarning           Counter = Counter + 1        Else              TempFlag = True                End If             If Counter > 180 Then           Reporter.ReportEvent micFail,"CLM_Login","Failed CLM Login. Unknown State of Application. Exit Test Run."           ExitAction        End If Loop
 'Call QTP_clickOkOnJavaAuthenticationRequired 'Call QTP_clickOkOnJavaAuthenticationRequired 'Call QTP_clickOkOnJavaAuthenticationRequired
 'Call QTP_clickRunOnJavaSecurityWarning
' Call CLM_JavaLogin wait(2) If DictObj.Exists(Role & ".Role") = True Then  JavaDialog("CLM Login").JavaEdit("Username").Set DictObj.Item(Role & ".UserID")  GLOBAL_DARTS_JAVA_USERROLE = DictObj.Item(Role & ".UserID")  wait(1)  JavaDialog("CLM Login").JavaEdit("Password").Set DictObj.Item(Role & ".Password") End If
 Wait(1) JavaDialog("CLM Login").JavaButton("OK").Click 'wait(30) For ix = 0 to 30  If JavaDialog("CLM Login").Exist(1) Then     Wait(2)  Else               Exit For   End If Next
 Call CLM_CloseOpenWindows ' Wait till CLM window opens - for 3 mins....otherwise exit **** ' close the IE window - not required when using Java Client SystemUtil.CloseProcessByName("iexplore.exe") If Err.Number <> 0 Then  CLM_ErrorHandler "CLM_Login",Err.Description Else  Reporter.ReportEvent micDone,"END","CLM_Login" End IfEnd Function
''' This functions handles the Java Authentication window that comes before the CLM login.'  This step might be optional --> using an if condition; this function also handles the Security windowFunction CLM_JavaLogin Reporter.ReportEvent micDone,"START","CLM_JavaLogin" Set JW = JavaWindow("Authentication Required").JavaDialog("Authentication Required") Set JD = JavaDialog("Authentication Required") If JavaWindow("Warning - Security").JavaDialog("Warning - Security").Exist(10) Then                        JavaWindow("Warning - Security").JavaDialog("Warning - Security").JavaButton("Run").Click End If If JW.Exist(10) Then  JW.JavaEdit("User name:").Set DictObj.Item("CLM_JavaLoginUser.UserID")  Wait 2  JW.JavaEdit("Password:").Set DictObj.Item("CLM_JavaLoginUser.Password")  JW.JavaButton("OK").Click ElseIf JD.Exist(10) Then  JD.JavaEdit("User name:").Set DictObj.Item("CLM_JavaLoginUser.UserID")  Wait 2  JD.JavaEdit("Password:").Set DictObj.Item("CLM_JavaLoginUser.Password")  JD.JavaButton("OK").Click End If
 If JavaWindow("Warning - Security").JavaDialog("Warning - Security").Exist(5) Then  JavaWindow("Warning - Security").JavaDialog("Warning - Security").JavaButton("Run").Click End If If Err.Number <> 0 Then  CLM_ErrorHandler "CLM_JavaLogin",Err.Description Else  Reporter.ReportEvent micDone,"END","CLM_JavaLogin" End IfEnd Function
''' This functions loads all the roles/users/pwds Function CLM_LoadUserInfo
 Dim Env, temp, i, sRole, strDataFile  Dim TempEnv, sEnv  'Env = Environment.Value("EQ_Env") temp = "CLM_Roles.xls" Select Case Ucase(Env) End Select
 strDataFile=QTP_copyFileToTempFolder(CLMDataPath & temp) DataTable.AddSheet("Roles")    DataTable.ImportSheet strDataFile,"Roles","Roles"
   Set DictObj = CreateObject("Scripting.Dictionary")   DictObj.CompareMode = 1          'Code Updated by Praveen Mandava - 03/10/2016       'Made changes to get the role based on environment that is being used, either SIT or UAT          If Instr(1, UCase(Trim(GLOBAL_ENV)), "TEST", 1) > 0  Then             TempEnv = "SIT"       ElseIf Instr(1, UCase(Trim(GLOBAL_ENV)), "ACPT", 1) > 0 Then              TempEnv = "UAT"         Else             TempEnv = "UAT"              End If
   For i = 1 To DataTable.GetSheet("Roles").GetRowCount       sEnv = Trim(Datatable.GetSheet("Roles").GetParameter("Environment").ValueByRow(i))       If UCase(TempEnv) = UCase(Trim(sEnv)) Then             sRole = Trim(Datatable.GetSheet("Roles").GetParameter("Role").ValueByRow(i))             DictObj.Add sRole + ".Role", Trim(Datatable.GetSheet("Roles").GetParameter("Role").ValueByRow(i))             DictObj.Add sRole + ".UserID", Trim(Datatable.GetSheet("Roles").GetParameter("UserID").ValueByRow(i))             DictObj.Add sRole + ".Password", Trim(Datatable.GetSheet("Roles").GetParameter("Password").ValueByRow(i))             'DictObj.Add sRole + ".Name", Trim(Datatable.GetSheet("Login").GetParameter("User_Name").ValueByRow(i))       End If       Next   If Err.Number <> 0 Then  CLM_ErrorHandler "CLM_LoadUserInfo",Err.Description Else  Reporter.ReportEvent micDone,"END","CLM_LoadUserInfo" End IfEnd Function
''' This functions loads all the object repositoriesFunction CLM_LoadObjectRepos 'Reporter.ReportEvent micDone,"START","CLM_LoadObjectRepos" Dim OR1, OR2, OR3,OR4,OR5 OR1 = RepositoriesCollection.Find(CLMORPath + "CLM_Common.tsr") If OR1 = -1 Then    RepositoriesCollection.Add(CLMORPath + "CLM_Common.tsr") End If
 OR2 = RepositoriesCollection.Find(CLMORPath + "CLM_AMN.tsr") If OR2 = -1 Then    RepositoriesCollection.Add(CLMORPath + "CLM_AMN.tsr") End If
 OR3 = RepositoriesCollection.Find(CLMORPath + "CLM_DARTS.tsr") If OR3 = -1 Then    RepositoriesCollection.Add(CLMORPath + "CLM_DARTS.tsr") End If
 OR4 = RepositoriesCollection.Find(CLMORPath + "CLM_SERFS.tsr") If OR4 = -1 Then    RepositoriesCollection.Add(CLMORPath + "CLM_SERFS.tsr") End If
 OR5 = RepositoriesCollection.Find(CLMORPath + "CLM_TRAX.tsr") If OR5 = -1 Then    RepositoriesCollection.Add(CLMORPath + "CLM_TRAX.tsr") End If If Err.Number <> 0 Then  CLM_ErrorHandler "CLM_LoadObjectRepos",Err.Description Else  Reporter.ReportEvent micDone,"END","CLM_LoadObjectRepos" End If  'Updated to add the InSprint related OR - SantoshKovuri -03/11/2016 OR6 = RepositoriesCollection.Find(CLMORPath + "CLMSharedRepositoryInSprint.tsr") If OR6 = -1 Then    RepositoriesCollection.Add(CLMORPath + "CLMSharedRepositoryInSprint.tsr") End If  OR6 = RepositoriesCollection.Find(CLMORPath + "CLMShakeoutRepository.tsr") If OR6 = -1 Then  RepositoriesCollection.Add(CLMORPath + "CLMShakeoutRepository.tsr") End If  'Code Updated by Praveen Mandava - 12/02/2015 'Code to Load Descriptive Object Repos Call QTP_LoadFunctionLibrary(CLMORPath + "CLM_ObjDescriptions.qfl") Call QTP_LoadFunctionLibrary(CLMORPath + "CLM_ObjConstants.qfl")    'Reporter.ReportEvent micDone,"END","CLM_LoadObjectRepos"End Function
Function CreditUAT_LoadSharedLibs SharedLibPath = SharedDrive + "CreditUATAutomation_SharedResources\Libraries\"  If Instr(Environment.Value("ProductVer"), "10.") > 0 Then 'QTP Version 11   ExecuteFile SharedLibPath & "QTPUtility.qfl"   ExecuteFile SharedLibPath & "QCUtility.qfl"   ExecuteFile SharedLibPath & "ExcelUtility.qfl" Else   LoadFunctionLibrary SharedLibPath & "QTPUtility.qfl"   LoadFunctionLibrary SharedLibPath & "QCUtility.qfl"   LoadFunctionLibrary SharedLibPath & "ExcelUtility.qfl"    End If
 If Err.Number <> 0 Then  CLM_ErrorHandler "CreditUAT_LoadSharedLibs",Err.Description Else  Reporter.ReportEvent micDone,"END","CreditUAT_LoadSharedLibs" End If
End Function
Function CLM_LoadLibraries  call QTP_LoadFunctionLibrary(CLMLibPath + "CLM_DARTS_Common.qfl")  call QTP_LoadFunctionLibrary(CLMLibPath + "CLM_DARTS_BusinessRules.qfl")  call QTP_LoadFunctionLibrary(CLMLibPath + "CLM_DARTS_CaseCreation.qfl")  call QTP_LoadFunctionLibrary(CLMLibPath + "CLM_Shakeout.qfl")  call QTP_LoadFunctionLibrary(CLMLibPath + "CLM_DARTS_HSSN.qfl")  call QTP_LoadFunctionLibrary(CLMLibPath + "CLM_DARTS_SearchLoanFinder.qfl")  call QTP_LoadFunctionLibrary(CLMLibPath + "CLM_DARTS_PreForeclosureTransitions.qfl")  call QTP_LoadFunctionLibrary(CLMLibPath + "CLM_DARTS_AdminGlobalParams.qfl")  call QTP_LoadFunctionLibrary(CLMLibPath + "CLM_DARTS_ApprovalLetter.qfl")  call QTP_LoadFunctionLibrary(CLMLibPath + "CLM_DARTS_MI.qfl")  call QTP_LoadFunctionLibrary(CLMLibPath + "CLM_SERFS.qfl")  call QTP_LoadFunctionLibrary(CLMLibPath + "CLM_SERFS_DisbursementVendorSetup.qfl")    'New Libraries Added by Praveen Mandava - 12/08/2015  call QTP_LoadFunctionLibrary(CLMLibPath + "CLM_DARTS_RiskBased.qfl")  call QTP_LoadFunctionLibrary(CLMLibPath + "CLM_ReusableLibrary.qfl")    'New Libraries Added by Santosh Kovuri - 03/10/2016  call QTP_LoadFunctionLibrary(CLMLibPath + "CLM_Insprint_ReusableLibrary.qfl")     If Err.Number <> 0 Then  CLM_ErrorHandler "CLM_LoadLibraries",Err.Description Else  Reporter.ReportEvent micDone,"END","CLM_LoadLibraries" End IfEnd Function
''' This functions logsout of CLM
Function CLM_Logout    Reporter.ReportEvent micDone,"START","CLM_Logout"                JavaWindow("CLM").JavaMenu("File").JavaMenu("Save").WaitProperty "enabled", 1    Call QTP_CaptureScreenshot
 Call CLM_CloseOpenWindows
 If JavaWindow("CLM").Exist(2) Then  JavaWindow("CLM").Close End If  If Browser("Title:=.*CLM.*", "Index:=0").Exist(2) Then  Browser("Title:=.*CLM.*", "Index:=0").Close End If
 If Err.Number <> 0 Then  CLM_ErrorHandler "CLM_Logout",Err.Description Else  Reporter.ReportEvent micDone,"END","CLM_Logout" End IfEnd Function
''' This function cleans up in the end and saves script status to the DB' @remarks Based on EQ Finalize Script; Currently a Placeholder - Need to Add DB Update Function CLM_FinalizeScript(ByVal runStatus)  EndTime = Timer  Run_Duration = EndTime - StartTime  SystemUtil.CloseProcessByName("iexplore.exe")     'SystemUtil.Run "tskill", "iexplore"   SystemUtil.CloseProcessByName("java.exe")  SystemUtil.CloseProcessByName("javaw.exe")  set CurrentRun = QCUtil.CurrentRun   CurrentRun.Field("RN_DRAFT") = "N"
 'Set the Issue Details      Dim CurrentTestSetTest Set CurrentTestSetTest = QCUtil.CurrentTestSetTest CurrentTestSetTest.Field("TC_USER_02") = ISSUE_DETAILS CurrentTestSetTest.Field("TC_USER_02") = ISSUE_DETAILS CurrentTestSetTest.Post
 Set TestInTestSet = QCUtil.CurrentTestSetTest CurrentRun.Field("RN_DRAFT") = "N"   ' ************************************** 'This will display on the Test Grid what VM\Remote machine that was used.     TestInTestSet.Field("TC_USER_04") =  Environment.Value("LocalHostName") TestInTestSet.Field("TC_USER_04") = Environment.Value("LocalHostName") TestInTestSet.Post '************************************** 'This will display on the Test Grid what Operating system of the VM\Remote machine that was used.     TestInTestSet.Field("TC_USER_05") = Environment.Value("OS") TestInTestSet.Field("TC_USER_05") = Environment.Value("OS") TestInTestSet.Post '************************************** TestInTestSet.Field("TC_USER_03") = Run_Duration TestInTestSet.Field("TC_USER_03") = Run_Duration TestInTestSet.Post
 'Update Issue Details on Run Instance   CurrentRun.Field("RN_USER_03") = ISSUE_DETAILS  CurrentRun.Field("RN_USER_03") = ISSUE_DETAILS 
End Function
''' This function finds the Loan State from the DB for a loan number Function CLM_GetLoanNum(ByRef strDate)   Reporter.ReportEvent micDone,"START","CLM_GetLoanState" Dim sqlQuery, loanNum, queryResultArr
 sqlQuery = "SELECT  loln.fn_mae_ln_id"&_         " FROM clm.mv_lo_case locase "&_         "JOIN clm.mv_lo_ln loln ON locase.lo_case_oid = loln.lo_case_oid "&_         "WHERE (locase.wrkout_typ_cd = 1 "&_         " AND locase.stat_cd = 5 "&_         "AND loln.ln_origtn_dt > TO_DATE('" & strDate & "','MM/DD/YYYY')) "&_         "ORDER BY loln.last_upd_dt desc"  ' Execute Query QueryResultArr = QTP_ExecuteDBQuery(GLOBAL_DB_NAME, sqlQuery) GLOBAL_LOAN_NUM = QueryResultArr(0,0) ' Return results array - the first one is stored in Global var - Get full state name' GLOBAL_LOAN_STATE = QTP_GetStateName(GLOBAL_LOAN_NUM)' CLM_GetLoanState = GLOBAL_LOAN_STATE
 Reporter.ReportEvent micDone,"Global Loan State",GLOBAL_LOAN_STATE  If Err.Number <> 0 Then  CLM_ErrorHandler "CLM_GetLoanNum",Err.Description Else  Reporter.ReportEvent micDone,"END","CLM_GetLoanNum" End If
End Function
''' This function finds the Loan State from the DB for a loan number  Function CLM_GetLoanState(ByVal clmApp) Reporter.ReportEvent micDone,"START","CLM_GetLoanState" Dim sqlQuery, loanNum, queryResultArr loanNum = GLOBAL_LOAN_NUM Select Case UCase(clmApp) Case "TRAX"   sqlQuery = "select distinct prop.ST_CD STATE_CODE " & _        "from clm.mv_reo_prop prop, " & _               "clm.mv_reo_ln reoloan " & _       "where reoloan.REO_LN_OID = prop.REO_LN_OID " & _         "and reoloan.FN_MAE_LN_ID = '" & loanNum & "'"
 Case "DARTS"     If Environment.Value("LoanNum_From_DLQ_Table") Then           sqlQuery = "select dlqprop.PROP_ADR_ST_CD " & _                      "from CLM.MV_DLQ_LN_PROP dlqprop, CLM.MV_DLQ_LN dlqloan " & _                      "where dlqloan.DLQ_LN_OID  = dlqprop.DLQ_LN_OID " & _                      "and dlqloan.FN_MAE_LN_ID = '" & loanNum & "'"
     Else           sqlQuery = "select distinct prop.ST_CD STATE_CODE " & _        "from clm.mv_lo_prop prop, " & _               "clm.mv_lo_ln loloan " & _       "where loloan.LO_LN_OID = prop.LO_LN_OID " & _         "and loloan.FN_MAE_LN_ID = '" & loanNum & "'"     End If
 Case "OTHER"        If Environment.Value("LoanNum_From_DLQ_Table") Then           sqlQuery = "select dlqprop.PROP_ADR_ST_CD " & _                      "from CLM.MV_DLQ_LN_PROP dlqprop, CLM.MV_DLQ_LN dlqloan " & _                      "where dlqloan.DLQ_LN_OID  = dlqprop.DLQ_LN_OID " & _                      "and dlqloan.FN_MAE_LN_ID = '" & loanNum & "'"
     Else           sqlQuery = "select distinct prop.ST_CD STATE_CODE " & _        "from clm.mv_prop prop, " & _               "clm.mv_ref_ln refloan " & _       "where prop.REF_LN_OID = refloan.REF_LN_OID " & _         "and refloan.FN_MAE_LN_ID = '" & loanNum & "'"     End If
 End Select ' Execute Query queryResultArr = QTP_ExecuteDBQuery(GLOBAL_DB_NAME, sqlQuery) ' Return results array - the first one is stored in Global var - Get full state name GLOBAL_LOAN_STATE = QTP_GetStateName(queryResultArr(0,0)) CLM_GetLoanState = GLOBAL_LOAN_STATE
 Reporter.ReportEvent micDone,"Global Loan State",GLOBAL_LOAN_STATE  If Err.Number <> 0 Then  CLM_ErrorHandler "CLM_GetLoanState",Err.Description Else  Reporter.ReportEvent micDone,"END","CLM_GetLoanState" End If
End Function
''' This function finds the Loan's Servicer Number from the DB for a loan number ' @param clmAPP - DARTS, TRAX or Other?Function CLM_GetLoanServicer(LoanNumber) Reporter.ReportEvent micDone,"START","CLM_GetLoanServicer" Dim sqlQuery, loanNum, queryResultArr If Len(Trim(LoanNumber)) < 1 Then    loanNum = GLOBAL_LOAN_NUM Else           loanNum = LoanNumber  End If  'Query to get the Servicer Number If Environment.Value("LoanNum_From_DLQ_Table") Then       sqlQuery = "SELECT DISTINCT CLM.SIR_LN_ACVY_XTRC.SELR_SRVR_NO, CLM.MV_DLQ_LN.FN_MAE_LN_ID " & _      "FROM CLM.MV_DLQ_LN " & _         "JOIN CLM.SIR_LN_ACVY_XTRC ON CLM.MV_DLQ_LN.FN_MAE_LN_ID = CLM.SIR_LN_ACVY_XTRC.FNM_LN_ID  " & _      "WHERE CLM.MV_DLQ_LN.FN_MAE_LN_ID IN ('" & loanNum & "') " Else       sqlQuery = "SELECT DISTINCT vndr.dda_vndr_id, loloan.fn_mae_ln_id " & _      "FROM clm.mv_vndr vndr " & _         "JOIN clm.mv_ref_ln refln ON refln.servr_vndr_oid = vndr.vndr_oid  " & _         "JOIN clm.mv_lo_ln loloan ON loloan.fn_mae_ln_id = refln.fn_mae_ln_id  " & _      "WHERE loloan.fn_mae_ln_id IN ('" & loanNum & "') "       End If  ' Execute Query queryResultArr = QTP_ExecuteDBQuery(GLOBAL_DB_NAME, sqlQuery) ' Return results array - the first one is stored in Global var - Get servicer Number  GLOBAL_LOAN_SERVICER = queryResultArr(0,0) CLM_GetLoanServicer = GLOBAL_LOAN_SERVICER
 Reporter.ReportEvent micDone,"Global Loan Servicer", GLOBAL_LOAN_SERVICER  If Err.Number <> 0 Then  CLM_ErrorHandler "CLM_GetLoanServicer",Err.Description Else  Reporter.ReportEvent micDone,"END","CLM_GetLoanServicer" End If
End Function
Function CLM_GetSearchCriteria 'use script name to lookup search scenario  Dim ScriptName, DataFile, SearchScenario, SearchCriteriaArr, Con, RS ScriptName = Environment.Value("TestName") DataFile = CLMDataPath + "CLM_DARTS_CaseSearch.xls"  'Set the Case Search file to pick depending on the test Environment - either S2ACPT or S3TEST    If Instr(1, UCase(Trim(GLOBAL_ENV)), "ACPT", 1) > 0 Then       DataFile = CLMDataPath + "CLM_DARTS_CaseSearch_UAT.xls"    ElseIf Instr(1, UCase(Trim(GLOBAL_ENV)), "TEST", 1) > 0 Then           DataFile = CLMDataPath + "CLM_DARTS_CaseSearch_SIT.xls"             End If 
 Set Con = CreateObject("ADODB.Connection") Set Rs =  CreateObject("ADODB.RecordSet") Con.ConnectionString = "Driver={Microsoft Excel Driver (*.xls)};DBQ=" + DataFile  Con.Open Rs.Open "SELECT SearchScenario FROM [Script-SearchScenario$] WHERE ScriptName = '" & ScriptName & "'", Con If Rs.BOF <> True then  Rs.MoveFirst  SearchScenario =  Rs(0).Value  'Print SearchScenario End If Rs.Close ' Have to close and re-open RS Rs.Open "SELECT *  FROM [SearchScenario-Criteria$] WHERE SearchScenario = '" & SearchScenario & "'", Con If Rs.BOF <> True then  Rs.MoveFirst  SearchCriteriaArr =  Rs.GetRows End If Rs.Close Con.Close CLM_GetSearchCriteria = SearchCriteriaArr
 If Err.Number <> 0 Then  CLM_ErrorHandler "CLM_GetSearchCriteria",Err.Description Else  Reporter.ReportEvent micDone,"END","CLM_GetSearchCriteria" End If
End Function
Function CLM_CloseOpenWindows Reporter.ReportEvent micDone,"START","CLM_CloseOpenWindows"
 Dim oDesc, x, JW, obj, i
 Set JW =  JavaWindow("CLM")
 Set oDesc = Description.Create oDesc( "Class Name" ).Value = "JavaDialog" Set obj=JavaWindow("CLM").ChildObjects(oDesc) 'close all open java dialog For i=0 to obj.count-1  obj(i).Close    If  JW.JavaDialog("Document Changed").Exist (2) Then   JW.JavaDialog("Document Changed").JavaButton("No").Click  End If Next Set oDesc = Nothing
 Set oDesc = Description.Create oDesc( "Class Name" ).Value = "JavaInternalFrame" Set obj=JavaWindow("CLM").ChildObjects(oDesc) 'close all open java frames For i=0 to obj.count-1  obj(i).Close    If  JW.JavaDialog("Document Changed").Exist (2) Then   JW.JavaDialog("Document Changed").JavaButton("No").Click  End If Next Set oDesc = Nothing
 Set oDesc = Description.Create oDesc( "Class Name" ).Value = "JavaWindow" Set obj=JavaWindow("CLM").ChildObjects(oDesc) 'close all open java window For i=0 to obj.count-1  obj(i).Close    If  JW.JavaDialog("Document Changed").Exist (2) Then   JW.JavaDialog("Document Changed").JavaButton("No").Click  End If Next Set oDesc = Nothing  If Err.Number <> 0 Then  CLM_ErrorHandler "CLM_CloseOpenWindows",Err.Description Else  Reporter.ReportEvent micDone,"END","CLM_CloseOpenWindows" End If
 Reporter.ReportEvent micDone,"END","CLM_CloseOpenWindows"End Function
Function CLM_WEB_Logout Reporter.ReportEvent micDone,"START","CLM_WEB_Logout" If Browser("AMN").Dialog("Message from webpage").Exist(2) Then    Browser("AMN").Dialog("Message from webpage").WinButton("OK").Click End If If Browser("AMN").Page("AMN").WebButton("Log Out").Exist(5) Then    Browser("AMN").Page("AMN").WebButton("Log Out").Click    If Browser("AMN").Dialog("Windows Internet Explorer").Exist(30) Then          Browser("AMN").Dialog("Windows Internet Explorer").WinButton("Yes").Click       End If  Else       Browser("AMN").Close End If     If Err.Number <> 0 Then  CLM_ErrorHandler "CLM_WEB_Logout",Err.Description Else  Reporter.ReportEvent micDone,"END","CLM_WEB_Logout" End IfEnd Function
Function CLM_GetDataFromDB'(ByVal QueryScenario)    Reporter.ReportEvent micDone,"START","CLM_DARTS_GetDataFromDB" 'Build Query from Spreadsheet ' execute query and return query resutls as array? Dim ScriptName, DataFile, QueryScenario, SQLQuery, QueryResultArr,  l, RS, Con  ScriptName = Environment.Value("TestName")     If Environment.Value("TestCaseNameForTestData") = False Then  ScriptName = Environment.Value("TestName") Else  ScriptName = Environment.Value("TestCaseNameForTestData") End If  DataFile = CLMDataPath + "CLM_DataQueries.xls"  'Set the Data Queries file to pick depending on the test Environment - either S2ACPT or S3TEST    If Instr(1, UCase(Trim(GLOBAL_ENV)), "ACPT", 1) > 0 Then       DataFile = CLMDataPath + "CLM_DataQueries_UAT.xls"    ElseIf Instr(1, UCase(Trim(GLOBAL_ENV)), "TEST", 1) > 0 Then           DataFile = CLMDataPath + "CLM_DataQueries_SIT.xls"             End If
 Set Con = CreateObject("ADODB.Connection") Set Rs =  CreateObject("ADODB.RecordSet") Con.ConnectionString = "Driver={Microsoft Excel Driver (*.xls)};DBQ=" + DataFile  Con.Open Rs.Open "SELECT QueryScenario FROM [Script-QueryScenario$] WHERE ScriptName = '" & ScriptName & "'", Con, 3 If Rs.BOF <> True then  Rs.MoveFirst  QueryScenario =  Rs(0).Value End If Rs.Close
 Rs.Open "Select FullQuery from [QueryScenario-Query$] Where QueryScenario = '" & QueryScenario & "'",Con, 3 If Rs.BOF <> True then  Rs.MoveFirst  SQLQuery =  Rs(0).Value End If Rs.Close Con.Close  ' Code Updated by Praveen Mandava - 01/07/2016 ' Below code has been implemented to accomadate queries to get loan number from both DLQ tables and Case tables ' Reason we are setting a flag is to get the state using retreived loan number. If the loan number is from DLQ tables ' then we would have use a different property to get the state. Environment.Value("LoanNum_From_DLQ_Table") = False If Instr(1, UCase(SQLQuery), "_DLQ_", 1) > 0 Then Environment.Value("LoanNum_From_DLQ_Table") = True
 ' Execute Query  QueryResultArr = QTP_ExecuteDBQuery(GLOBAL_DB_NAME, SQLQuery) Global_DB_ResultSet = QueryResultArr ' Return results array - the first one is stored in Global var
 'If UBound(arrayRS) > -1 Then  GLOBAL_LOAN_NUM = QueryResultArr(0,0)  GLOBAL_LOAN_SERVICER = QueryResultArr(1,0)  'Commented this on 07/27/2016 as it was not being used and same was leveraged for Case ID for Rest Web Service Testing  'GLOBAL_LOAN_SERVICING_FEE = QueryResultArr(2,0)  GLOBAL_CASEID = QueryResultArr(2,0)  GLOBAL_NET_SALES_PROCEEDS = QueryResultArr(3,0) 'Else'  Reporter.ReportEvent micDone,"NO DATA",""'  ISSUE_DETAILS = "No data returned from sql"' End If
 Reporter.ReportEvent micDone,"Global Loan Number",GLOBAL_LOAN_NUM     ReDim GLOBAL_DB_ARRAY( UBound(QueryResultArr,2))  For l = 0 to UBound(QueryResultArr,2)  GLOBAL_DB_ARRAY(l) = QueryResultArr(0,l) Next
 CLM_GetDataFromDB = QueryResultArr
 If Err.Number <> 0 Then  CLM_ErrorHandler "CLM_DARTS_GetDataFromDB",Err.Description Else  Reporter.ReportEvent micDone,"END","CLM_DARTS_GetDataFromDB" End If
End Function
'*********************************************************************************************************************' DESCRIPTION' Retrieves the system date.'PARAMETERS'None'RETURNED VALUE' Returns the system dateFunction CLM_GetSystemDate
 Dim Connection, ConnString, Recordset, SQL, sysDate
 'define the connection string, specify database driver 'ConnString = "DRIVER={Microsoft ODBC for Oracle};UID=Q0UOTT9J;PWD=b055UAT_5har12;SERVER=AORLQ03;DSN=AORLQ03" ' Environment.Value("CONNECTION_STR_ORA_PORLQ01") ConnStr = "DRIVER={Microsoft ODBC for Oracle};Server=" + GLOBAL_DB_NAME + ";Uid=" + GLOBAL_SHARED_ID + ";Pwd=" + GLOBAL_SHARED_ID_PWD_DB + ";" SQL = "SELECT TO_CHAR(sys_tm,'MM/DD/YYYY') SYS_DT FROM clm.sys_tm"
 'create an instance of the ADO connection and recordset objects Set Con = CreateObject("ADODB.Connection") Set Rs =  CreateObject("ADODB.RecordSet")  'Open the connection to the database Con.Open ConnStr  'Open the recordset object executing the SQL statement and return records  Rs.Open SQL,Con
 'if there are records, then loop through the fields  If  NOT Rs.EOF Then  SYS_DATE = Rs("SYS_DT")  reporter.ReportEvent micDone, "Fetch of system date", "Running in lower environment.  Successfully fetched system date from DB,  date:  " & sysDate Else  SYS_DATE = Date  reporter.ReportEvent micDone, "Fetch of system date", "Running in Production.  Passed current system date,  date:  " & sysDate End If
 CLM_GetSystemDate = SYS_DATE   Rs.Close Set Rs = nothing Con.Close Set Con = nothing If Err.Number <> 0 Then  CLM_ErrorHandler "CLM_GetSystemDate",Err.Description Else  Reporter.ReportEvent micDone,"END","CLM_GetSystemDate" End IfEnd Function
'NOTE - Need to move sql out laterFunction CLM_GetCaseNumber
    Reporter.ReportEvent micDone,"START","CLM_GetCaseNumber"  sqlQuery = "SELECT   CLM.MV_LO_CASE.DARTS_CASE_ID,  CLM.MV_LO_CASE.STAT_CD,  CLM.MV_LO_CASE.STAT_CD_DESCPTN FROM CLM.MV_LO_CASE WHERE   ( CLM.MV_LO_CASE.STAT_CD NOT IN ('2','4','5')  AND  CLM.MV_LO_CASE.FN_MAE_LN_ID  =  '"&GLOBAL_LOAN_NUM&"'  )" QueryResultArr = QTP_ExecuteDBQuery(GLOBAL_DB_NAME, sqlQuery) GLOBAL_CASE_NUMBER = QueryResultArr(0,0)
 If Err.Number <> 0 Then  CLM_ErrorHandler "CLM_GetCaseNumber",Err.Description Else  Reporter.ReportEvent micDone,"END","CLM_GetCaseNumber" End If End Function
'Function CLM_ExecuteQueryReturnData(ByVal QueryScenario)'''    Reporter.ReportEvent micDone,"START","CLM_ExecuteQueryReturnData"'' Dim DataFile, QueryScenario, SQLQuery, QueryResultArr,  l, RS, Con' DataFile = CLMDataPath + "CLM_DataQueries.xls"'' Set Con = CreateObject("ADODB.Connection")' Set Rs =  CreateObject("ADODB.RecordSet")' Con.ConnectionString = "Driver={Microsoft Excel Driver (*.xls)};DBQ=" + DataFile ' Con.Open'' Rs.Open "Select FullQuery from [QueryScenario-Query$] Where QueryScenario = '" & QueryScenario & "'",Con, 3' If Rs.BOF <> True then'  Rs.MoveFirst'  SQLQuery =  Rs(0).Value' End If' Rs.Close' Con.Close'' ' Execute Query' QueryResult = QTP_ExecuteDBQuery(GLOBAL_DB_NAME, SQLQuery)'' Reporter.ReportEvent micDone,"END","CLM_ExecuteQueryReturnData"''End Function
Function CLM_ErrorHandler(FunctionName, ErrorDesc) Dim sFormatErrorDesc sFormatErrorDesc = FunctionName & " --- " & ErrorDesc Reporter.ReportEvent micFail, "Exception Caught", sFormatErrorDesc QTP_CaptureScreenshot 
    Dim TestInTestSet Set TestInTestSet = QCUtil.CurrentTestSetTest ISSUE_DETAILS = sFormatErrorDesc TestInTestSet.Field("TC_USER_02") = ISSUE_DETAILS TestInTestSet.Field("TC_USER_02") = ISSUE_DETAILS TestInTestSet.Post
 ExitTest
End Function
Function CLM_LoadScriptLibraries
    QTP_LoadFunctionLibrary(CLMScriptPath + "CLM_Scripts_DARTS_BusinessRules.qfl")  QTP_LoadFunctionLibrary(CLMScriptPath + "CLM_Scripts_DARTS_CaseCreation.qfl")  QTP_LoadFunctionLibrary(CLMScriptPath + "CLM_Scripts_DARTS_Shakeout.qfl")  QTP_LoadFunctionLibrary(CLMScriptPath + "CLM_Scripts_SERFS_Shakeout.qfl")  QTP_LoadFunctionLibrary(CLMScriptPath + "CLM_Scripts_TRAX_Shakeout.qfl")  QTP_LoadFunctionLibrary(CLMScriptPath + "CLM_Scripts_DARTS_AdminAndGlobalParms.qfl")  QTP_LoadFunctionLibrary(CLMScriptPath + "CLM_Scripts_DARTS_ApprovalLetter.qfl")  QTP_LoadFunctionLibrary(CLMScriptPath + "CLM_Scripts_DARTS_Comments.qfl")  QTP_LoadFunctionLibrary(CLMScriptPath + "CLM_Scripts_DARTS_HSSNCaseSubmission.qfl")  QTP_LoadFunctionLibrary(CLMScriptPath + "CLM_Scripts_DARTS_MortgageInsurance.qfl")  QTP_LoadFunctionLibrary(CLMScriptPath + "CLM_Scripts_DARTS_PreforeclosureTransitions.qfl")  QTP_LoadFunctionLibrary(CLMScriptPath + "CLM_Scripts_DARTS_SearchFunctionAndLoanFinder.qfl")    'New Script Libraries Added by Praveen Mandava - 12/08/2015  Call QTP_LoadFunctionLibrary(CLMScriptPath + "CLM_Scripts_DARTS_RiskBased.qfl")  Call QTP_LoadFunctionLibrary(CLMScriptPath + "CLM_Scripts_DARTS_Miscellaneous.qfl")    'New Script Libraries Added by Santosh Kovuri 03/11/2016  Call QTP_LoadFunctionLibrary(CLMScriptPath + "CLM_Scripts_InSprint.qfl")
 If Err.Number <> 0 Then  CLM_ErrorHandler "CLM_LoadScriptLibraries",Err.Description Else  Reporter.ReportEvent micDone,"END","CLM_LoadScriptLibraries" End If  End Function

Function CLM_GetTestData()     Dim RowCount, ColumnCount, ix    Dim TestData      : Set TestData = CreateObject("Scripting.Dictionary")    Dim ScriptNameRow : ScriptNameRow = 0    Dim ScriptNameCol : ScriptNameCol = 0    Dim TempFlag      : TempFlag = False    Dim BuildData     : BuildData = False    Dim TestRowFound  : TestRowFound = False        Dim pExcel, pWorkBook, pSheet         Set CLM_GetTestData = TestData        'Set the Input Data file to pick depending on the test Environment - either S2ACPT or S3TEST    If Instr(1, UCase(Trim(GLOBAL_ENV)), "ACPT", 1) > 0 Then       CLMInputDataPath = CLMDataPath + "CLM_InputData_UAT.xls"    ElseIf Instr(1, UCase(Trim(GLOBAL_ENV)), "TEST", 1) > 0 Then           CLMInputDataPath = CLMDataPath + "CLM_InputData_SIT.xls"             End If          ' Create an Instance of the InputTestData excel File      Set pExcel = CreateObject("Excel.Application")         Set pWorkBook = pExcel.Workbooks.Open(CLMInputDataPath)      Set pSheet = pWorkBook.Worksheets(CLMInputDataSheet)      pExcel.DisplayAlerts=False            'Get the Row Count      RowCount = pSheet.UsedRange.Rows.Count      'Get the Column Count (Only till it encounters an empty column)      ColumnCount = pSheet.UsedRange.Columns.Count      For ix = 1 To ColumnCount          If Len(Trim(pExcel.Cells(1 , ix ))) < 1 Then               ColumnCount = ix               Exit For                         End If             Next            'Get Column Number for "ScriptName"      For ix = 1 To ColumnCount          If UCase(Trim(pExcel.Cells(1 , ix ))) = UCase(Trim(CLMInputDataKeyColumn)) Then                ScriptNameCol = ix                BuildData = True                Exit For          ElseIf ix = ColumnCount Then                 Reporter.ReportEvent micInfo, "ScriptName Column in Input Data File", "Could Not find a column 'ScriptName' in the Input Data File. Input Data File Format is NOT correct."                pExcel.Quit                 Set pExcel = Nothing                Set pWorkBook = Nothing                Set pSheet = Nothing          End If       Next            ' Build the test data only if the scriptname is found in the Inout Data file         If BuildData Then             'Get the Row Number for the Test Script Name            For ix = 1 To RowCount                         If Environment.Value("TestCaseNameForTestData") = False Then              vTestCaseNameToMatch  =  Trim(Environment.Value("TestName"))             Else              vTestCaseNameToMatch = Environment.Value("TestCaseNameForTestData")             End If                            If UCase(Trim(pExcel.Cells(ix , ScriptNameCol))) = UCase(vTestCaseNameToMatch) Then                  TempFlag = True                    ScriptNameRow = ix                    TestRowFound = True                    Exit For               ElseIf ix = RowCount Then                         Reporter.ReportEvent micInfo, "Find Row in DataTable", "Could not find row in data sheet for the Test : " & Environment.Value("TestName")                      pExcel.Quit                       Set pExcel = Nothing                      Set pWorkBook = Nothing                      Set pSheet = Nothing                        End If            Next                        'Continue building the test data dictionary Object only if the test case name is found in the input data file            If TestRowFound Then               'Since We identified the needed row and column, build the test data into a dictionary                                    For ix = 1 To ColumnCount                      'MsgBox ("For ix = " & ix & ": " & Trim(pExcel.Cells(1 , ix )) & " = " & Trim(pExcel.Cells(ScriptNameRow , ix )) )                      TestData.Add Trim(pExcel.Cells(1 , ix )), Trim(pExcel.Cells(ScriptNameRow , ix ))                  Next                                    ' Return the Dictionary                  Set CLM_GetTestData = TestData                                    'Clean Up                  Set TestData = Nothing                   pExcel.Quit                   Set pExcel = Nothing                  Set pWorkBook = Nothing                  Set pSheet = Nothing             End If                End If     
End Function


Function LaunchAndGetBrowserHWND(URL, MaxTimeOut)  'Return False incase of Failure LaunchAndGetBrowserHWND = False  Dim i Dim Domain Dim TempObj, TempVal, TempURL, TempArray Dim oDesc, ObjCnt, PageObj  Dim vFlag : vFlag = False Dim TempFlag : TempFlag = False Dim Counter : Counter = 0 Dim RndNum : RndNum = RandomNumber (100000, 999999)  TempURL = "about:blank?" & RndNum  On Error Resume Next         SystemUtil.Run "IEXPLORE.EXE", "about:blank?" & RndNum,"", "open", 3         If Err.Number <> 0 Then Exit Function    On Error GoTo 0        'Get HWND Property of the Launched Browser    Set oDesc=Description.Create    oDesc("micclass").Value="Browser"        Do while Counter < Cint(MaxTimeOut)        If TempFlag Then Exit Do        Wait(1)        Set TempObj =  Desktop.ChildObjects(oDesc)        ObjCnt = TempObj.Count        If ObjCnt > 0 Then              On Error Resume Next                 For i = ObjCnt - 1 To 0 Step -1                     TempVal = TempObj(i).Page("Index:=0").GetROProperty("URL")                     'TempVal = TempObj(i).GetROProperty("Title")                     If Instr(1, TempVal, RndNum, 1) > 0 Then                           TempFlag = True                           'Save HWND Value of the browser opened for this test run. Navigation Canceled                            Environment("BrowserHwnd") = TempObj(i).GetRoProperty("top_level_hwnd")                           Exit For                                                 End If                                           Next              On Error GoTo 0        End If        Counter = Counter + 1    Loop        If TempFlag = False Then Exit Function        'Now Navigate to the required URL    Set TempObj = Browser("top_level_hwnd:=" & Environment.Value("BrowserHwnd"))    TempObj.Navigate URL    TempArray = Split(URL, "//", -1, 1)    Domain = Split(TempArray(1), "/", -1, 1) ' Domain(0) will have the domain name of the page we are opening        'See if Certificate Error Page Exists    Set TempObj = Browser("top_level_hwnd:=" & Environment.Value("BrowserHwnd")).Page("Index:=0").Link("text:=Continue to this website.*", "Index:=0")     'Wait 4     Call WaitForAnObject(TempObj,MaxTimeOut)    If TempObj.Exist Then          'TempObj.Highlight       TempObj.Click    End If        'Now get the actual HWND Value    Set TempObj = Browser("top_level_hwnd:=" & Environment.Value("BrowserHwnd")).Page("url:=.*" & Domain(0) & ".*" )    If TempObj.Exist(MaxTimeOut)Then          Set TempObj = Browser("top_level_hwnd:=" & Environment.Value("BrowserHwnd"))          Environment.Value("BrowserTitle") = TempObj.GetROProperty("Title")          Environment.Value("BrowserHwnd")  = TempObj.GetROProperty("hwnd")          LaunchAndGetBrowserHWND = True    End If  End Function
Function LoadDataFile(inputFilePath, srSheetName, dtSheetName)
 Environment.Value("DT_RowCount") = 0 If Len(Trim(srSheetName)) = 0 Then srSheetName = "Sheet1" If Len(Trim(dtSheetName)) = 0 Then dtSheetName = "Action1" If Instr(1, inputFilePath, "\", 1) < 1  Then inputFilePath = CLMDataPath & inputFilePath
 LoadDataFile = DataTable.ImportSheet(inputFilePath , srSheetName, dtSheetName) Environment.Value("DT_RowCount") = DataTable.GetSheet(dtSheetName).GetRowCount 
End Function
Function ExportDataFile(ExportFilePath, srSheetName, dtSheetName)
 If Len(Trim(srSheetName)) = 0 Then srSheetName = "Action1" If Len(Trim(dtSheetName)) = 0 Then dtSheetName = "Sheet1" If Instr(1, ExportFilePath, "\", 1) < 1  Then ExportFilePath = CLMDataPath & ExportFilePath
 ExportDataFile = DataTable.ExportSheet(ExportFilePath , srSheetName, dtSheetName)
End Function
Function CLM_Java_CleanUp()
' DESCRIPTION : This Function will close all the Java Dialogs and Java Internal Frames in CLM Java Window'Author : Praveen Mandava         Dim JWindowObj, JIFrameObj, JButtonObj, JDialogObj, JSaveMenu   Dim TempFlag, TempVal, TempArray   Dim oDesc, tDesc   Dim DPObj   Dim ix     CLM_Java_CleanUp = False        Set JSaveMenu  = GetTestObject(DARTS_SAVE_MENU)         'Default Java Window set to CLM    Set JWindowObj = JavaWindow("title:=Credit Loss Management Sys.*", "Index:=0")   If Not JWindowObj.Exist(1) Then          CLM_Java_CleanUp = False         Exit Function   End If
   'Restore the CLM Window   On Error Resume Next   'JWindowObj.JavaMenu("File").JavaMenu("Save").WaitProperty "enabled", 1   'JWindowObj.Restore   'JWindowObj.Activate   On Error Goto 0      'Close Document Changed Java Dialog   Set DPObj = JWindowObj.JavaDialog("title:=Document Changed", "Index:=0")   If DPObj.Exist(1) Then         DPObj.JavaButton("text:=No", "Index:=0").Click   End If         'Close All Dialogs   Set oDesc = Description.Create()       oDesc("to_class").Value = "JavaDialog"      Set JDialogObj = JWindowObj.ChildObjects(oDesc)   For ix = 0 To JDialogObj.Count - 1       Set tDesc = Description.Create()       tDesc("to_class").Value = "JavaButton"       Set JButtonObj = JDialogObj(ix).ChildObjects(tDesc)       If JButtonObj.Count > 0 Then JButtonObj(0).Click       JSaveMenu.WaitProperty "enabled", 1   Next      Set oDesc = Nothing   Set tDesc = Nothing         'Close All InternalFrames   Set oDesc = Description.Create()       oDesc("to_class").Value = "JavaInternalFrame"      Set JIFrameObj =  JWindowObj.ChildObjects(oDesc)      For ix = 0 To JIFrameObj.Count - 1       JIFrameObj(ix).Close        Wait(1)       JWindowObj.RefreshObject       If JWindowObj.JavaDialog("index:=0").Exist(2) Then              If JWindowObj.JavaDialog("title:=Document Changed", "Index:=0").Exist(1) Then                 JWindowObj.JavaDialog("title:=Document Changed", "Index:=0").JavaButton("text:=No", "Index:=0").Click             Else                   JWindowObj.JavaDialog("index:=0").JavaButton("Index:=0").Click                           End If             JWindowObj.JavaMenu("text:=File", "Index:=0").JavaMenu("text:=Save", "Index:=0").WaitProperty "enabled", 1           End If   Next         'CleanUp   Set oDesc      = Nothing   Set JDialogObj = Nothing   Set JButtonObj = Nothing   Set JIFrameObj = Nothing 
   CLM_Java_CleanUp = True      End Function'******Function CLM_Java_CloseAllDialogBoxes()
' DESCRIPTION : This Function will close all the Java Dialogs'Author : Praveen Mandava         Dim JWindowObj, JIFrameObj, JButtonObj, JDialogObj   Dim TempFlag, TempVal, TempArray   Dim oDesc, tDesc   Dim DPObj   Dim ix     CLM_Java_CloseAllDialogBoxes = False         'Default Java Window set to CLM    Set JWindowObj = JavaWindow("title:=Credit Loss Management Sys.*", "Index:=0")   If Not JWindowObj.Exist(1) Then          CLM_Java_CloseAllDialogBoxes = True         Exit Function   End If   
   'Restore the CLM Window   On Error Resume Next   'JWindowObj.JavaMenu("File").JavaMenu("Save").WaitProperty "enabled", 1   'JWindowObj.Restore   JWindowObj.Activate   On Error Goto 0      'Close Document Changed Java Dialog   Set DPObj = JWindowObj.JavaDialog("title:=Document Changed", "Index:=0")   If DPObj.Exist(1) Then         DPObj.JavaButton("text:=No", "Index:=0").Click   End If         'Close All Dialogs   Set oDesc = Description.Create()       oDesc("to_class").Value = "JavaDialog"      Set JDialogObj = JWindowObj.ChildObjects(oDesc)   For ix = 0 To JDialogObj.Count - 1       Set tDesc = Description.Create()       tDesc("to_class").Value = "JavaButton"       Set JButtonObj = JDialogObj(ix).ChildObjects(tDesc)       If JButtonObj.Count > 0 Then JButtonObj(0).Click       JWindowObj.JavaMenu("File").JavaMenu("Save").WaitProperty "enabled", 1   Next      Set oDesc = Nothing   Set tDesc = Nothing   Set JDialogObj = Nothing   Set JButtonObj = Nothing   Set JWindowObj = Nothing 
   CLM_Java_CloseAllDialogBoxes = True      End Function
Function CLM_Java_GetTableRowCount(TableObj)
' DESCRIPTION : This Function will check if the Java table exists, if it exists it will return the number of rows else will return False'Author : Praveen Mandava         Dim JWindowObj, JIFrameObj, JButtonObj, JDialogObj   Dim TempFlag, TempVal, TempArray   Dim oDesc, tDesc   Dim DPObj   Dim ix        CLM_Java_GetTableRowCount = False         'Validate Test Object   If Not IsObject(TestObject) Then Set TableObj = GetTestObject(TableObj)      'Verify If the Table Exists   If Not TableObj.Exist Then         Reporter.ReportEvent micWarning,"Table Exists?","The Table does NOT exist."          Exit Function     Else         CLM_Java_GetTableRowCount =  TableObj.GetROProperty("rows")     End If   End Function
'***************************************************************************************************************************************************************************************************
Dim vMinWaitTime, vInterimWaitTime, vMaxWaitTime,vSwingURL,vUserName,vPassword,vWebURL,vIsEncryptedDim vDARTSShakeOutScenario,vSERFSShakeOutScenario,vTRAXShakeOutScenario,vHSSNShakeOutScenario,vDataBaseEnv,vSysDate
' Function to Send emails from ALM
Public Function SendEmail(From,To_mail,CC_mail,Subject,Body)      Set QCConn = QCUtil.QCConnection         QCConn.SendMail To_mail,From, Subject,Body        Set QCConn = Nothing    End function
' Function to Intialize any variables needed for the execution
Function Intialize()  vMinWaitTime   =  60 vInterimWaitTime = 120 vMaxWaitTime   =  240 
 Call DownLoadResourceFromALM("CLMEnvDetails","C:\Temp1\") wait 3 Call FetchEnvDetails() Call CloseAllBrowsers 'SystemUtil.CloseProcessByName "iexplore.exe"  Call ObtainCurrentSysDateFromTableEnd Function'***************************************************************************************************************************************************************************************************
Function ObtainCurrentSysDateFromTable()  Call FetchLoginDetails("DataBaseUser","003") vSQL = "Select SYS_TM  from CLM.SYS_TM" Set ObjCon    = CreateObject("ADODB.Connection") Set RS_RecordSet  = CreateObject("ADODB.Recordset") ConnectionString  = "DSN=CLM;UID=" & vUserName & ";PWD=" & vPassword & ";DBQ=" & vDataBaseEnv & ";DBA=W;APA=T;EXC=F;FEN=T;QTO=T;FRC=10;FDL=10;LOB=T;RST=T;BTD=F;BAM=IfAllSuccessful;NUM=NLS;DPM=F;MTS=T;MDI=F;CSR=F;FWC=F;FBS=64000;TLO=O;"    Call ConnectToDataBase(ObjCon,ConnectionString ) Call ExecuteSQLQuery(ObjCon, RS_RecordSet, vSQL )  If RS_RecordSet.EOF = False Then  vSysDate = FormatDate(RS_RecordSet.Fields(0).Value,"YYYY-MM-DD") Else  vSysDate = "" End If   Call CloseDataBase(ObjCon,RS_RecordSet)
End Function
'***************************************************************************************************************************************************************************************************' Function to Download a Specified resource from ALM resources section'***************************************************************************************************************************************************************************************************
Function DownLoadResourceFromALM(vResourceName,vPathToSave)  Set qcConn = QCUtil.QCConnection   Set vResource  = qcConn.QCResourceFactory Set vFilter  = vResource.Filter  Set ObjResourceList = vFilter.NewList 
 For Iterator = 1 To ObjResourceList.Count Step 1  If ObjResourceList.Item(Iterator).Name = vResourceName Then    Set vFile = ObjResourceList.Item(Iterator)    vFile.DownloadResource vPathToSave, True  End If Next 
End Function
'***************************************************************************************************************************************************************************************************' Function to Fetch Env details from the XML file specified'***************************************************************************************************************************************************************************************************
Function FetchEnvDetails()
 Set XmlDom = CreateObject("Microsoft.XMLDOM") XmlDom.Async  = "false" blnFound   = false vActiveEnv  = "" XmlDom.Load("C:\Temp1\CLMEnvDetails.xml") Set NodeList1  = XmlDom.getElementsByTagName("ActiveEnv") For Each Node in  NodeList1  blnFound = False  Set AttributeList = Node.Attributes  If AttributeList(i).name = "Environment"  Then   vActiveEnv = AttributeList(i).Text   blnFound  = True   Exit for  End If Next   If vActiveEnv <> "" Then  Set NodeList2  = XmlDom.getElementsByTagName("EnvDetails")  For Each Node in  NodeList2   blnFound = False   Set AttributeList = Node.Attributes   cCount = AttributeList.Length   For i = 0 To cCount - 1    If AttributeList(i).name = "Env" and AttributeList(i).Text = vActiveEnv  Then     vWebURL   = AttributeList(i+1).Text     vSwingURL   = AttributeList(i+2).Text     vDataBaseEnv  = AttributeList(i+3).Text     blnFound  = True     Exit for    End If   Next   If blnfound Then Exit for  Next  End If
End Function
'***************************************************************************************************************************************************************************************************' Function to fetch login details from XML File downloaded from ALM'***************************************************************************************************************************************************************************************************
Function FetchLoginDetails(vUserType,vUniqueIdentifier)  Set XmlDom = CreateObject("Microsoft.XMLDOM") XmlDom.Async = "false"  XmlDom.Load("C:\TEMP1\CLMEnvDetails.xml")  Set NodeList1  = XmlDom.getElementsByTagName("Roles")  For Each Node in  NodeList1  blnFound = False  Set AttributeList = Node.Attributes  cCount = AttributeList.Length  For i = 0 To cCount - 1   If AttributeList(i).name = "Name" and AttributeList(i).Text = vUserType & vUniqueIdentifier Then    vUserName   = AttributeList(i+1).Text    vPassword   = AttributeList(i+2).Text    vIsEncrypted  = AttributeList(i+3).Text    blnFound = True    Exit for   End If  Next  If blnfound Then Exit for Next  End Function
'***************************************************************************************************************************************************************************************************' Function to DeIntalize the script to wind down the execution'***************************************************************************************************************************************************************************************************
Function DeIntialize()
 If JavaWindow("Credit Loss Management").JavaMenu("File").Exist(5) Then  JavaWindow("Credit Loss Management").JavaMenu("File").JavaMenu("Exit").Select End If  If Browser("JavaSwingWebStart").Exist(5) Then  Browser("JavaSwingWebStart").Close End If  Call CloseAllBrowsers
End Function
'***************************************************************************************************************************************************************************************************'' Function to verify if a repalce text in a flat file. Returns the flags as per out come of repalacement
'****************************************************************************************************************************************************************************************************
Function UpdateXMLTagValueToUnique (vFilePath,vFileName,vTagName,vAttributeName,vReplacementText)
 Dim pathToXML Dim xmlDoc
    Set xmlDoc = CreateObject("MSXML2.DOMDocument")    pathToXML = vFilePath &  "\" & vFileName        Call xmlDoc.Load(pathToXML)        Set NodeList1  = xmlDoc.getElementsByTagName(vTagName)  For Each Node in  NodeList1  blnFound = False  Set AttributeList = Node.Attributes  cCount = AttributeList.Length  For i = 0 To cCount - 1   If AttributeList(i).name = vAttributeName  Then    AttributeList(i).Text = vReplacementText    blnfound = true    xmlDoc.save pathToXML   End If  Next  If blnfound Then Exit for Next End Function
'***************************************************************************************************************************************************************************************************'' Function to delete a file at the specified location'' @param vPathOfTextFile    This is the path of the text file' @return     Returns a boolean flag to confirm if the file was deleted or not' @remarks     The Functions will also verify if the file is found at the desired location before trying to delete it, the script will send true flag even if the'        file does not exist' @author      SantoshKumar.Kovuri' @Version     Ver 1.0
'****************************************************************************************************************************************************************************************************
Function func_DeleteTextFile(vPathOfTextFile)
 Dim fso Set fso = createobject("Scripting.FileSystemObject") Err.clear
 If  fso.FileExists(vPathOfTextFile) Then  On Error Resume Next  'Error handler is added here to avoid QTP from throwing an error message on the screen if the required permissions are not available  fso.DeleteFile(vPathOfTextFile)  Set fso = nothing    If Err.description = "" Then   func_DeleteTextFile = true  else   func_DeleteTextFile = false  End If else        func_DeleteTextFile = true End If
End Function
'***************************************************************************************************************************************************************************************************' Function to check if the DataTable has the parameter under consideration'***************************************************************************************************************************************************************************************************
Function DataTableParameterExists(vSheetName, vParamName)        DataTableParameterExists = True     On error resume next    err.clear    Dim oParam    vParamValue = Datatable.Value(vParamName,vSheetName)        If Err.Number  <> 0 Then       DataTableParameterExists = False    End If        On error goto 0    End Function
'***************************************************************************************************************************************************************************************************'Function to Launch a SwingWEB URL and Open the Swing Application'***************************************************************************************************************************************************************************************************
Function LaunchSwingWebUrl(vURL)  InvokeApplication "C://Program Files (x86)/Internet Explorer/iexplore.exe " & vUrl wait 3  Set vObj  = Browser("JavaSwingWebStart").Page("JavaSwingWebStart").Link("Launch Credit Loss Management") vFound   = WaitForAnObject(vObj,vMaxWaitTime)  If vFound = True then  Browser("JavaSwingWebStart").Page("JavaSwingWebStart").Link("Launch Credit Loss Management").Click  '  Set vObj  = Browser("JavaSwingWebStart").WinObject("Notification").WinButton("Open")'  vStatus  = WaitForAnObject(vObj,vInterimWaitTime)    i = 1  While i < 20     If Browser("JavaSwingWebStart").WinObject("Notification").WinButton("Open").Exist(8) then    Browser("JavaSwingWebStart").WinObject("Notification").WinButton("Open").Click    wait 5   ElseIf JavaDialog("JavaSwingAuthentication").JavaEdit("UserName").Exist(2) Then    i = 20   Else    i = 20   End if      i = i + 1    Wend   End if  If vFound = true Then  Reporter.ReportEvent micPass,"SwingWebUrlLaunch","The Swing Url was launched Succesfully" Else  Reporter.ReportEvent micFail,"SwingWebUrlLaunch","The Swing url was not launched succesfully even after waiting for " & vMaxWaitTime & " seconds, test will be aborted" End If  LaunchSwingWebUrl = vFound End Function
'***************************************************************************************************************************************************************************************************' Function to Login to Java Window for before getting the CLM Swing Login Window
'***************************************************************************************************************************************************************************************************
Function LoginToSwing_JavaLogin(vUserName,vPassword)
 Set vObj = JavaDialog("JavaSwingAuthentication").JavaEdit("UserName")  vFound   =  WaitForAnObject(vObj,vMaxWaitTime) wait 2   If vUserName = "" or vPassword = "" Then  Reporter.ReportEvent micFail,"LoginDetailsBlank","Error - Either the UserName or Password is Blank, please cross check"  If JavaDialog("JavaSwingAuthentication").JavaEdit("UserName").Exist(2) then   JavaDialog("JavaSwingAuthentication").Close   wait 2   Call CloseAllBrowsers()   vFound = False  End if   End If   If vFound = true Then   i = 0      While i < vMaxWaitTime      If JavaDialog("JavaSwingAuthentication").JavaEdit("UserName").Exist(2) or JavaDialog("CLMLoginPage").JavaEdit("UserName").Exist(2) Then         If JavaDialog("JavaSwingAuthentication").JavaEdit("UserName").Exist(2) Then      JavaDialog("JavaSwingAuthentication").JavaEdit("UserName").Set vUserName      JavaDialog("JavaSwingAuthentication").JavaEdit("Password").SetSecure vPassword      JavaDialog("JavaSwingAuthentication").JavaButton("OK").Click         End if          If JavaDialog("CLMLoginPage").JavaEdit("UserName").Exist(2) Then      i = vMaxWaitTime     End If   Else    wait 1    i = i + 1      End If     Wend  End if    If vFound = true Then  Reporter.ReportEvent micPass,"Swing - Java Login","Succesfully Entered the login details in Swing UI - Java Login" Else  Reporter.ReportEvent micFail,"Swing - Java Login","Could not find the Swing UI - Java Login even after waiting for " & vMaxWaitTime & " seconds, aborting test" End If  LoginToSwing_JavaLogin = vFound   End Function
'***************************************************************************************************************************************************************************************************' Function to Login to CLM Swing UI'***************************************************************************************************************************************************************************************************
Function LoginToSwingCLMUI(vUserName, vPassword)  vFound = false i = 1  While i < 120   If JavaDialog("Security Information").JavaCheckBox("Do not show this again").Exist(2) or JavaDialog("CLMLoginPage").JavaEdit("UserName").Exist(2) Then   i = 120   vFound = true  Else   i = i +1  End If    Wend   If vUserName = "" or vPassword = "" Then  Reporter.ReportEvent micFail,"LoginDetailsBlank","Error - Either the UserName or Password is Blank, please cross check"  If JavaDialog("CLMLoginPage").JavaEdit("UserName").Exist(2) then   JavaDialog("CLMLoginPage").Close   wait 2   Call CloseAllBrowsers()   vFound = False  End if   End If  If vFound = True Then    If JavaDialog("Security Information").JavaCheckBox("Do not show this again").Exist(2) then   JavaDialog("Security Information").JavaCheckBox("Do not show this again").Set "ON"   JavaDialog("Security Information").JavaButton("Run").Click      Set vObj = JavaDialog("CLM Login").JavaEdit("UserName")    vFound   =  WaitForAnObject(vObj,vMaxWaitTime)   wait 2       End if     If vFound = True Then     JavaDialog("CLMLoginPage").JavaEdit("UserName").Set vUserName   JavaDialog("CLMLoginPage").JavaEdit("Password").SetSecure vPassword   JavaDialog("CLMLoginPage").JavaButton("OK").Click   wait 4       End if    End if   If vFound = True Then  Reporter.ReportEvent micPass,"SwingCLMLogin","Sucessfully Logged into CLM Swing UI" Else  Reporter.ReportEvent micFail,"SwingCLMLogin","Could not Login into CLM Swing UI, test is being aborted" End If  LoginToSwingCLMUI = vFound   End Function
'***************************************************************************************************************************************************************************************************' Function to Launch a Web URL'***************************************************************************************************************************************************************************************************
Function LaunchWebURL(vURL)  InvokeApplication "C://Program Files (x86)/Internet Explorer/iexplore.exe " & vUrl wait 3  Set vObj  = Browser("CLMWebPage").Page("Login").WebEdit("UserName") vFound   = WaitForAnObject(vObj,vMaxWaitTime)  If vFound = true Then  Reporter.ReportEvent micPass,"LaunchWebURL", "Sucessfully opened the CLM Web Url" Else  Reporter.ReportEvent micFail,"LaunchWebURL","Error - Could not open the desired url, please cross check if the application is up" End If  LaunchWebURL = vFound End Function
'***************************************************************************************************************************************************************************************************' Function to Login to a Web URL'***************************************************************************************************************************************************************************************************
Function LoginToWebURL(vUserName,vPassword)  vFound = True If vUserName = "" or vPassword = "" Then  Reporter.ReportEvent micFail,"LoginDetailsBlank","Error - Either the UserName or Password is Blank, please cross check"  If Browser("CLMWebPage").Page("Login").WebEdit("UserName").Exist(2) then   Browser("CLMWebPage").Close   wait 2   Call CloseAllBrowsers()   vFound = False  End if   End If  If vFound = True Then  Browser("CLMWebPage").Page("Login").WebEdit("UserName").Set vUserName  Browser("CLMWebPage").Page("Login").WebEdit("Password").SetSecure vPassword  Browser("CLMWebPage").Page("Login").WebButton("LoginPage").Click  Browser("CLMWebPage").Sync End If  If Browser("CLMWebPage").Page("Main Menu").Exist(30) Then  Reporter.ReportEvent micPass,"Login","Sucessfully Logged into the applicaiton"  vStatus = True Else  Reporter.ReportEvent micFail,"Login","Error - Login credentials seem to be wrong, please cross check"  vStatus = False End If  LoginToWebURL = vStatus End Function
Function LogoutofWebUrl() If Browser("CLMWebPage").Page("CommonPage").WebButton("Log Out").Exist(4) then  Browser("CLMWebPage").Page("CommonPage").WebButton("Log Out").Click  If Browser("CLMWebPage").Dialog("Windows Internet Explorer").WinButton("Yes").Exist(5) Then   Browser("CLMWebPage").Dialog("Windows Internet Explorer").WinButton("Yes").Click  End If End ifEnd Function
Function WaitForAnObject(vObj,vWaitTime)  vFound = false i = 1 While i < vWaitTime      If vObj.Exist(2) Then   i = vWaitTime   vFound = true      else   i = i + 1  End If  Wend WaitForAnObject = vFoundEnd Function
Function WaitForAnObjectToBeEnabled(vObj,vWaitTime)  vFound = false i = 1 While i < vWaitTime      If vObj.Exist(2) Then     If vObj.GetROProperty("enabled")  = 1 Then    i = vWaitTime    vFound = true   End If         else   i = i + 1  End If  Wend WaitForAnObjectToBeEnabled = vFound End Function
'' This function is to Close all BrowserWindows specif to application'***************************************************************************************************************************************************************************************************Function CloseAllBrowsers()
 If Browser("JavaSwingWebStart").Exist(5) Then  Browser("JavaSwingWebStart").Close  wait 3 End If  If Browser("CLMWebPage").Exist(5) Then  Browser("CLMWebPage").Close  wait 3 End If
End function
'' This function is to start the process of new case creation by searching for a specific loan number
Function CreateCase (vRow)
 Datatable.GetSheet("Global").SetCurrentRow vRow
 vStatus     = DataTableParameterExists("Global","FannieMaeLoanNo")  If vStatus = True Then  vFannieMaeLoanNo  = trim(Datatable.Value("FannieMaeLoanNo","Global")) Else  vFannieMaeLoanNo  = trim(Datatable.Value("FANNIEMAELOANNO","Global")) End if   vServicerLoanNo   = trim(Datatable.Value("ServicerLoanNo","Global"))  vStatus     = DataTableParameterExists("Global","State") If vStatus = True Then  vState      = trim(Datatable.Value("State","Global")) Else  vState      = trim(Datatable.Value("STATE","Global")) End If  vTreasuryHAFAInd   = trim(Datatable.Value("TreasuryHAFAInd","Global")) vSMDUDecInd    = trim(Datatable.Value("SMDUDecInd","Global")) vStatus     = DataTableParameterExists("Global", "CampaignID")  If vStatus = True Then  vCampaignID   = trim(Datatable.Value("CampaignID","Global")) End If   If trim(vFannieMaeLoanNo) <> "" Then  Browser("CLMWebPage").Page("Create Case").WebEdit("Fannie Mae Loan No").Set vFannieMaeLoanNo End If  If trim(vServicerLoanNo) <> "" Then  Browser("CLMWebPage").Page("Create Case").WebEdit("Servicer Loan No").Set vServicerLoanNo End if  If trim(vState) <> "" Then  Browser("CLMWebPage").Page("Create Case").WebList("State").Select vState End if  If trim(vTreasuryHAFAInd) <> "" Then  Browser("CLMWebPage").Page("Create Case").WebList("SMDU Decesion Indicator").Select vTreasuryHAFAInd End if  If trim(vSMDUDecInd) <> "" Then  Browser("CLMWebPage").Page("Create Case").WebList("Treasury HAFA Indicator").Select vSMDUDecInd End if  If trim(vCampaignID) <> "" Then  Browser("CLMWebPage").Page("Create Case").WebList("CampaignID").Select vCampaignID End If wait 2  Browser("CLMWebPage").Page("Create Case").WebButton("Submit").Click Browser("CLMWebPage").Page("Create Case").Sync  i = 1 While i < vMaxWaitTime  'Need to check if the above the error message is seen while searching for the loan  If Browser("CLMWebPage").Page("Create Case").WebElement("ErrorMessage").Exist(2) or Browser("CLMWebPage").Page("Deed In Lieu").Exist(2) or Browser("CLMWebPage").Page("Fannie Mae's Workout Profiler").Exist(2) or Browser("CLMWebPage").Page("Create Delegated_PreforeClosureCase").Exist(2) or Browser("Create Delegated Case").Page("Create Delegated Case - Deed in Lieu").Exist(2) then   i = vMaxWaitTime  else   wait 1   i = i + 1    End if  Wend
 If Browser("Create Delegated Case").Page("Create Delegated Case - Deed in Lieu").Exist(2) or Browser("Create Delegated Case").Page("Create Delegated Case - Deed in Lieu").Exist(2) or Browser("CLMWebPage").Page("Fannie Mae's Workout Profiler").Exist(2) or Browser("CLMWebPage").Page("Create Delegated_PreforeClosureCase").Exist(2) then   vStatus = True   ElseIf Browser("CLMWebPage").Page("Create Case").WebElement("ErrorMessage").Exist(2) Then  vStatus = False   End if  CreateCase = vStatus End Function
' This Function is Used to Create a new Deed In Leiu Case
Function CreateNewDedInLeiuCase(vRow)
 Datatable.GetSheet("Global").SetCurrentRow vRow  vBF_TotalMonthlyIncome   = trim(Datatable.Value("BF_TotalMonthlyIncome","Global")) vBF_TotalMonthlyExpense  = trim(Datatable.Value("BF_TotalMonthlyExpense","Global")) vDInL_DataDeedSigned   = trim(Datatable.Value("DInL_DataDeedSigned","Global")) vDInL_DataREOgramSent   = trim(Datatable.Value("DInL_DataREOgramSent","Global")) vDInL_ClearMarkTitle   = trim(Datatable.Value("DInL_ClearMarkTitle","Global")) vDInL_RelAsstExpenses   = trim(Datatable.Value("DInL_RelAsstExpenses","Global")) vDInL_AppraisedValue   = trim(Datatable.Value("DInL_AppraisedValue","Global")) vDInL_OccpStatus    = trim(Datatable.Value("DInL_OccpStatus","Global"))  vSD_StreDocumentation   = trim(Datatable.Value("SD_StreDocumentation","Global")) vSD_UserEnterdLPIDate   = trim(Datatable.Value("SD_UserEnterdLPIDate","Global")) vSD_HAFAPropertyType   = trim(Datatable.Value("SD_HAFAPropertyType","Global")) vSD_ProjForeClousereDate  = trim(Datatable.Value("SD_ProjForeClousereDate","Global")) vSD_OccStatus     = trim(Datatable.Value("SD_OccStatus","Global")) vSD_ProjFC_ACT_EST    = trim(Datatable.Value("SD_ProjFC_ACT_EST","Global"))  vHR_Reason1     = trim(Datatable.Value("HR_Reason1","Global"))  vConInfo_ServicerName   = trim(Datatable.Value("ConInfo_ServicerName","Global")) vContInfo_Phone    = trim(Datatable.Value("ContInfo_Phone","Global"))  'Enter Deed In Lieu Data section If vBF_TotalMonthlyIncome <> "" Then  Browser("Create Delegated Case").Page("Create Delegated Case - Deed in Lieu").WebEdit("BF_TotalMonthlyIncome").Set vBF_TotalMonthlyIncome End If  If vBF_TotalMonthlyExpense <> "" Then  Browser("Create Delegated Case").Page("Create Delegated Case - Deed in Lieu").WebEdit("BF_TotalMonthlyExpenses").Set vBF_TotalMonthlyExpense End If  If vDInL_DataDeedSigned <> "" Then  Browser("Create Delegated Case").Page("Create Delegated Case - Deed in Lieu").WebEdit("DILD_DateDeedSigned").Set vDInL_DataDeedSigned End If  If vDInL_DataREOgramSent <> "" Then  Browser("Create Delegated Case").Page("Create Delegated Case - Deed in Lieu").WebEdit("DILD_DateREOgramSent").Set vDInL_DataREOgramSent End If   If vDInL_ClearMarkTitle <> "" Then  Browser("Create Delegated Case").Page("Create Delegated Case - Deed in Lieu").WebList("DILD_Clear&MarkTitle").Select vDInL_ClearMarkTitle End If  If vDInL_RelAsstExpenses <> "" Then  Browser("Create Delegated Case").Page("Create Delegated Case - Deed in Lieu").WebEdit("DILD_RelocationAsstExpenses").Set vDInL_RelAsstExpenses End If  If vDInL_AppraisedValue <> "" Then  Browser("Create Delegated Case").Page("Create Delegated Case - Deed in Lieu").WebEdit("DILD_AppraisedValue").Set vDInL_AppraisedValue End If  If vDInL_OccpStatus <> "" Then  Browser("Create Delegated Case").Page("Create Delegated Case - Deed in Lieu").WebList("DILD_OccStatus").Select vDInL_OccpStatus End If  'Enter Streamlined Documentation (HAFA) section If vSD_StreDocumentation <> "" Then  Browser("Create Delegated Case").Page("Create Delegated Case - Deed in Lieu").WebList("SD_StreamlinedDocumentation").Select vSD_StreDocumentation End If  If vSD_UserEnterdLPIDate <> "" Then  Browser("Create Delegated Case").Page("Create Delegated Case - Deed in Lieu").WebEdit("SD_UserEnteredLPIDate").Set vSD_UserEnterdLPIDate End If  If vSD_HAFAPropertyType <> "" Then  Browser("Create Delegated Case").Page("Create Delegated Case - Deed in Lieu").WebList("SD_HAFAPropType").Select vSD_HAFAPropertyType End If  If vSD_ProjForeClousereDate <> "" Then  Browser("Create Delegated Case").Page("Create Delegated Case - Deed in Lieu").WebEdit("SD_ProjForeclosureDate").Set vSD_ProjForeClousereDate End If  If vSD_OccStatus <> "" Then  Browser("Create Delegated Case").Page("Create Delegated Case - Deed in Lieu").WebList("SD_OccStatus").Select vSD_OccStatus End If  If vSD_ProjFC_ACT_EST <> "" Then  Browser("Create Delegated Case").Page("Create Delegated Case - Deed in Lieu").WebList("SD_IsProjForeclosureDate_ACT_EST").Select vSD_ProjFC_ACT_EST End If  'Enter Data in Hardship Reason(s) section If vHR_Reason1 <> "" Then  Browser("Create Delegated Case").Page("Create Delegated Case - Deed in Lieu").WebList("HR_Reason1").Select vHR_Reason1 End If  'Enter Data in Contact Information If vConInfo_ServicerName <> "" Then  Browser("Create Delegated Case").Page("Create Delegated Case - Deed in Lieu").WebEdit("ConInfo_ServicerName").Set vConInfo_ServicerName End If  If vContInfo_Phone <> "" Then  Browser("Create Delegated Case").Page("Create Delegated Case - Deed in Lieu").WebEdit("ContInfo_Phone").Set vContInfo_Phone End If  Browser("Create Delegated Case").Page("Create Delegated Case - Deed in Lieu").WebButton("Test Authority Levels").Click  i = 0 While i < vInterimWaitTime  If Browser("Create Delegated Case").Page("Create Delegated Case - Deed in Lieu").WebElement("You are within all Authority").Exist(5) or Browser("Create Delegated Case").Page("Create Delegated Case - Deed in Lieu").WebElement("Warning Message").Exist(5) then   i = vInterimWaitTime  Else   wait 5   i = i + 1  End if Wend
 If Browser("Create Delegated Case").Page("Create Delegated Case - Deed in Lieu").WebElement("You are within all Authority").Exist(3) then  vFileName = "AuthroizationEdits.bmp"  Browser("Create Delegated Case").Page("Create Delegated Case - Deed in Lieu").CaptureBitmap vFileName,True    Reporter.ReportEvent micPass,"NoEdits","The Information entered passed all the required edits to submit the case",vFileName   Browser("Create Delegated Case").Page("Create Delegated Case - Deed in Lieu").WebButton("Submit").Click  Browser("Create Delegated Case").Sync     While i < vInterimWaitTime      If Browser("CLMWebPage").Page("Submit Case Confirmation").WebElement("SubmissionConfirmation").Exist(2) or Browser("CLMWebPage").Page("Submit Case Confirmation").WebElement("CaseSubmitedasApproved").Exist(2) Then     i = vInterimWaitTime   Else    i = i + 1    wait 1   End If     Wend Else  vFileName = "AuthroizationEdits.bmp"  Browser("Create Delegated Case").Page("Create Delegated Case - Deed in Lieu").CaptureBitmap vFileName,True  Reporter.ReportEvent micDone,"Edits","The Information entered does not seem to have passed all the required edits to submit the case,please cross check the data"  CreateNewDedInLeiuCase = False  Exit Function   End if  If Browser("CLMWebPage").Page("Submit Case Confirmation").WebElement("SubmissionConfirmation").Exist(2) Then  vFileName = "NewCaseCreated.bmp"  Browser("CLMWebPage").Page("Submit Case Confirmation").CaptureBitmap vFileName,True  Reporter.ReportEvent micPass , "CaseCreated", "A New case has been created as expected",vFileName  CreateNewDedInLeiuCase = True ElseIf Browser("CLMWebPage").Page("Submit Case Confirmation").WebElement("CaseSubmitedasApproved").Exist(2) Then  vFileName = "NewApprovedCaseCreated.bmp"  Browser("CLMWebPage").Page("Submit Case Confirmation").CaptureBitmap vFileName,True  Reporter.ReportEvent micWarning , "ApprovedCaseCreated", "A New case has been created in Apprved State",vFileName  CreateNewDedInLeiuCase = False Else  Reporter.ReportEvent micFail,"CaseNotCreated","Error - Could not create a new case, please see the screen shot",vFileName  CreateNewDedInLeiuCase = False End If
End Function
'***************************************************************************************************************************************************************************************************'  This Function is used to create the DIL Case on Workout profiler screen'***************************************************************************************************************************************************************************************************
Function CreateCase_WorkoutProfiler_DIL(vRow)  Datatable.GetSheet("Global").SetCurrentRow vRow  vDInL_ClearMarkTitle   = trim(Datatable.Value("DInL_ClearMarkTitle","Global")) vDInL_RelAsstExpenses   = trim(Datatable.Value("DInL_RelAsstExpenses","Global"))  vSD_StreDocumentation   = trim(Datatable.Value("SD_StreDocumentation","Global")) vSD_UserEnterdLPIDate   = trim(Datatable.Value("SD_UserEnterdLPIDate","Global")) vSD_HAFAPropertyType   = trim(Datatable.Value("SD_HAFAPropertyType","Global")) vSD_ProjForeClousereDate  = trim(Datatable.Value("SD_ProjForeClousereDate","Global")) vSD_OccStatus     = trim(Datatable.Value("SD_OccStatus","Global")) vSD_ProjFC_ACT_EST    = trim(Datatable.Value("SD_ProjFC_ACT_EST","Global"))   vMVA_TypeOfAnalysis   = trim(Datatable.Value("MVA_TypeOfAnalysis","Global"))  vHR_Reason1     = trim(Datatable.Value("HR_Reason1","Global"))  vConInfo_ServicerName   = trim(Datatable.Value("ConInfo_ServicerName","Global")) vContInfo_Phone    = trim(Datatable.Value("ContInfo_Phone","Global"))  vSR_RecDecesion    = trim(Datatable.Value("SR_RecDecesion","Global")) vSR_RecComment     = trim(Datatable.Value("SR_RecComment","Global"))   'Enter Deed In Lieu Data section If vDInL_ClearMarkTitle <> "" Then  Browser("CLMWebPage").Page("Deed In Lieu").WebList("DILD_Clear&MarkTitle").Select vDInL_ClearMarkTitle End If  If vDInL_RelAsstExpenses <> "" Then  Browser("CLMWebPage").Page("Deed In Lieu").WebEdit("DILD_RelocationAsstExpense").Set vDInL_RelAsstExpenses End If   If vMVA_TypeOfAnalysis <> "" Then  Browser("CLMWebPage").Page("Deed In Lieu").WebList("MVA_TypeofAnalysis").Select vMVA_TypeOfAnalysis End if   'Enter Streamlined Documentation (HAFA) section If vSD_StreDocumentation <> "" Then  Browser("CLMWebPage").Page("Deed In Lieu").WebList("SD_StreamlinedDocumentation").Select vSD_StreDocumentation End If  If vSD_UserEnterdLPIDate <> "" Then  Browser("CLMWebPage").Page("Deed In Lieu").WebEdit("SD_UserEnteredLPIDate").Set vSD_UserEnterdLPIDate End If  If vSD_HAFAPropertyType <> "" Then  Browser("CLMWebPage").Page("Deed In Lieu").WebList("SD_HAFAPropType").Select vSD_HAFAPropertyType End If  If vSD_ProjForeClousereDate <> "" Then  Browser("CLMWebPage").Page("Deed In Lieu").WebEdit("SD_ProjForeclosureDate").Set vSD_ProjForeClousereDate End If  If vSD_OccStatus <> "" Then  Browser("CLMWebPage").Page("Deed In Lieu").WebList("SD_OccStatus").Select vSD_OccStatus End If  If vSD_ProjFC_ACT_EST <> "" Then  Browser("CLMWebPage").Page("Deed In Lieu").WebList("SD_IsProjForeclosureDate_ACT_EST").Select vSD_ProjFC_ACT_EST End If  'Enter Data in Hardship Reason(s) section If vHR_Reason1 <> "" Then  Browser("CLMWebPage").Page("Deed In Lieu").WebList("HR_Reason1").Select vHR_Reason1 End If  'Enter Data in Contact Information If vConInfo_ServicerName <> "" Then  Browser("CLMWebPage").Page("Deed In Lieu").WebEdit("ConInfo_ServicerName").Set vConInfo_ServicerName End If  If vContInfo_Phone <> "" Then  Browser("CLMWebPage").Page("Deed In Lieu").WebEdit("ContInfo_Phone").Set vContInfo_Phone End If  If vSR_RecDecesion <> "" Then  Browser("CLMWebPage").Page("Deed In Lieu").WebList("SR_RecDecesion").Select vSR_RecDecesion End if  If vSR_RecComment <> "" Then  Browser("CLMWebPage").Page("Deed In Lieu").WebEdit("SR_RecComment").Set vSR_RecComment End if    Browser("CLMWebPage").Page("Deed In Lieu").WebButton("Submit").Click Browser("CLMWebPage").Sync   Set vObj1 = Browser("CLMWebPage").Page("Submit Case Confirmation").WebElement("CaseSubmitedasAwaitingReview") Set vObj2 = Browser("CLMWebPage").Page("Submit Case Confirmation").WebElement("SubmissionConfirmation") Set vObj3 = Browser("CLMWebPage").Page("Submit Case Confirmation").WebElement("CaseSubmitedasApproved") Set vObj4 = Browser("CLMWebPage").Page("Submit Case Confirmation").WebElement("SubmissionConfirmation_Success") While i < vInterimWaitTime     If vObj1.Exist(2) or vObj2.Exist(2) or vObj3.Exist(2) or vObj4.Exist(2) Then    i = vInterimWaitTime  Else   i = i + 1   wait 1  End If    Wend   If vObj1.Exist(2) or vObj2.Exist(2) or vObj3.Exist(2) or vObj4.Exist(2) Then  vFileName = "NewCaseCreated.bmp"  Browser("CLMWebPage").Page("Submit Case Confirmation").CaptureBitmap vFileName,True  Reporter.ReportEvent micPass , "CaseCreated", "A New case has been created as expected",vFileName  CreateCase_WorkoutProfiler_DIL = True Else  Reporter.ReportEvent micFail,"CaseNotCreated","Error - Could not create a new case, please see the screen shot",vFileName  CreateCase_WorkoutProfiler_DIL = False End If  End Function
'***************************************************************************************************************************************************************************************************
'***************************************************************************************************************************************************************************************************'  This Function is used to create the Preforeclosure Case on Workout profiler screen'***************************************************************************************************************************************************************************************************
Function CreateCase_WorkoutProfiler_Preforeclosure(vRow)  Datatable.GetSheet("Global").SetCurrentRow vRow  vSD_StreDocumentation   = trim(Datatable.Value("SD_StreDocumentation","Global")) vSD_UserEnterdLPIDate   = trim(Datatable.Value("SD_UserEnterdLPIDate","Global")) vSD_HAFAPropertyType   = trim(Datatable.Value("SD_HAFAPropertyType","Global")) vSD_ProjForeClousereDate  = trim(Datatable.Value("SD_ProjForeClousereDate","Global")) vSD_OccStatus     = trim(Datatable.Value("SD_OccStatus","Global")) vSD_ProjFC_ACT_EST    = trim(Datatable.Value("SD_ProjFC_ACT_EST","Global"))   vMVA_TypeOfAnalysis   = trim(Datatable.Value("MVA_TypeOfAnalysis","Global"))  vPSD_DelInterest   = trim(Datatable.Value("PSD_DelInterest","Global"))  vHR_Reason1     = trim(Datatable.Value("HR_Reason1","Global"))  vConInfo_ServicerName   = trim(Datatable.Value("ConInfo_ServicerName","Global")) vContInfo_Phone    = trim(Datatable.Value("ContInfo_Phone","Global"))  vSR_RecDecesion    = trim(Datatable.Value("SR_RecDecesion","Global")) vSR_RecComment     = trim(Datatable.Value("SR_RecComment","Global"))   'Enter Preforeclosure Sale Data section   If vMVA_TypeOfAnalysis <> "" Then  Browser("CLMWebPage").Page("Preforeclosure Sale").WebList("MVA_TypeofAnalysis").Select vMVA_TypeOfAnalysis End if  If vPSD_DelInterest <> "" Then  If Browser("CLMWebPage").Page("Preforeclosure Sale").WebEdit("PSD_DelInterest").Exist(6) Then   Browser("CLMWebPage").Page("Preforeclosure Sale").WebEdit("PSD_DelInterest").Set vPSD_DelInterest  End If   End if   'Enter Streamlined Documentation (HAFA) section If vSD_StreDocumentation <> "" Then  Browser("CLMWebPage").Page("Preforeclosure Sale").WebList("SD_StreamlinedDocumentation").Select vSD_StreDocumentation End If  If vSD_UserEnterdLPIDate <> "" Then  Browser("CLMWebPage").Page("Preforeclosure Sale").WebEdit("SD_UserEnteredLPIDate").Set vSD_UserEnterdLPIDate End If  If vSD_HAFAPropertyType <> "" Then  Browser("CLMWebPage").Page("Preforeclosure Sale").WebList("SD_HAFAPropType").Select vSD_HAFAPropertyType End If  If vSD_ProjForeClousereDate <> "" Then  Browser("CLMWebPage").Page("Preforeclosure Sale").WebEdit("SD_ProjForeclosureDate").Set vSD_ProjForeClousereDate End If  If vSD_OccStatus <> "" Then  Browser("CLMWebPage").Page("Preforeclosure Sale").WebList("SD_OccStatus").Select vSD_OccStatus End If  If vSD_ProjFC_ACT_EST <> "" Then  Browser("CLMWebPage").Page("Preforeclosure Sale").WebList("SD_IsProjForeclosureDate_ACT_EST").Select vSD_ProjFC_ACT_EST End If  'Enter Data in Hardship Reason(s) section If vHR_Reason1 <> "" Then  Browser("CLMWebPage").Page("Preforeclosure Sale").WebList("HR_Reason1").Select vHR_Reason1 End If  'Enter Data in Contact Information If vConInfo_ServicerName <> "" Then  Browser("CLMWebPage").Page("Preforeclosure Sale").WebEdit("ConInfo_ServicerName").Set vConInfo_ServicerName End If  If vContInfo_Phone <> "" Then  Browser("CLMWebPage").Page("Preforeclosure Sale").WebEdit("ContInfo_Phone").Set vContInfo_Phone End If  If vSR_RecDecesion <> "" Then  Browser("CLMWebPage").Page("Preforeclosure Sale").WebList("SR_RecDecesion").Select vSR_RecDecesion End if  If vSR_RecComment <> "" Then  Browser("CLMWebPage").Page("Preforeclosure Sale").WebEdit("SR_RecComment").Set vSR_RecComment End if   Browser("CLMWebPage").Page("Preforeclosure Sale").WebButton("Submit").Click Browser("CLMWebPage").Sync  Set vObj1 = Browser("CLMWebPage").Page("Submit Case Confirmation").WebElement("CaseSubmitedasAwaitingReview") Set vObj2 = Browser("CLMWebPage").Page("Submit Case Confirmation").WebElement("SubmissionConfirmation") Set vObj3 = Browser("CLMWebPage").Page("Submit Case Confirmation").WebElement("CaseSubmitedasApproved") Set vObj4 = Browser("CLMWebPage").Page("Submit Case Confirmation").WebElement("SubmissionConfirmation_Success") While i < vInterimWaitTime     If vObj1.Exist(2) or vObj2.Exist(2) or vObj3.Exist(2) or vObj4.Exist(2) Then    i = vInterimWaitTime  Else   i = i + 1   wait 1  End If    Wend   If vObj1.Exist(2) or vObj2.Exist(2) or vObj3.Exist(2) or vObj4.Exist(2) Then  vFileName = "NewCaseCreated.bmp"  Browser("CLMWebPage").Page("Submit Case Confirmation").CaptureBitmap vFileName,True  Reporter.ReportEvent micPass , "CaseCreated", "A New case has been created as expected",vFileName  CreateCase_WorkoutProfiler_Preforeclosure = True Else  Reporter.ReportEvent micFail,"CaseNotCreated","Error - Could not create a new case, please see the screen shot",vFileName  CreateCase_WorkoutProfiler_Preforeclosure = False End If  End Function'***************************************************************************************************************************************************************************************************
'***************************************************************************************************************************************************************************************************' This Function is Used to Create a new Preforeclosure Case'***************************************************************************************************************************************************************************************************
Function CreateNewPreForeClosureCase(vRow)
 Datatable.GetSheet("Global").SetCurrentRow vRow  vBF_TotalMonthlyIncome   = trim(Datatable.Value("BF_TotalMonthlyIncome","Global")) vBF_TotalMonthlyExpense  = trim(Datatable.Value("BF_TotalMonthlyExpense","Global")) 
 vPFCSD_ClosingDate    = trim(Datatable.Value("PFCSD_ClosingDate","Global")) vPFCSD_GrossSalesPrice   = trim(Datatable.Value("PFCSD_GrossSalesPrice","Global")) vPFCSD_NetSalesProceeds  = trim(Datatable.Value("PFCSD_NetSalesProceeds","Global")) vPFCSD_NegOtherLienReleases = trim(Datatable.Value("PFCSD_NegOtherLienReleases","Global")) vPFCSD_AppraisedValue   = trim(Datatable.Value("PFCSD_AppraisedValue","Global")) vPFCSD_EscrowBalance   = trim(Datatable.Value("PFCSD_EscrowBalance","Global")) vPFCSD_LiensList    = trim(Datatable.Value("PFCSD_LiensList","Global")) vPFCSD_LienHolderName_1  = trim(Datatable.Value("PFCSD_LienHolderName_1","Global")) vPFCSD_LienAmount_1   = trim(Datatable.Value("PFCSD_LienAmount_1","Global"))  vSD_StreDocumentation   = trim(Datatable.Value("SD_StreDocumentation","Global")) vSD_UserEnterdLPIDate   = trim(Datatable.Value("SD_UserEnterdLPIDate","Global")) vSD_HAFAPropertyType   = trim(Datatable.Value("SD_HAFAPropertyType","Global")) vSD_ProjForeClousereDate  = trim(Datatable.Value("SD_ProjForeClousereDate","Global")) vSD_OccStatus     = trim(Datatable.Value("SD_OccStatus","Global")) vSD_ProjFC_ACT_EST    = trim(Datatable.Value("SD_ProjFC_ACT_EST","Global")) vSD_FannieMaeRelIncentive  = trim(Datatable.Value("SD_FannieMaeRelIncentive","Global"))
 vHR_Reason1     = trim(Datatable.Value("HR_Reason1","Global"))  vConInfo_ServicerName   = trim(Datatable.Value("ConInfo_ServicerName","Global")) vContInfo_Phone    = trim(Datatable.Value("ContInfo_Phone","Global"))  'Enter Borowers Information Data section If vBF_TotalMonthlyIncome <> "" Then  Browser("CLMWebPage").Page("Create Delegated_PreforeClosureCase").WebEdit("BF_TotalMonthlyIncome").Set vBF_TotalMonthlyIncome End If  If vBF_TotalMonthlyExpense <> "" Then  Browser("CLMWebPage").Page("Create Delegated_PreforeClosureCase").WebEdit("BF_TotalMonthlyExpenses").Set vBF_TotalMonthlyExpense End If  'Enter Data in PreforeclosureCase Section If vPFCSD_ClosingDate <> "" Then  Browser("CLMWebPage").Page("Create Delegated_PreforeClosureCase").WebEdit("PreCloSale_ClosingDate").Set vPFCSD_ClosingDate End if If vPFCSD_GrossSalesPrice <> "" Then  Browser("CLMWebPage").Page("Create Delegated_PreforeClosureCase").WebEdit("PreCloSale_GrossSalePrice").Set vPFCSD_GrossSalesPrice End if If vPFCSD_NetSalesProceeds <> "" Then  Browser("CLMWebPage").Page("Create Delegated_PreforeClosureCase").WebEdit("PreCloSale_NetSaleProceeds").Set vPFCSD_NetSalesProceeds End if If vPFCSD_NegOtherLienReleases <> "" Then  Browser("CLMWebPage").Page("Create Delegated_PreforeClosureCase").WebEdit("PreCloSale_NegotiatedOtherLien").Set vPFCSD_NegOtherLienReleases End if If vPFCSD_AppraisedValue <> "" Then   Browser("CLMWebPage").Page("Create Delegated_PreforeClosureCase").WebEdit("PreCloSale_AppraisedValue").Set vPFCSD_AppraisedValue End if If vPFCSD_EscrowBalance <> "" Then  Browser("CLMWebPage").Page("Create Delegated_PreforeClosureCase").WebEdit("PreCloSale_EscrowBalance").Set vPFCSD_EscrowBalance End if If vPFCSD_LiensList <> "" Then  Browser("CLMWebPage").Page("Create Delegated_PreforeClosureCase").WebList("PreCloSale_LiensList").Select vPFCSD_LiensList End if If vPFCSD_LienHolderName_1 <> "" Then  Browser("CLMWebPage").Page("Create Delegated_PreforeClosureCase").WebEdit("PreCloSale_LienHolderName_1").Set vPFCSD_LienHolderName_1 End if If vPFCSD_LienAmount_1 <> "" Then  Browser("CLMWebPage").Page("Create Delegated_PreforeClosureCase").WebEdit("PreCloSale_LienAmount_1").Set vPFCSD_LienAmount_1 End if    'Enter Streamlined Documentation (HAFA) section If vSD_StreDocumentation <> "" Then  Browser("CLMWebPage").Page("Create Delegated_PreforeClosureCase").WebList("SD_StreamlinedDocumentation").Select vSD_StreDocumentation End If  If vSD_UserEnterdLPIDate <> "" Then  Browser("CLMWebPage").Page("Create Delegated_PreforeClosureCase").WebEdit("SD_UserEnteredLPIDate").Set vSD_UserEnterdLPIDate End If  If vSD_HAFAPropertyType <> "" Then  Browser("CLMWebPage").Page("Create Delegated_PreforeClosureCase").WebList("SD_HAFAPropType").Select vSD_HAFAPropertyType End If  If vSD_ProjForeClousereDate <> "" Then  Browser("CLMWebPage").Page("Create Delegated_PreforeClosureCase").WebEdit("SD_ProjForeclosureDate").Set vSD_ProjForeClousereDate End If  If vSD_OccStatus <> "" Then  Browser("CLMWebPage").Page("Create Delegated_PreforeClosureCase").WebList("SD_OccStatus").Select vSD_OccStatus End If  If vSD_ProjFC_ACT_EST <> "" Then  Browser("CLMWebPage").Page("Create Delegated_PreforeClosureCase").WebList("SD_IsProjForeclosureDate_ACT_EST").Select vSD_ProjFC_ACT_EST End If  If vSD_FannieMaeRelIncentive <> "" Then  Browser("CLMWebPage").Page("Create Delegated_PreforeClosureCase").WebEdit("SD_FannieMaeRelIncentive").Set vSD_FannieMaeRelIncentive End if   'Enter Data in Hardship Reason(s) section If vHR_Reason1 <> "" Then  Browser("CLMWebPage").Page("Create Delegated_PreforeClosureCase").WebList("HR_Reason1").Select vHR_Reason1 End If  'Enter Data in Contact Information If vConInfo_ServicerName <> "" Then  Browser("CLMWebPage").Page("Create Delegated_PreforeClosureCase").WebEdit("ConInfo_ServicerName").Set vConInfo_ServicerName End If  If vContInfo_Phone <> "" Then  Browser("CLMWebPage").Page("Create Delegated_PreforeClosureCase").WebEdit("ContInfo_Phone").Set vContInfo_Phone End If  Browser("CLMWebPage").Page("Create Delegated_PreforeClosureCase").WebButton("Test Authority Levels").Click  i = 0 While i < vInterimWaitTime    If Browser("CLMWebPage").Page("Create Delegated_PreforeClosureCase").WebElement("You are within all Authority").Exist(5) or Browser("CLMWebPage").Page("Create Delegated_PreforeClosureCase").WebElement("Warning Message").Exist(5) then   i = vInterimWaitTime  Else   wait 5   i = i + 1  End if   Wend
 If Browser("CLMWebPage").Page("Create Delegated_PreforeClosureCase").WebElement("You are within all Authority").Exist(3) then
  vFileName = "AuthroizationEdits.bmp"  Browser("CLMWebPage").Page("Create Delegated_PreforeClosureCase").CaptureBitmap vFileName,True    Reporter.ReportEvent micPass,"NoEdits","The Information entered passed all the required edits to submit the case",vFileName   Browser("CLMWebPage").Page("Create Delegated_PreforeClosureCase").WebButton("Submit").Click  Browser("CLMWebPage").Sync     While i < vInterimWaitTime      If Browser("CLMWebPage").Page("Submit Case Confirmation").WebElement("SubmissionConfirmation").Exist(2) Then     i = vInterimWaitTime   Else    i = i + 1    wait 1   End If     Wend   Else  vFileName = "AuthroizationEdits.bmp"  Browser("CLMWebPage").Page("Create Delegated_PreforeClosureCase").CaptureBitmap vFileName,True  Reporter.ReportEvent micDone,"Edits","The Information entered does not seem to have passed all the required edits to submit the case,please cross check the data"  CreateNewPreForeClosureCase = False  Exit Function   End if  If Browser("CLMWebPage").Page("Submit Case Confirmation").WebElement("CaseSubmitedasApproved").Exist(2) Then  vFileName = "NewApprovedCaseCreated.bmp"  Browser("CLMWebPage").Page("Submit Case Confirmation").CaptureBitmap vFileName,True  Reporter.ReportEvent micPass , "CaseCreated", "A New case has been created in the approved status as expected",vFileName Else  Reporter.ReportEvent micFail,"CaseNotCreated","Error - Could not create a new case, please see the screen shot",vFileName End If End Function
'***************************************************************************************************************************************************************************************************

'***************************************************************************************************************************************************************************************************' This Function is used to create a Non Delegated Case - Workout Profiler case (Section -1)
'***************************************************************************************************************************************************************************************************
Function CreateCase_WorkoutProfiler_Base(vRow)  Datatable.GetSheet("Global").SetCurrentRow vRow   vBI_LastName        = trim(Datatable.Value("BI_LastName","Global")) vBI_FirstName        = trim(Datatable.Value("BI_FirstName","Global")) vUGI_ProjForeClousereDate     = trim(Datatable.Value("UGI_ProjForeClousereDate","Global"))   vUGI_EsimatedActualValue     = trim(Datatable.Value("UGI_EsimatedActualValue","Global")) vUGI_EscrowBalance       = trim(Datatable.Value("UGI_EscrowBalance","Global")) vUGI_NoOfAutos        = trim(Datatable.Value("UGI_NoOfAutos","Global")) vUGI_MonthlyEscrowPayment     = trim(Datatable.Value("UGI_MonthlyEscrowPayment","Global")) vUGI_NoOfPeopleInHousehold     = trim(Datatable.Value("UGI_NoOfPeopleInHousehold","Global")) vUGI_OccStatus        = trim(Datatable.Value("UGI_OccStatus","Global")) vRemainHomeOrKeepProperty     = trim(Datatable.Value("RemainHomeOrKeepProperty","Global")) vStructureOrEnvProblems     = trim(Datatable.Value("StructureOrEnvProblems","Global")) vFA_NetIncome        = trim(Datatable.Value("FA_NetIncome","Global")) vVGI_RemainingTerm       = trim(Datatable.Value("VGI_RemainingTerm","Global"))   If trim(vBI_LastName) <> "" Then  Browser("CLMWebPage").Page("Fannie Mae's Workout Profiler").WebEdit("BI_LastName").Set vBI_LastName End If If trim(vBI_FirstName) <> "" Then  Browser("CLMWebPage").Page("Fannie Mae's Workout Profiler").WebEdit("BI_FirstName").Set vBI_FirstName End If If trim(vUGI_ProjForeClousereDate) <> "" Then  Browser("CLMWebPage").Page("Fannie Mae's Workout Profiler").WebEdit("UGI_ProjPreForeClousureDate").Set vUGI_ProjForeClousereDate End If If trim(vUGI_EsimatedActualValue) <> "" Then  Browser("CLMWebPage").Page("Fannie Mae's Workout Profiler").WebEdit("UGI_Est_Act_Market Values").Set vUGI_EsimatedActualValue End If  If trim(vUGI_EscrowBalance) <> "" Then  Browser("CLMWebPage").Page("Fannie Mae's Workout Profiler").WebEdit("UGI_EscrowBalance").Set vUGI_EscrowBalance End If  If trim(vUGI_NoOfAutos) <> "" Then  Browser("CLMWebPage").Page("Fannie Mae's Workout Profiler").WebEdit("UGI_NoOfAutos").Set vUGI_NoOfAutos End If   If trim(vUGI_MonthlyEscrowPayment) <> "" Then  Browser("CLMWebPage").Page("Fannie Mae's Workout Profiler").WebEdit("UGI_MonthlyEscrowPayment").Set vUGI_MonthlyEscrowPayment End If   If trim(vUGI_NoOfPeopleInHousehold) <> "" Then  Browser("CLMWebPage").Page("Fannie Mae's Workout Profiler").WebEdit("UGI_NoOfPeopleInHousehold").Set vUGI_NoOfPeopleInHousehold End If   If trim(vUGI_OccStatus) <> "" Then  Browser("CLMWebPage").Page("Fannie Mae's Workout Profiler").WebList("UGI_OccStatus").Select vUGI_OccStatus End If   If trim(vRemainHomeOrKeepProperty) <> "" Then  Browser("CLMWebPage").Page("Fannie Mae's Workout Profiler").WebList("RemainHomeOrKeepProperty").Select vRemainHomeOrKeepProperty End If If trim(vStructureOrEnvProblems) <> "" Then  Browser("CLMWebPage").Page("Fannie Mae's Workout Profiler").WebList("StructureOrEnvProblems").Select vStructureOrEnvProblems End If If trim(vFA_NetIncome) <> "" Then  Browser("CLMWebPage").Page("Fannie Mae's Workout Profiler").WebEdit("FinAnalysis_MonthlyTotalIncome").Set vFA_NetIncome End If If trim(vVGI_RemainingTerm) <> "" Then  Browser("CLMWebPage").Page("Fannie Mae's Workout Profiler").WebEdit("VGI_RemaingTerm").Set vVGI_RemainingTerm End If   Browser("CLMWebPage").Page("Fannie Mae's Workout Profiler").WebButton("Submit").Click Browser("CLMWebPage").Sync  i = 0 While i < vInterimWaitTime     If Browser("CLMWebPage").Page("Fannie Mae's Workout Profiler").WebButton("Proceed to Foreclosure").Exist(2) then    i = vInterimWaitTime  Else   i = i + 1   wait 1  End If    Wend     If Browser("CLMWebPage").Page("Fannie Mae's Workout Profiler").WebButton("Proceed to Foreclosure").Exist(2) then  vStatus = True  Reporter.ReportEvent micPass,"CaseCreation_WorkoutProfiler_Step","Completed the Step 1 Data Entry for Workout profiler flow" Else  vStatus = False  Reporter.ReportEvent micFail,"CaseCreation_WorkoutProfiler_Step","Error - There seems to be some problem with Data, please cross check" End if  CreateCase_WorkoutProfiler_Base = vStatus
End Function
'***************************************************************************************************************************************************************************************************
'***************************************************************************************************************************************************************************************************' This Function is Used to Close any Active Cases assocaited with the Specified Loan Number'***************************************************************************************************************************************************************************************************
Function CloseActiveDartsCases(vFannieMaeLoanNo)  ''' ' Code to Fetch the Loan Number and State Code from data base and Save it to Data Sheet''' '################################################################################''' Call FetchLoginDetails("DataBaseUser","003")''' Set ObjCon    = CreateObject("ADODB.Connection")''' Set RS_RecordSet  = CreateObject("ADODB.Recordset")''' ConnectionString  = "DSN=CLM;UID=" & vUserName & ";PWD=" & vPassword & ";DBQ=" & vDataBaseEnv & ";DBA=W;APA=T;EXC=F;FEN=T;QTO=T;FRC=10;FDL=10;LOB=T;RST=T;BTD=F;BAM=IfAllSuccessful;NUM=NLS;DPM=F;MTS=T;MDI=F;CSR=F;FWC=F;FBS=64000;TLO=O;"'''''' vSQL1 = "SELECT FN_MAE_LN_ID as FannieMaeLoanNo,DESCPTN as State FROM (SELECT lc.FN_MAE_LN_ID, st.DESCPTN FROM "''' vSQL2 = "clm.Char_lk_up_cd st, clm.lo_case lc, clm.ref_ln rl, clm.vndr v,clm.prop p WHERE rl.FN_MAE_LN_ID = lc.FN_MAE_LN_ID AND rl.SERVR_VNDR_OID = v.VNDR_OID "''' vSQL3 = " AND p.REF_LN_OID = rl.REF_LN_OID AND p.ST_CD = st.SHT_DESCPTN AND v.DDA_VNDR_ID = '248730005' ) where ROWNUM =1"''' vSQL = vSQL1 & vSQL2 & vSQL3''' ''' Set ObjCon    = CreateObject("ADODB.Connection")''' Set RS_RecordSet  = CreateObject("ADODB.Recordset")'''   ''' Call ConnectToDataBase(ObjCon,ConnectionString )''' Call ExecuteSQLQuery(ObjCon, RS_RecordSet, vSQL )''' ''' If RS_RecordSet.EOF = False Then'''  Datatable.Value("FannieMaeLoanNo","Global") = RS_RecordSet.Fields(0).Value'''  Datatable.Value("State","Global")    = RS_RecordSet.Fields(1).Value'''  vFannieMaeLoanNo = RS_RecordSet.Fields(0).Value'''  Reporter.ReportEvent micDone,"Fetched Loan Number","New Loan Number and State Code Fetched is - " & vFannieMaeLoanNo & " , " & RS_RecordSet.Fields(1).Value''' End If ''' ''' Call CloseDataBase(ObjCon,RS_RecordSet)''' '################################################################################  Set vObj  = JavaWindow("Credit Loss Management").JavaMenu("DARTS") vStatus  = WaitForAnObject(vObj,vMaxWaitTime)  If vStatus = True Then  JavaWindow("Credit Loss Management").Activate  wait 2  Reporter.ReportEvent micPass,"CLMSwingAPP","The Swing APP Opened as expected"  JavaWindow("Credit Loss Management").Activate  JavaWindow("Credit Loss Management").JavaMenu("DARTS").JavaMenu("Managers").JavaMenu("Case Manager").Select    Set vObj = JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS Case Manager")  vStatus  = WaitForAnObject(vObj,vMaxWaitTime)   JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS Case Manager").JavaEdit("Fannie Mae Loan").Set vFannieMaeLoanNo  JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS Case Manager").JavaButton("Search").Click    vFound = false  While i < vMinWaitTime   vRowCount = JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS Case Manager").JavaTable("DARTS_SearchList").GetROProperty("rows")   If vRowCount > 0 Then    i = vMinWaitTime    vFound = true   else    i = i + 1    wait 2   End If  Wend    'Check if the desired case was found  If vFound = true Then      i = 0   vFound = False   While i < int(vRowCount) and vFound = False          JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS Case Manager").JavaTable("DARTS_SearchList").SelectRow(i)    vStatus = JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS Case Manager").JavaTable("DARTS_SearchList").GetCellData(i,"Status")    wait 1    If instr(1,"Completed,Cancelled,Declined",vStatus) = 0 Then           'Open the case and close it     JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS Case Manager").JavaButton("Open").Click     vFound = true    Else     i = i + 1    End If      Wend      If vFound = true Then       Set vObj  = JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView")    vStatus  = WaitForAnObjectToBeEnabled(vObj,vMaxWaitTime)        JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView").JavaTab("JavaTab").Select "Current Case"    wait 2'    JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView").JavaTab("JavaTab").Select "Loan"'    wait 2'    vState = JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView").JavaList("State").GetROProperty("value")'    wait 2    JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView").JavaTab("JavaSubTab").Select "Case"    wait 2    JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView").JavaList("Case Status").Select "Cancelled"    wait 2    JavaWindow("Credit Loss Management").JavaDialog("Add Comment").JavaEdit("Comments").Set "Cancelling Active Case"    wait 2    JavaWindow("Credit Loss Management").JavaDialog("Add Comment").JavaButton("OK").highlight    JavaWindow("Credit Loss Management").JavaDialog("Add Comment").JavaButton("OK").Click    wait 2    'Redundant check    If JavaWindow("Credit Loss Management").JavaDialog("Add Comment").JavaButton("OK").Exist(4) Then     JavaWindow("Credit Loss Management").JavaDialog("Add Comment").JavaButton("OK").Click    End If    wait 4        JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView").Activate         JavaWindow("Credit Loss Management").JavaMenu("File").JavaMenu("Save").Select    Set vObj  = JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView")    vStatus  = WaitForAnObjectToBeEnabled(vObj,vMaxWaitTime)        vFileName = "ActiveCaseClosed.bmp"    JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView").CaptureBitmap vFileName,True    Reporter.ReportEvent micPass,"ActiveCaseClosed","The Active case has been closed as desired",vFileName        'Close the Swing Windows    If JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView").Exist(10) then     wait 3     JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView").Close          If JavaWindow("Credit Loss Management").JavaDialog("Document Changed").Exist(3) Then      JavaWindow("Credit Loss Management").JavaDialog("Document Changed").JavaButton("Yes").Click      wait 4     End If             End if       Else       vFileName = "ActiveCaseClosed.bmp"    JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS Case Manager").CaptureBitmap vFileName,True    Reporter.ReportEvent micPass,"ActiveCaseClosed","There does not seem to be any active cases to be closed",vFileName       End If      If JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS Case Manager").Exist(10) Then    JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS Case Manager").Close   End If
  End if      End if
  End Function'***************************************************************************************************************************************************************************************************
'***************************************************************************************************************************************************************************************************' This Function is Used to Search for a Specific Darts case in the specified Status'***************************************************************************************************************************************************************************************************
Function SearchDartsCaseByStatus(vFannieMaeLoanNo,vSearchStatus,vSearchType)   Set vObj  = JavaWindow("Credit Loss Management").JavaMenu("DARTS") vStatus  = WaitForAnObject(vObj,vMaxWaitTime) vFound = false  If vStatus = True Then  Reporter.ReportEvent micPass,"CLMSwingAPP","The Swing APP Opened as expected"  JavaWindow("Credit Loss Management").Activate  JavaWindow("Credit Loss Management").JavaMenu("DARTS").JavaMenu("Managers").JavaMenu("Case Manager").Select    Set vObj = JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS Case Manager")  vStatus  = WaitForAnObject(vObj,vMaxWaitTime)  JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS Case Manager").Activate  wait 2  JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS Case Manager").JavaEdit("Fannie Mae Loan").Set vFannieMaeLoanNo  JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS Case Manager").JavaButton("Search").Click    While i < vMinWaitTime   vRowCount = JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS Case Manager").JavaTable("DARTS_SearchList").GetROProperty("rows")   If vRowCount > 0 Then    i = vMinWaitTime    vFound = true   else    i = i + 1    wait 2   End If  Wend    If vFound = true Then      i = 0   vFound = False   wait 4   While i < int(vRowCount) and vFound = False          JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS Case Manager").JavaTable("DARTS_SearchList").SelectRow(i)    vStatus = JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS Case Manager").JavaTable("DARTS_SearchList").GetCellData(i,"Status")    wait 1        If vSearchType = "Possitive" or  Trim(vSearchType) = "" Then     If instr(1,vSearchStatus,vStatus) > 0 Then       JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS Case Manager").JavaTable("DARTS_SearchList").SelectRow(i)      wait 5            JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS Case Manager").JavaButton("Open").Click      vFound = true     Else      i = i + 1     End If     Else     If instr(1,vSearchStatus,vStatus) > 0 Then            JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS Case Manager").JavaButton("Open").Click      vFound = true     Else      i = i + 1     End If     End if       Wend  End if      End if  SearchDartsCaseByStatus = vFound
  End Function'***************************************************************************************************************************************************************************************************
'***************************************************************************************************************************************************************************************************' This Function is used to update the status of a DARTS case from one to Another'***************************************************************************************************************************************************************************************************
Function UpdateDartsCaseStatus(vNewStatus,vComments) JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView").JavaList("Case Status").Select vNewStatus  If JavaWindow("Credit Loss Management").JavaDialog("Running Edits").Exist(5) then  JavaWindow("Credit Loss Management").JavaDialog("Running Edits").JavaButton("OK").Click  wait 2  If JavaWindow("Credit Loss Management").JavaDialog("Running Edits").Exist(3) Then   JavaWindow("Credit Loss Management").JavaDialog("Running Edits").JavaButton("OK").Click   wait 2  End If    vUpdateStatus =  True elseIf JavaWindow("Credit Loss Management").JavaDialog("State Change failed").Exist(5) then  JavaWindow("Credit Loss Management").JavaDialog("State Change failed").JavaButton("OK").Click  If JavaWindow("Credit Loss Management").JavaDialog("State Change failed").Exist(3) then   JavaWindow("Credit Loss Management").JavaDialog("State Change failed").JavaButton("OK").Click   End If  vUpdateStatus =  False End if  If JavaWindow("Credit Loss Management").JavaDialog("Add Comment").Exist(4) then  JavaWindow("Credit Loss Management").JavaDialog("Add Comment").JavaEdit("Comments").Set vComments  JavaWindow("Credit Loss Management").JavaDialog("Add Comment").JavaButton("OK").highlight  wait 2  JavaWindow("Credit Loss Management").JavaDialog("Add Comment").JavaButton("OK").Click  If JavaWindow("Credit Loss Management").JavaDialog("Add Comment").Exist(4) then   JavaWindow("Credit Loss Management").JavaDialog("Add Comment").JavaButton("OK").Click  End if  vUpdateStatus =  True  If JavaWindow("Credit Loss Management").JavaDialog("Running Edits").Exist(5) then   JavaWindow("Credit Loss Management").JavaDialog("Running Edits").JavaButton("No").Click   wait 2   If JavaWindow("Credit Loss Management").JavaDialog("Running Edits").Exist(3) Then    JavaWindow("Credit Loss Management").JavaDialog("Running Edits").JavaButton("No").Click    wait 2   End If     vUpdateStatus =  True  End if End If JavaWindow("Credit Loss Management").JavaMenu("File").JavaMenu("Save").Select Wait 2  If JavaWindow("Credit Loss Management").JavaDialog("Validation Errors Occurred").Exist(4) then  JavaWindow("Credit Loss Management").JavaDialog("Validation Errors Occurred").JavaButton("OK").Click  wait 2  vUpdateStatus =  False End If
 Set vObj = JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView") vStatus  = WaitForAnObjectToBeEnabled(vObj,vMinWaitTime) 
 UpdateDartsCaseStatus = vUpdateStatus End Function
'***************************************************************************************************************************************************************************************************'This Function is Used to navigate to the CloseApprove Screen from the Home page'***************************************************************************************************************************************************************************************************Function NavigateToCloseApproveScreen(vFannieMaeLoanNo,vCaseNumber)  Browser("CLMWebPage").Page("CommonPage").WebList("RequestedAction").Select "Main Menu" Browser("CLMWebPage").Page("CommonPage").Sync wait 3 Browser("CLMWebPage").Page("Main Menu").Link("Close Approved Cases").Click Browser("CLMWebPage").Page("Main Menu").Sync  If vFannieMaeLoanNo <> "" Then  Browser("CLMWebPage").Page("Close an Approved Case").WebEdit("FannieMaeLoanNo").Set vFannieMaeLoanNo End If  If vCaseNumber <> "" Then  Browser("CLMWebPage").Page("Close an Approved Case").WebEdit("CaseNumber").Set vCaseNumber End If  Browser("CLMWebPage").Page("Close an Approved Case").WebButton("Submit").Click Browser("CLMWebPage").Page("Close an Approved Case").Sync
 vFound = false Set vObj1 = Browser("CLMWebPage").Page("Close an Approved Case").WebElement("LoanNotFound") Set vObj2 = Browser("CLMWebPage").Page("Close an Approved Preforeclosure Case")  Set vObj3 = Browser("CLMWebPage").Page("Close an Approved Deed In Lieu Case") i = 0 While i < vMinWaitTime  If vObj1.Exist(2) or vObj2.Exist(2) or vObj3.Exist(2) then   i = vMinWaitTime  else   i = i + 1   wait 2  End If Wend  If vObj1.Exist(2) Then  vFound = False ElseIf vObj2.Exist(2) Then  vFound = True ElseIf vObj3.Exist(2) Then  vFound = True End If  NavigateToCloseApproveScreen = vFound  End Function
'***************************************************************************************************************************************************************************************************
'***************************************************************************************************************************************************************************************************'This Function is Used to navigate to the Case Information Screen from the Home page by using Query manager link'***************************************************************************************************************************************************************************************************
Function NavigatetoCaseManagerScreen(vFannieMaeLoanNo,vCaseStatus,vWorkoutType)  Browser("CLMWebPage").Page("CommonPage").WebList("RequestedAction").Select "Main Menu" Browser("CLMWebPage").Page("CommonPage").Sync  Browser("CLMWebPage").Page("Main Menu").Link("Query Manager").Click Browser("CLMWebPage").Page("Main Menu").Sync  If vFannieMaeLoanNo <> "" Then  Browser("CLMWebPage").Page("Query Manager").WebEdit("FannieMaeLoanNo").Set vFannieMaeLoanNo End If  If vCaseStatus <> "" Then  Browser("CLMWebPage").Page("Query Manager").WebList("WorkoutStatus").Select vCaseStatus End If  If vWorkoutType <> "" Then   Browser("CLMWebPage").Page("Query Manager").WebList("WorkoutType").Select vWorkoutType   End If  Browser("CLMWebPage").Page("Query Manager").WebButton("Submit").Click Browser("CLMWebPage").Page("Query Manager").Sync  Set vObj1 = Browser("CLMWebPage").Page("Query Manager").WebElement("NoDataFound") Set vObj2 = Browser("CLMWebPage").Page("Query Manager - Results").WebTable("ResultsList")  vFound = False i = 0 While i < vMinWaitTime  If vObj1.Exist(2) or vObj2.Exist(2) then   i = vMinWaitTime  else   i = i + 1   wait 2  End If Wend  If vObj1.Exist(2) Then  vFound = False ElseIf vObj2.Exist(2) Then  Set vObj = Browser("CLMWebPage").Page("Query Manager - Results").WebTable("ResultsList").ChildItem(2,4,"link","0")  vObj.Click End If  Set vObj  = Browser("CLMWebPage").Page("Case Information") vStatus  = WaitForAnObject(vObj,vMinWaitTime)  If vObj.Exist(2) then  vFound = True Else  vFound = False End If NavigatetoCaseManagerScreen = vFound
 End Function
'***************************************************************************************************************************************************************************************************'This Function is Used to Set the Global Paraemter value to a specified value'***************************************************************************************************************************************************************************************************
Function SetDartsGlobalParameterValue(vParameterField,vParameterValue)  JavaWindow("Credit Loss Management").JavaMenu("DARTS").JavaMenu("Admin").JavaMenu("Global Parameters").Select  Set vObj  = JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS Global Parameters") vStatus  = WaitForAnObjectToBeEnabled(vObj,vMaxWaitTime)   If JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS Global Parameters").JavaObject(vParameterField).Exist(2) then    JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS Global Parameters").JavaObject(vParameterField).MouseDrag 80,11,-78,7,"LEFT"  wait 2  JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS Global Parameters").JavaObject(vParameterField).PressKey micDel  wait 2  JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS Global Parameters").JavaObject(vParameterField).Type vParameterValue  vStatus = True   ElseIf JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS Global Parameters").JavaEdit(vParameterField).Exist(2) then  JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS Global Parameters").JavaEdit(vParameterField).Set vParameterValue  wait 2  vStatus = True Else  vStatus = False End If   JavaWindow("Credit Loss Management").JavaMenu("File").JavaMenu("Save").Select Set vObj  = JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS Global Parameters") vStatus  = WaitForAnObjectToBeEnabled(vObj,vMaxWaitTime)  vFileName = "GlobalParameter.bmp" JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS Global Parameters").CaptureBitmap vFileName, True   If vStatus = true Then  Reporter.ReportEvent micPass,"Global Paramter","The Global Parameter has been set with the desired value",vFileName else  Reporter.ReportEvent micFail,"Global Parameter", "The Global Parameter specfieid does not seem to be existing, please cross check",vFileName   End If  If JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS Global Parameters").Exist(2) Then  JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS Global Parameters").Close End If SetGlobalParameterValue = vStatus 
End Function
'***************************************************************************************************************************************************************************************************
Function GetDARTSGlobalParameterValue(vParameterField)  JavaWindow("Credit Loss Management").JavaMenu("DARTS").JavaMenu("Admin").JavaMenu("Global Parameters").Select  Set vObj  = JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS Global Parameters") vStatus  = WaitForAnObjectToBeEnabled(vObj,vMaxWaitTime)  vGPValue = "" If JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS Global Parameters").JavaObject(vParameterField).Exist(2) then    vGPValue = JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS Global Parameters").JavaObject(vParameterField).GetROProperty("text") ElseIf JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS Global Parameters").JavaEdit(vParameterField).Exist(2) then  vGPValue = JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS Global Parameters").JavaEdit(vParameterField).GetROProperty("text") End If  If JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS Global Parameters").Exist(2) Then  JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS Global Parameters").Close  wait 2 End If GetDARTSGlobalParameterValue = vGPValue End Function
'***************************************************************************************************************************************************************************************************'This Function is Used to Set the Role Level Limits to a specified value'***************************************************************************************************************************************************************************************************
Function SetDARTSRoleLimits(vLimitType,vRole,vValue)
 JavaWindow("Credit Loss Management").JavaMenu("DARTS").JavaMenu("Admin").JavaMenu("Role Limits").Select Set vObj  = JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS Role Limits") vStatus  = WaitForAnObjectToBeEnabled(vObj,vMinWaitTime)  JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS Role Limits").JavaList("LimitType").Select vLimitType wait 2 JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS Role Limits").JavaList("Role").Select vRole wait 2 JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS Role Limits").JavaButton("Search").Click wait 2  Set vObj  = JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS Role Limits").JavaTable("RoleLimits") vStatus  = WaitForAnObjectToBeEnabled(vObj,vMinWaitTime)  JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS Role Limits").JavaTable("RoleLimits").SelectRow(0)  JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS Role Limits").JavaTable("RoleLimits").SetCellData 0,"Value",vValue wait 2  JavaWindow("Credit Loss Management").JavaMenu("File").JavaMenu("Save").Select
 Set vObj = JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS Role Limits").JavaTable("RoleLimits") vStatus  = WaitForAnObjectToBeEnabled(vObj,vMaxWaitTime)   JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS Role Limits").JavaList("LimitType").Select vLimitType wait 2 JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS Role Limits").JavaList("Role").Select vRole wait 2 JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS Role Limits").JavaButton("Search").Click wait 2  Set vObj  = JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS Role Limits").JavaTable("RoleLimits") vStatus  = WaitForAnObjectToBeEnabled(vObj,vMinWaitTime) JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS Role Limits").JavaTable("RoleLimits").SelectRow(0) vNewValue = Replace(JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS Role Limits").JavaTable("RoleLimits").GetCellData(0,"Value"),"$","")  vFileName = "SetRoleLimits.bmp" JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS Role Limits").CaptureBitmap vFileName,True  If int(trim(vNewValue)) = int(trim(vValue)) Then  vStatus =  True  Reporter.ReportEvent micPass, "SetRoleLimit", "The Role Limit - " & vLimitType & " for the Role - " & vRole & " has been set to " &  vValue,vFileName Else  vStatus = False  Reporter.ReportEvent micFail, "SetRoleLimit", "Error - The Role Limit - " & vLimitType & " for the Role - " & vRole & " does not seem to be set to " &  vValue & " Please cross check screen shot",vFileName End If  If JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS Role Limits").Exist(4) Then    JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS Role Limits").Close End If
End Function
'***************************************************************************************************************************************************************************************************
'***************************************************************************************************************************************************************************************************' Functions to Connect to the DataBase and execute the desired SQL queries'***************************************************************************************************************************************************************************************************Function ConnectToDataBase(ByRef ObjCon, ByRef ConnectionString) ObjCon.ConnectionString = ConnectionString ObjCon.Open End Function
Function CloseDataBase(ByRef ObjCon,ByRef RS_RecordSet)  RS_RecordSet.Close ObjCon.Close End Function
Function ExecuteSQLQuery(ByRef ObjCon, ByRef RS_RecordSet, ByRef vSQL)  On Error Resume Next RS_RecordSet.Open vSQL,ObjCon End Function'***************************************************************************************************************************************************************************************************
'***************************************************************************************************************************************************************************************************
Function ObtainDynamicData(vSQL,vSheet,vRow)  vDataFetched = False Datatable.GetSheet(vSheet).SetCurrentRow vRow  Call FetchLoginDetails("DataBaseUser","003") Set ObjCon    = CreateObject("ADODB.Connection") Set RS_RecordSet  = CreateObject("ADODB.Recordset")  ConnectionString  = "DSN=CLM;UID=" & vUserName & ";PWD=" & vPassword & ";DBQ=" & vDataBaseEnv & ";DBA=W;APA=T;EXC=F;FEN=T;QTO=T;FRC=10;FDL=10;LOB=T;RST=T;BTD=F;BAM=IfAllSuccessful;NUM=NLS;DPM=F;MTS=T;MDI=F;CSR=F;FWC=F;FBS=64000;TLO=O;"  Set ObjCon    = CreateObject("ADODB.Connection") Set RS_RecordSet  = CreateObject("ADODB.Recordset")    Call ConnectToDataBase(ObjCon,ConnectionString ) Call ExecuteSQLQuery(ObjCon, RS_RecordSet, vSQL )  If RS_RecordSet.EOF = False Then  vFiledCount = RS_Recordset.Fields.Count  i = 0  While i < vFiledCount   vFieldName = RS_RecordSet.Fields(i).Name   Datatable.Value(vFieldName,vSheet) = RS_RecordSet.Fields(i).Value   i = i +1     Wend  vDataFetched = True  Reporter.ReportEvent micDone,"Fetched Data","New Data is fetched and updated in the desired fields" Else  vDataFetched = False  Reporter.ReportEvent micWarning, "Fetch Data","No Data was Fetched using the SQL Query provided" End If   Call CloseDataBase(ObjCon,RS_RecordSet)  ObtainDynamicData = vDataFetched End Function
'***************************************************************************************************************************************************************************************************
'******************************************************************************************************************************************************************************'This function is specifically written to handle the different audit events that are stored for Rel Asst Exp field in DIL Workout Type'******************************************************************************************************************************************************************************
Function VerifyRelAssExpCaseEvents(vCaseNumber,vUserID)         If SYS_DATE <> "" Then vSysDate = vSysDate
 Dim v_arr_ExpDetail(4) v_arr_ExpDetail(0) = vCaseNumber v_arr_ExpDetail(1) = vSysDate v_arr_ExpDetail(3) = vUserID   'First Change the value to Null to Begin the validation. Set vObj = JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView").JavaObject("RelocationAssistExp") Call ClearJavaEditObject(vObj) JavaWindow("Credit Loss Management").JavaMenu("File").JavaMenu("Save").Select  Set vObj1 = JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView") Call WaitForAnObjectToBeEnabled(vObj1,vMinWaitTime)  'Start the validations from here - From Null to 1 Call ClearJavaEditObject(vObj) vObj.Type "1.00" JavaWindow("Credit Loss Management").JavaMenu("File").JavaMenu("Save").Select Call WaitForAnObjectToBeEnabled(vObj1,vMinWaitTime) v_arr_ExpDetail(2) = "Fannie Mae Relocation Assistance Expense changed from "& "Null" & " to " & "$1.00" Call VerifyCaseEvent(v_arr_ExpDetail,True) Call VerifyLoanEvent(v_arr_ExpDetail,True)  'Start the validations from here - From 1 to 2 Call ClearJavaEditObject(vObj) vObj.Type "2.00" JavaWindow("Credit Loss Management").JavaMenu("File").JavaMenu("Save").Select Call WaitForAnObjectToBeEnabled(vObj1,vMinWaitTime) v_arr_ExpDetail(2) = "Fannie Mae Relocation Assistance Expense changed from "& "$1.00" & " to " & "$2.00" Call VerifyCaseEvent(v_arr_ExpDetail,True) Call VerifyLoanEvent(v_arr_ExpDetail,True)  'Start the validations from here - From 2 to 2 Call ClearJavaEditObject(vObj) vObj.Type "2.00" JavaWindow("Credit Loss Management").JavaMenu("File").JavaMenu("Save").Select Call WaitForAnObjectToBeEnabled(vObj1,vMinWaitTime) v_arr_ExpDetail(2) = "Fannie Mae Relocation Assistance Expense changed from "& "$2.00" & " to " & "$2.00" Call VerifyCaseEvent(v_arr_ExpDetail,False) Call VerifyLoanEvent(v_arr_ExpDetail,False)  'Start the validations from here - From 2 to 0 Call ClearJavaEditObject(vObj) vObj.Type "0.00" JavaWindow("Credit Loss Management").JavaMenu("File").JavaMenu("Save").Select Call WaitForAnObjectToBeEnabled(vObj1,vMinWaitTime) v_arr_ExpDetail(2) = "Fannie Mae Relocation Assistance Expense changed from "& "$2.00" & " to " & "$0.00" Call VerifyCaseEvent(v_arr_ExpDetail,True) Call VerifyLoanEvent(v_arr_ExpDetail,True)  'Start the validations from here - From 0 to 0 Call ClearJavaEditObject(vObj) vObj.Type "0.00" JavaWindow("Credit Loss Management").JavaMenu("File").JavaMenu("Save").Select Call WaitForAnObjectToBeEnabled(vObj1,vMinWaitTime) v_arr_ExpDetail(2) = "Fannie Mae Relocation Assistance Expense changed from "& "$0.00" & " to " & "$0.00" Call VerifyCaseEvent(v_arr_ExpDetail,False) Call VerifyLoanEvent(v_arr_ExpDetail,False)  'Start the validations from here - From 0 to Null Call ClearJavaEditObject(vObj) wait 1 JavaWindow("Credit Loss Management").JavaMenu("File").JavaMenu("Save").Select Call WaitForAnObjectToBeEnabled(vObj1,vMinWaitTime) v_arr_ExpDetail(2) = "Fannie Mae Relocation Assistance Expense changed from "& "$0.00" & " to " & "Null" Call VerifyCaseEvent(v_arr_ExpDetail,True)  Call VerifyLoanEvent(v_arr_ExpDetail,True)  'Start the validations from here - From Null to 0 Call ClearJavaEditObject(vObj) wait 1 vObj.Type "0.00" JavaWindow("Credit Loss Management").JavaMenu("File").JavaMenu("Save").Select Call WaitForAnObjectToBeEnabled(vObj1,vMinWaitTime) v_arr_ExpDetail(2) = "Fannie Mae Relocation Assistance Expense changed from "& "Null" & " to " & "$0.00" Call VerifyCaseEvent(v_arr_ExpDetail,True)  Call VerifyLoanEvent(v_arr_ExpDetail,True) End Function'******************************************************************************************************************************************************************************
'******************************************************************************************************************************************************************************'The Function is used to clear a Java Object Edit Field'******************************************************************************************************************************************************************************
Function ClearJavaEditObject(vObj) vObj.Click 36,9,"LEFT" vObj.MouseDrag 25,10,143,10,"LEFT" vObj.PressKey micDel End Function
'******************************************************************************************************************************************************************************
'******************************************************************************************************************************************************************************' This function is used to validate if the desired event is captured in Case event and Audit event table as expected'******************************************************************************************************************************************************************************
Function VerifyCaseEvent(v_arr_ExpDetail,vBoolean)  
 Dim v_arr_Actual(4), TempArray  JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView").JavaTab("JavaTab").Select "Tracking" wait 2 JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView").JavaTab("JavaSubTab").Select "Case Events" wait 2   For CaseEvents = 1 To 2 Step 1   If CaseEvents = 1 Then   vCaseEventFilter = "Current Case History Events"  Else   vCaseEventFilter = "Current Case History And Audit Events"  End If   JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView").JavaList("CaseEventList").Select vCaseEventFilter     wait 4    Reporter.ReportEvent micDone,vCaseEventFilter, "Starting the validation under " & vCaseEventFilter & "Filter"    vRowCount  =  JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView").JavaTable("CaseEvents").GetROProperty("rows")    Set vObjTable = JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView").JavaTable("CaseEvents")    vFound = False  For Iterator = vRowCount-1 To 0 Step -1   v_arr_Actual(0)  = vObjTable.GetCellData(Iterator,"Case ID")   v_arr_Actual(1)  = Replace(vObjTable.GetCellData(Iterator,"Done Date"),"/","-")   v_arr_Actual(2)  = vObjTable.GetCellData(Iterator,"Description")   v_arr_Actual(3)  = vObjTable.GetCellData(Iterator,"UserID")   v_arr_Actual(4)  = vObjTable.GetCellData(Iterator,"User Name")      TempArray = Split(Trim(v_arr_Actual(1)), " ", -1, 1)   v_arr_Actual(1) = TempArray(0)      If v_arr_Actual(0) = v_arr_ExpDetail(0) and CDate(v_arr_Actual(1)) = CDate(v_arr_ExpDetail(1)) and UCase(Trim(v_arr_Actual(2))) = UCase(Trim(v_arr_ExpDetail(2))) and UCase(Trim(v_arr_Actual(3))) = UCase(Trim(v_arr_ExpDetail(3))) and v_arr_Actual(4) <> "" Then    vObjTable.SelectRow Iterator    wait 1    vFileName = "CaseEvent_" & Iterator + 1 & ".bmp"    JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView").CaptureBitmap vFileName,True    If vBoolean = true Then     Reporter.ReportEvent micPass,"MatchFound","A match for the desired case event " & v_arr_ExpDetail(2) & " was found at Row No - " & Iterator + 1,vFileName      End If    vFound = True    Exit for      End If    Next    vFileName = "CaseEvent_" & replace(replace(Time,":","_"),"PM","") & ".bmp"  JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView").CaptureBitmap vFileName,True   If vFound = false and vBoolean = true Then   Reporter.ReportEvent micFail,"NoMatchFound", "Error - No Match was found for the desired case event - " & v_arr_ExpDetail(2),vFileName  ElseIf vFound = false and vBoolean = false Then   Reporter.ReportEvent micPass,"NoCaseEvent", "No Case Event like " & v_arr_ExpDetail(2) & " is generated when the value is updated with same value and saved",vFileName  ElseIf vFound = true and vBoolean = false Then    Reporter.ReportEvent micFail,"CaseEventFound", "Error - Case Event " & v_arr_ExpDetail(2) & " is generated when the value is updated with same value and saved - check Row - " & Iterator + 1,vFileName  End If   Next
 JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView").JavaTab("JavaTab").Select "Current Case" wait 2  On Error resume next JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView").JavaTab("JavaSubTab").Select "Workout" wait 2  
End Function'******************************************************************************************************************************************************************************

'******************************************************************************************************************************************************************************' This function is used to validate if the desired event is captured in Loan event and Audit event table as expected'******************************************************************************************************************************************************************************
Function VerifyLoanEvent(v_arr_ExpDetail,vBoolean)  
 Dim v_arr_Actual(4), TempArray  JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView").JavaTab("JavaTab").Select "Tracking" wait 2 JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView").JavaTab("JavaSubTab").Select "Loan Events" wait 2   For CaseEvents = 1 To 2 Step 1   If CaseEvents = 1 Then   vCaseEventFilter = "Loan History Events"  Else   vCaseEventFilter = "Loan History And Audit Events"  End If   JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView").JavaList("CaseEventList").Select vCaseEventFilter     wait 4    Reporter.ReportEvent micDone,vCaseEventFilter, "Starting the validation under " & vCaseEventFilter & "Filter"    vRowCount  =  JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView").JavaTable("LoanEvents").GetROProperty("rows")    Set vObjTable = JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView").JavaTable("LoanEvents")    vFound = False  For Iterator = vRowCount-1 To 0 Step -1   v_arr_Actual(0)  = ""   v_arr_Actual(1)  = Replace(vObjTable.GetCellData(Iterator,"Event Date"),"/","-")   v_arr_Actual(2)  = vObjTable.GetCellData(Iterator,"Description")   v_arr_Actual(3)  = vObjTable.GetCellData(Iterator,"UserID")   v_arr_Actual(4)  = vObjTable.GetCellData(Iterator,"User Name")      TempArray = Split(Trim(v_arr_Actual(1)), " ", -1, 1)   v_arr_Actual(1) = TempArray(0)      If CDate(v_arr_Actual(1)) = CDate(v_arr_ExpDetail(1)) and UCase(Trim(v_arr_Actual(2))) = UCase(Trim(v_arr_ExpDetail(2))) and UCase(Trim(v_arr_Actual(3))) = UCase(Trim(v_arr_ExpDetail(3))) and v_arr_Actual(4) <> "" Then    vObjTable.SelectRow Iterator    wait 1    vFileName = "LoanEvent_" & Iterator + 1 & ".bmp"    JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView").CaptureBitmap vFileName,True    If vBoolean = true Then     Reporter.ReportEvent micPass,"MatchFound","A match for the desired loan event " & v_arr_ExpDetail(2) & " was found at Row No - " & Iterator + 1,vFileName      End If    vFound = True    Exit for      End If    Next    vFileName = "LoanEvent_" & replace(replace(Time,":","_"),"PM","") & ".bmp"  JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView").CaptureBitmap vFileName,True   If vFound = false and vBoolean = true Then   Reporter.ReportEvent micFail,"NoMatchFound", "Error - No Match was found for the desired Loan event - " & v_arr_ExpDetail(2),vFileName  ElseIf vFound = false and vBoolean = false Then   Reporter.ReportEvent micPass,"NoCaseEvent", "No Loan Event like " & v_arr_ExpDetail(2) & " is generated when the value is updated with same value and saved",vFileName  ElseIf vFound = true and vBoolean = false Then    Reporter.ReportEvent micFail,"CaseEventFound", "Error - Loan Event " & v_arr_ExpDetail(2) & " is generated when the value is updated with same value and saved - check Row - " & Iterator + 1,vFileName  End If   Next
 JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView").JavaTab("JavaTab").Select "Current Case" wait 2  On Error resume next JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView").JavaTab("JavaSubTab").Select "Workout" wait 2  
End Function'******************************************************************************************************************************************************************************
'******************************************************************************************************************************************************************************' This function is used to create the Base Darts case in SWINGUI'******************************************************************************************************************************************************************************
Function CreateNewDartsCase_Base(vRow)  Dim vSendKeys   JavaWindow("Credit Loss Management").JavaMenu("DARTS").JavaMenu("Case").JavaMenu("New Darts Case").Select Set vObj  =  JavaWindow("Credit Loss Management").JavaInternalFrame("New Darts Case Entry") vStatus  =  WaitForAnObjectToBeEnabled(vObj,vMinWaitTime)
 Datatable.GetSheet("Global").SetCurrentRow vRow
 vFannieMaeLoanNo  =  trim(Datatable.Value("FANNIEMAELOANNO","Global")) vWorkOutType  = trim(Datatable.Value("WorkOutType","Global"))  If vFannieMaeLoanNo <> "" Then  Set vObj = JavaWindow("Credit Loss Management").JavaInternalFrame("New Darts Case Entry").JavaObject("FMLoanNO")  vObj.Type vFannieMaeLoanNo   End If  set vSendKeys = CreateObject("WScript.shell") vSendKeys.SendKeys("{TAB}")  Set vObj =  JavaWindow("Credit Loss Management").JavaInternalFrame("New Darts Case Entry").JavaList("Workout Type")  vStatus = WaitForAnObjectToBeEnabled(vObj,vMinWaitTime)  If JavaWindow("Credit Loss Management").JavaDialog("Retreive case Error").JavaStaticText("WarningActiveCase").Exist(2) Then  JavaWindow("Credit Loss Management").JavaDialog("Retreive case Error").JavaButton("OK").Click  wait 2  vFileName = "ActiveCaseExists.bmp"  JavaWindow("Credit Loss Management").JavaDialog("Retreive case Error").CaptureBitmap vFileName,True  Reporter.ReportEvent micWarning,"ActiveCaseExists", "There is already an existing case for this Loan No",vFileName  CreateNewDartsCase_Base = False  Exit Function End If  If vWorkOutType <> "" Then  JavaWindow("Credit Loss Management").JavaInternalFrame("New Darts Case Entry").JavaList("Workout Type").Select vWorkOutType End If  wait 2 JavaWindow("Credit Loss Management").JavaInternalFrame("New Darts Case Entry").JavaButton("Submit").Click Set vObj =   JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView")  vStatus = WaitForAnObjectToBeEnabled(vObj,vMinWaitTime)
 If  JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView").Exist(2) Then  CreateNewDartsCase_Base = True End If End Function'******************************************************************************************************************************************************************************
'******************************************************************************************************************************************************************************' This function is used to enter Data in HAFA section of DIL case'******************************************************************************************************************************************************************************
Function EnterDARTSHAFASectionData(vRow)  Datatable.GetSheet("Global").SetCurrentRow vRow  vSD_StreDocumentation   = trim(Datatable.Value("SD_StreDocumentation","Global")) vSD_UserEnterdLPIDate   = trim(Datatable.Value("SD_UserEnterdLPIDate","Global")) vSD_HAFAPropertyType   = trim(Datatable.Value("SD_HAFAPropertyType","Global")) vSD_ProjForeClousereDate  = trim(Datatable.Value("SD_ProjForeClousereDate","Global")) vSD_OccStatus     = trim(Datatable.Value("SD_OccStatus","Global")) vSD_ProjFC_ACT_EST    = trim(Datatable.Value("SD_ProjFC_ACT_EST","Global")) vSD_FICOScore    = trim(Datatable.Value("SD_FICOScore","Global"))  vIsDistEmployment   = trim(Datatable.Value("IsDistEmployment","Global")) vHR_Reason      = trim(Datatable.Value("HR_Reason","Global"))
 If vSD_StreDocumentation <> "" Then  JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView").JavaList("HAFAStrealineDocumentation").Select vSD_StreDocumentation  End If  If vSD_ProjFC_ACT_EST <> "" Then  JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView").JavaList("HAFAProjFActvsEst").Select vSD_ProjFC_ACT_EST End If  If vSD_UserEnterdLPIDate <> "" Then  JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView").JavaObject("HAFAUserLPIDate").Type vSD_UserEnterdLPIDate End If  If vSD_HAFAPropertyType <> ""  Then  JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView").JavaList("HAFAPropertyType").Select vSD_HAFAPropertyType End If  If vSD_OccStatus <>  "" Then  JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView").JavaList("HAFAOccupancyStatus").Select vSD_OccStatus End If  If vSD_FICOScore <> "" Then  JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView").JavaEdit("HAFAFICOScore").Set vSD_FICOScore End If  If vIsDistEmployment <> "" Then  JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView").JavaList("HAFAIsDistEmployment").Select vIsDistEmployment End If  If vHR_Reason <> "" Then  JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView").JavaList("HAFAHardshipReason").Select vHR_Reason End If End Function
'******************************************************************************************************************************************************************************
'******************************************************************************************************************************************************************************
'' This function is used to convert date from one format to another' @Param     DateVal - The standard date format that needs to be convered' @Param     Format  - The format to which it should be converted' @return     MyDate -  returns that formated date value' @remarks     ' @author      UmaMahesh Vadlamani' @Version     Ver 1.0'******************************************************************************************************************************************************************************
Function FormatDate(DateVal, Format)
 Dim y, m, d, MyDate
 y = Year(DateVal) m = Month(DateVal) d = Day(DateVal) 
 If m < 10 Then  m = "0" & m End If
 If d < 10 Then  d = "0" & d End If
   Select Case Format
  Case "YYYY-MM-DD"
   If len(m) < 2 Then    m = "0" & m   End If
   If len(d) < 2 Then    d = "0" & d   End If
   MyDate = y & "-" & m & "-" & d
  Case "YYYY-MM-01"
   If len(m) < 2 Then    m = "0" & m         End If  
   d = "01"   MyDate = y & "-" & m & "-" & d
  Case "YYMMDD"
   y = Right(y, 2)   MyDate = y&m&d
  Case "YYYYMMDD"
   MyDate = y&m&d
  Case "MMDDYYYY"
   MyDate = m &d & y
  Case "MM-DD-YYYY"
   MyDate = m &"-"&d&"-"&y
  Case "MM/DD/YYYY"
   MyDate = m &"/" & d &"/" &  y
   Case "M/D/YYYY"
   y = Year(DateVal)         m = Month(DateVal)         d = Day(DateVal)    MyDate = m &"/" & d &"/" &  y
  Case "MMDD"
   MyDate = m & d
  Case "YYYYMM"
   MyDate = y & m
  Case "MM_DD_YYYY"
   MyDate = m & "_"& d & "_"& y
  Case "MM-DD-YY"
   MyDate=m&"-"&d&"-"&Right(y, 2)
  Case "DD-MMM-YY"
   MyDate=d&"-"&Ucase(MonthName(month(DateVal),True))&"-"&Right(y, 2)
     End Select
  FormatDate = MyDate
End Function
'******************************************************************************************************************************************************************************

'******************************************************************************************************************************************************************************' This is a master function that is used to validate the new Events that were created for Rel Assistance Expense Filed in DIL section'******************************************************************************************************************************************************************************
Function RelocationAssistanceExpensesEvents_Validation(vRow)  Call FetchLoginDetails("InternalUser","001")  vStatus =  LaunchSwingWebUrl(vSwingURL)  If vStatus = True Then  vStatus = LoginToSwing_JavaLogin(vUserName,vPassword) End If  If vStatus = True Then  vStatus = LoginToSwingCLMUI(vUserName, vPassword) End If   Datatable.GetSheet("Global").SetCurrentRow vRow  'Fetch the loan number to use. vSQL  =  trim(Datatable.Value("SQL","Global")) vSheet = "Global" vStatus =   ObtainDynamicData(vSQL,vSheet,vRow)  vFannieMaeLoanNo   = trim(Datatable.Value("FANNIEMAELOANNO","Global")) vCaseStatus    = trim(Datatable.Value("CaseStatus","Global")) vScenarioName   = trim(Datatable.Value("Scenario","Global"))  vStatus = SearchDartsCaseByStatus(vFannieMaeLoanNo,vCaseStatus,vSearchType)  If vStatus = True Then   JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView").JavaTab("JavaTab").Select "Current Case"  wait 2    JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView").JavaTab("JavaSubTab").Select "Case"  wait 2    Call FetchLoginDetails("InternalUser","001")  vTitle  = JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView").GetROProperty("title")  vCaseNumber  =  Trim(mid(vTitle,1,instr(1,vTitle,"~")-1))        'perform an additional check for PFS Type case  If Instr(1,vScenarioName,"PFS") > 0  Then     JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView").JavaTab("JavaSubTab").Select "Market"   wait 2   If JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView").JavaList("MAnalysis_IsPrimaryValue").GetROProperty("enabled") = true Then    JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView").JavaList("MAnalysis_IsPrimaryValue").Select "Yes"    wait 2   End If      JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView").JavaTab("JavaTab").Select "Current Case"   wait 2      JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView").JavaTab("JavaSubTab").Select "Case"   wait 2      Set vObj = JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView").JavaObject("SD_FMRelIncenive")   vCurrentValue = JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView").JavaObject("SD_FMRelIncenive").GetROProperty("text")   Call ClearJavaEditObject(vObj)   wait 1      JavaWindow("Credit Loss Management").JavaMenu("File").JavaMenu("Save").Select   Set vObj = JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView")   Call WaitForAnObjectToBeEnabled(vObj,vMinWaitTime)      Set vObj = JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView").JavaObject("SD_FMRelIncenive")   vCurrentValue = JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView").JavaObject("SD_FMRelIncenive").GetROProperty("text")   Call ClearJavaEditObject(vObj)   wait 1      JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView").JavaObject("SD_FMRelIncenive").Type "200.00"   wait 2      set vSendKeys = CreateObject("WScript.shell")   vSendKeys.SendKeys("{TAB}")   wait 1    JavaWindow("Credit Loss Management").JavaMenu("File").JavaMenu("Save").Select   Set vObj = JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView")   Call WaitForAnObjectToBeEnabled(vObj,vMinWaitTime)      Dim v_arr_ExpDetail(4)   v_arr_ExpDetail(0) = vCaseNumber   v_arr_ExpDetail(1) = vSysDate   v_arr_ExpDetail(3) = vUserName      v_arr_ExpDetail(2) =  "Fannie Mae Relocation Incentive changed from Null to $200.00"      Call VerifyCaseEvent(v_arr_ExpDetail,True)    Call VerifyLoanEvent(v_arr_ExpDetail,True)         'negative test for FM Rel Assiantance expense field   v_arr_ExpDetail(2) =  "Fannie Mae Relocation Assistance Expense from Null to $200.00"   Call VerifyCaseEvent(v_arr_ExpDetail,False)    Call VerifyLoanEvent(v_arr_ExpDetail,False)        'Handle the DIL Cases  ElseIf Instr(1,vScenarioName,"DIL") > 0 then   JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView").JavaTab("JavaSubTab").Select "Workout"   wait 2       If JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView").JavaObject("RelocationAssistExp").Exist(2) then    vCurrentValue = JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView").JavaObject("RelocationAssistExp").GetROProperty("text")    Call VerifyRelAssExpCaseEvents(vCaseNumber,vUserName)   Else    vFileName = "RelocationAssitExpense.bmp"    JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView").CaptureBitmap vFileName,True    Reporter.ReportEvent micFail,"RelocationAssitExpense","The Relocation Assit Expense is missing in the application, please verify",vFileName    ExitTest   End If     End If  
 Else  Reporter.ReportEvent micFail,"NoCaseFound","FannieMae Loan Number is not found in the application, please cross check the query - " &  vFannieMaeLoanNo End If  If JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView").Exist(2) then  JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView").Close  wait 2 End If
 If JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS Case Manager").Exist(3) then  JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS Case Manager").Close  wait 2 End if  If JavaWindow("Credit Loss Management").Exist(4) then  JavaWindow("Credit Loss Management").Close End If    Call CloseAllBrowsers()  End Function'******************************************************************************************************************************************************************************
'******************************************************************************************************************************************************************************' This Function is used to navigate to the screen which lists the XMLS that are uploaded to be picked up based on the provided filters'******************************************************************************************************************************************************************************
 Function NavigateToBulkUploadStatusList(vCertifiedVendor,vServicerNumber,vFromDate,vToDate)    If Not Browser("CLMWebPage").Page("CommonPage").WebList("RequestedAction").Exist(2) Then   vFileName = "CouldNotNavigateHome.bmp"   Browser("CLMWebPage").CaptureBitmap vFileName,True   Reporter.ReportEvent micFail,"CouldNotNavigateHome","Error - Could not navigate to the home page, please corss check that Main Menu element is shown in GO List",vFileName   vStatus = False   NavigateToBulkUploadStatusList = vStatus   Exit Function  End If    Browser("CLMWebPage").Page("CommonPage").WebList("RequestedAction").Select("Main Menu") Browser("CLMWebPage").Sync    If Not Browser("CLMWebPage").Page("Main Menu").Link("Bulk WorkOut Cases Query").Exist(6) then   vFileName = "BulkWorkoutCaseQueryLinkMissing.bmp"   Browser("CLMWebPage").CaptureBitmap vFileName,True   Reporter.ReportEvent micFail,"BulkWorkoutCaseQueryLinkMissing","Error - The Bulk WorkOut Case Query link is missing, please cross check",vFileName    vStatus = False   NavigateToBulkUploadStatusList = vStatus   Exit Function  End If    Browser("CLMWebPage").Page("Main Menu").Link("Bulk WorkOut Cases Query").Click Browser("CLMWebPage").Sync  If Trim(vCerfiedVendor) <> "" Then  Browser("CLMWebPage").Page("Bulk Workout Cases Query").WebList("CertifiedVendor").Select Trim(vCerfiedVendor) End If  If vServicerNumber <> "" Then  Browser("CLMWebPage").Page("Bulk Workout Cases Query").WebEdit("ServicerNumber").Set vServicerNumber End If  If vFromDate <> "" Then  Browser("CLMWebPage").Page("Bulk Workout Cases Query").WebEdit("DateFrom").Set vFromDate End If
 If vToDate <> "" Then  Browser("CLMWebPage").Page("Bulk Workout Cases Query").WebEdit("DateThrough").Set vToDate End If 
 Browser("CLMWebPage").Page("Bulk Workout Cases Query").WebButton("Submit").Click Browser("CLMWebPage").Sync  If Browser("CLMWebPage").Page("Bulk Workout Cases Query").WebTable("BulkUploadList").Exist(10) Then  vFileName = "NavigatedToXMLList.bmp"  Browser("CLMWebPage").CaptureBitmap vFileName,True  Reporter.ReportEvent micPass,"NavigatedToBulkUploadList","Successfully navigated to the Bulk upload XML list",vFileName   vStatus = True   NavigateToBulkUploadStatusList = vStatus   Exit Function  ElseIf Browser("CLMWebPage").Page("Bulk Workout Cases Query").WebElement("DataNotFound").Exist(4) Then   vFileName = "DataNotFound.bmp"  Browser("CLMWebPage").CaptureBitmap vFileName,True  Reporter.ReportEvent micFail,"DataNotFound","Error - No Data was found for the specified conditions, please cross check",vFileName   vStatus = False   NavigateToBulkUploadStatusList = vStatus   Exit Function End If 
 End Function  '******************************************************************************************************************************************************************************
'******************************************************************************************************************************************************************************' This Function is used to verify the Desired File with the desired status is shown in the list of files'******************************************************************************************************************************************************************************  Function VerifyBulkUploadXMLStatus(vExpServicerName,vExpFileName,vExpFileStatus,ByRef vMatchedRow)    vFound = False    If Browser("CLMWebPage").Page("Bulk Workout Cases Query").WebTable("BulkUploadList").Exist(5) then      vRowCount = Browser("CLMWebPage").Page("Bulk Workout Cases Query").WebTable("BulkUploadList").RowCount      For Iterator = 2 To vRowCount Step 1      vAct_FileName  = Trim(Browser("CLMWebPage").Page("Bulk Workout Cases Query").WebTable("BulkUploadList").GetCellData(Iterator,3))      If vAct_FileName = vExpFileName Then    vAct_ServicerName = Trim(Browser("CLMWebPage").Page("Bulk Workout Cases Query").WebTable("BulkUploadList").GetCellData(Iterator,2))    vAct_FileStatus  = Trim(Browser("CLMWebPage").Page("Bulk Workout Cases Query").WebTable("BulkUploadList").GetCellData(Iterator,4))    vAct_UserName  = Trim(Browser("CLMWebPage").Page("Bulk Workout Cases Query").WebTable("BulkUploadList").GetCellData(Iterator,5))    If vAct_ServicerName  = vExpServicerName and vAct_FileName = vExpFileName and vAct_FileStatus = vExpFileStatus Then     vFileName = "DataNotFound.bmp"     Browser("CLMWebPage").CaptureBitmap vFileName,True       Reporter.ReportEvent micPass,"MatchFound - Bulk Upload XML","A Match was found for the desired Bulk upload XML File",vFileName     vFound = True     vMatchedRow = Iterator     Exit For    End If    End If   Next    vFileName = "BulkUploadXMLList.bmp"  Browser("CLMWebPage").Page("Bulk Workout Cases Query").CaptureBitmap vFileName,True  If vFound = True Then   Reporter.ReportEvent micPass,"MatchingXMLFound", "A Matching entry for the XML with the desired Status is found at Row - " & vMatchedRow,vFileName  Else   'Reporter.ReportEvent micDone, "MatchingXMLNotFound", "A Matching entry for the XML with the desired status was not found",vFileName  End If     End if    VerifyBulkUploadXMLStatus = vFound
 End Function  '******************************************************************************************************************************************************************************
 '******************************************************************************************************************************************************************************' This Function is used to verify if a desired error message is seen in the list of errors for a file that has either been rejected or processed with Errors'******************************************************************************************************************************************************************************
 Function VerifyBulkUploadErrors(vMatchedRow,vExpWorkOutType,vExpFannieMaeLoanNo,vExpCaseStatus,vExpErrorMessage)    If Not Browser("CLMWebPage").Page("Bulk Workout Cases Query").WebTable("BulkUploadList").Exist(10) Then   Reporter.ReportEvent micFail,"DesiredFileListNotFound", "The Table listing the XML files does not seem to be available to continue"   VerifyBulkUploadErrors = false   Exit Function  ElseIf Browser("CLMWebPage").Page("Bulk Workout Cases Query").WebTable("BulkUploadList").RowCount < vMatchedRow then   Reporter.ReportEvent micFail,"DesiredRowNotFound", "The XML List does not seem to have a row - " & vMatchedRow   VerifyBulkUploadErrors = false   Exit Function  End If     Set vLink = Browser("CLMWebPage").Page("Bulk Workout Cases Query").WebTable("BulkUploadList").ChildItem(vMatchedRow,10,"link",0) vLink.click Browser("CLMWebPage").Sync wait 3  vFileName = "ExpectedError.bmp" Browser("CLMWebPage").Page("Bulk Upload Workout Cases").CaptureBitmap vFileName,True     If Browser("CLMWebPage").Page("Bulk Upload Workout Cases").WebTable("FileDetails").Exist(10) then  vRowCount = Browser("CLMWebPage").Page("Bulk Upload Workout Cases").WebTable("FileDetails").RowCount  For Iterator = 2 To vRowCount Step 1   vActWorkOutType   = Trim(Browser("CLMWebPage").Page("Bulk Upload Workout Cases").WebTable("FileDetails").GetCellData(Iterator,1))   vActFannieMaeLoanNo  = Trim(Browser("CLMWebPage").Page("Bulk Upload Workout Cases").WebTable("FileDetails").GetCellData(Iterator,4))   vActCaseStatus   = Trim(Browser("CLMWebPage").Page("Bulk Upload Workout Cases").WebTable("FileDetails").GetCellData(Iterator,8))   vActErrorMessage  = Trim(Browser("CLMWebPage").Page("Bulk Upload Workout Cases").WebTable("FileDetails").GetCellData(Iterator,9))      If vActWorkOutType = vExpWorkOutType and  vActFannieMaeLoanNo = vExpFannieMaeLoanNo and vActCaseStatus = vExpCaseStatus and vActErrorMessage = vExpErrorMessage Then    Reporter.ReportEvent micPass,"ExpectedErrorMessageFound", "The Desired Error message was found in the table",vFileName    vFound = True    VerifyBulkUploadErrors = True    Exit Function   End If     Next  Else  vFileName = "FileDetailsNotOpened.bmp"  Browser("CLMWebPage").Page("Bulk Upload Workout Cases").CaptureBitmap vFileName,True  Reporter.ReportEvent micFail,"FileDetailsNotFound","The File Details page was not opened for the selected file as expected, please cross check",vFileName  End if  If vFound = False Then  Reporter.ReportEvent micWarning ,"ExpectedErrorMessageNotFound", "The Desired Error message was not found in the table",vFileName  VerifyBulkUploadErrors = False  Exit Function   End If   End Function '******************************************************************************************************************************************************************************
'******************************************************************************************************************************************************************************' This Function is used to upload a specified XML file using the Bulk upload feature'******************************************************************************************************************************************************************************  Function UploadXMLFile(vCertifiedVendor,vServicerNumber,vFilePath,vFileName)    If Not Browser("CLMWebPage").Page("CommonPage").WebList("RequestedAction").Exist(2) Then   vFileName = "CouldNotNavigateHome.bmp"   Browser("CLMWebPage").CaptureBitmap vFileName,True   Reporter.ReportEvent micFail,"CouldNotNavigateHome","Error - Could not navigate to the home page, please corss check that Main Menu element is shown in GO List",vFileName   UploadXMLFile = False   Exit Function  End If    Browser("CLMWebPage").Page("CommonPage").WebList("RequestedAction").Select("Main Menu") Browser("CLMWebPage").Sync   Browser("CLMWebPage").Page("Main Menu").Link("Workouts Bulk Upload").Click  Browser("CLMWebPage").Sync    If vCertifiedVendor <> "" Then   Browser("CLMWebPage").Page("Workouts Bulk Upload").WebList("CertifiedVendor").Select  End If    If vServicerNumber <> "" Then   Browser("CLMWebPage").Page("Workouts Bulk Upload").WebEdit("ServicerNumber").Set vServicerNumber  End If   Browser("CLMWebPage").Page("Workouts Bulk Upload").WebButton("Submit").Click Browser("CLMWebPage").Sync  Set vObj1 = Browser("CLMWebPage").Page("Workouts Bulk Upload").WebElement("ErrorMsg1") Set vObj2 = Browser("CLMWebPage").Page("Workouts Bulk Upload").WebElement("ErrorMsg2") Set vObj3 = Browser("CLMWebPage").Page("Workouts Bulk Upload").WebElement("ErrorMsg3") Set vObj4 = Browser("CLMWebPage").Page("Workouts Bulk Upload").WebElement("ErrorMsg4")  If Browser("CLMWebPage").Page("Workouts Bulk Upload").WebFile("FileToUpload").Exist(4) then   vReplacementText = "Updated on - " & Replace(Time,":","")  Call UpdateXMLTagValueToUnique (vFilePath,vFileName,"detail","servicerComments",vReplacementText)    Browser("CLMWebPage").Page("Workouts Bulk Upload").WebFile("FileToUpload").Click 10,10  vStatus = BrowseAndOpenFile(vFilePath,vFileName)    If vStatus = False Then   UploadXMLFile = False   Exit Function  End If    Browser("CLMWebPage").Page("Workouts Bulk Upload").WebButton("Upload the File").Click  Browser("CLMWebPage").Sync    If Browser("CLMWebPage").Page("Workouts Bulk Upload").WebElement("SuccessfulMsg").Exist(vMinWaitTime) Then   vFileName = "Upload_" & replace(vFileName,".xml",".bmp")   Browser("CLMWebPage").Page("Workouts Bulk Upload").CaptureBitmap vFileName,True   Reporter.ReportEvent micPass,"XMLUploaded","The Desired XML File has been uploaded",vFileName   UploadXMLFile = True    Exit Function  Else   vFileName = "UploadFailed_" & replace(vFileName,".xml",".bmp")   Browser("CLMWebPage").Page("Workouts Bulk Upload").CaptureBitmap vFileName,True   Reporter.ReportEvent micWarning,"XMLUploadedFailed","The Desired XML does not seem to has been uploaded, please cross check data",vFileName   UploadXMLFile = False    Exit Function  End If   ElseIf vObj1.Exist(2) or vObj2.Exist(2) or vObj3.Exist(2) or vObj4.Exist(2) Then  vFileName = "InvalidBulkData.bmp"  Browser("CLMWebPage").Page("Workouts Bulk Upload").CaptureBitmap vFileName,True  Reporter.ReportEvent micFail,"InvalidData","The Data inputed seems invalid, please cross check",vFileName  UploadXMLFile = False  Exit Function End If  End Function '******************************************************************************************************************************************************************************
'******************************************************************************************************************************************************************************' This function is used to Browse and select a desired file'******************************************************************************************************************************************************************************
 Function BrowseAndOpenFile(vFilePath,vFileName)    vStatus = False  If Browser("CLMWebPage").Dialog("Choose File to Upload").WinEdit("File name:").Exist(5) then   Browser("CLMWebPage").Dialog("Choose File to Upload").WinEdit("File name:").Set vFilePath & "\" & vFileName   Browser("CLMWebPage").Dialog("Choose File to Upload").WinObject("Open").Click    If Browser("CLMWebPage").Dialog("Choose File to Upload").Dialog("Choose File to Upload").Exist(3) then   vFileName = replace(vFileName,".xml",".bmp")   Browser("CLMWebPage").CaptureBitmap vFileName,True   Reporter.ReportEvent micFail,"FileOpenFailed","Could not open the desired file, please cross check the path",vFileName   Browser("CLMWebPage").Dialog("Choose File to Upload").Dialog("Choose File to Upload").WinButton("OK").Click   vStatus = False  Else   vStatus = True  End If  End If  BrowseAndOpenFile = vStatus
 End Function '******************************************************************************************************************************************************************************
'******************************************************************************************************************************************************************************' This Function is used to execute a desired Auto Sys Job'******************************************************************************************************************************************************************************
 Function ExecuteAutoSysJob(vJobName)   If Not Browser("CLMWebPage").Page("CommonPage").WebList("RequestedAction").Exist(2) Then   vFileName = "CouldNotNavigateHome.bmp"   Browser("CLMWebPage").CaptureBitmap vFileName,True   Reporter.ReportEvent micFail,"CouldNotNavigateHome","Error - Could not navigate to the home page, please corss check that Main Menu element is shown in GO List",vFileName   ExecuteAutoSysJob = False   Exit Function  End If    Browser("CLMWebPage").Page("CommonPage").WebList("RequestedAction").Select("Main Menu") Browser("CLMWebPage").Sync  Browser("CLMWebPage").Page("Main Menu").Link("Run Autosys Commands").Click Browser("CLMWebPage").Sync     If Browser("CLMWebPage").Page("AutoSys Commands").Link("micclass:=link","text:=" & vJobName).Exist(10) then  Browser("CLMWebPage").Page("AutoSys Commands").Link("micclass:=link","text:=" & vJobName).click  Browser("CLMWebPage").Sync  wait 2 Else  vFileName = vJobName & ".bmp"  Browser("CLMWebPage").CaptureBitmap vFileName,True  Reporter.ReportEvent micFail,"JobDoesNotExist","The Desired Job - " & vJobName & " does not exist to continue",vFileName  ExecuteAutoSysJob = false  Exit Function End If  Browser("CLMWebPage").Page("AutoSys Commands").WebRadioGroup("command").Select "sendevent -J jobname -E FORCE_STARTJOB" wait 1 Browser("CLMWebPage").Page("AutoSys Commands").WebButton("Submit").Click Browser("CLMWebPage").Page("AutoSys Commands").Sync  Set vObj =  Browser("CLMWebPage").Page("AutoSys Commands").WebElement("JobSubmited") vStatus = WaitForAnObject(vObj,vMinWaitTime)  If Browser("CLMWebPage").Page("AutoSys Commands").WebElement("JobSubmited").Exist(2) Then  vFileName = vJobName & "_Success" & ".bmp"  Browser("CLMWebPage").CaptureBitmap vFileName,True  Reporter.ReportEvent micPass,"JobSubmitted","The Job was submitted successfully",vFileName  ExecuteAutoSysJob = True Else  vFileName = vJobName & "_Failed" & ".bmp"  Browser("CLMWebPage").CaptureBitmap vFileName,True  Reporter.ReportEvent micFail,"JobNotSubmitted","There seems to be some problem, Job was not submitted, please cross check",vFileName  ExecuteAutoSysJob = False End If
 End Function '******************************************************************************************************************************************************************************
'******************************************************************************************************************************************************************************' This Function is used to navigate to the Bulk Upload file details page from the list of bulkupload files'******************************************************************************************************************************************************************************
Function OpenBulkFileUploadDetails(vMatchedRow)      If Not Browser("CLMWebPage").Page("Bulk Workout Cases Query").WebTable("BulkUploadList").Exist(10) Then   Reporter.ReportEvent micFail,"DesiredFileListNotFound", "The Table listing the XML files does not seem to be available to continue"   OpenBulkFileUploadDetails = false   Exit Function  ElseIf Browser("CLMWebPage").Page("Bulk Workout Cases Query").WebTable("BulkUploadList").RowCount < vMatchedRow then   Reporter.ReportEvent micFail,"DesiredRowNotFound", "The XML List does not seem to have a row - " & vMatchedRow   OpenBulkFileUploadDetails = false   Exit Function  End If     Set vLink = Browser("CLMWebPage").Page("Bulk Workout Cases Query").WebTable("BulkUploadList").ChildItem(vMatchedRow,10,"link",0) vLink.click Browser("CLMWebPage").Sync  vFileName = "FileDetails.bmp" Browser("CLMWebPage").Page("Bulk Upload Workout Cases").CaptureBitmap vFileName,True Reporter.ReportEvent micPass, "NavigatedToFileDetails","Successfully navigated to the desired file details page",vFileName OpenBulkFileUploadDetails = True End Function'******************************************************************************************************************************************************************************

'******************************************************************************************************************************************************************************' This Function is used to extract the case number for the specified loan number'******************************************************************************************************************************************************************************
 Function ExtractCaseNumber(vExpWorkOutType,vExpFannieMaeLoanNo,vExpCaseStatus,ByRef vCaseNumber)    If Browser("CLMWebPage").Page("Bulk Upload Workout Cases").WebTable("FileDetails").Exist(10) then  vRowCount = Browser("CLMWebPage").Page("Bulk Upload Workout Cases").WebTable("FileDetails").RowCount  For Iterator = 2 To vRowCount Step 1   vActWorkOutType   = Trim(Browser("CLMWebPage").Page("Bulk Upload Workout Cases").WebTable("FileDetails").GetCellData(Iterator,1))   vActFannieMaeLoanNo  = Trim(Browser("CLMWebPage").Page("Bulk Upload Workout Cases").WebTable("FileDetails").GetCellData(Iterator,4))   vActCaseStatus   = Trim(Browser("CLMWebPage").Page("Bulk Upload Workout Cases").WebTable("FileDetails").GetCellData(Iterator,8))   vCaseNumber    = Trim(Browser("CLMWebPage").Page("Bulk Upload Workout Cases").WebTable("FileDetails").GetCellData(Iterator,7))
   If vActWorkOutType = vExpWorkOutType and  vActFannieMaeLoanNo = vExpFannieMaeLoanNo and vActCaseStatus = vExpCaseStatus Then    vFileName = "MatchForCaseFound.bmp"    Browser("CLMWebPage").Page("Bulk Upload Workout Cases").CaptureBitmap vFileName,True    Reporter.ReportEvent micPass,"MatchForCaseFound", "A Mactch for the desired case was found",vFileName    vFound = True    ExtractCaseNumber = True    Exit Function   End If     Next  Else  vFileName = "FileDetailsNotOpened.bmp"  Browser("CLMWebPage").Page("Bulk Upload Workout Cases").CaptureBitmap vFileName,True  Reporter.ReportEvent micFail,"FileDetailsNotFound","The File Details page was not opened for the selected file as expected, please cross check",vFileName  End if  If vFound = False Then  vFileName = "CaseNotFound.bmp"  Browser("CLMWebPage").Page("Bulk Upload Workout Cases").CaptureBitmap vFileName,True  Reporter.ReportEvent micFail ,"ExpectedCaseNotFound", "The Desired case was not found in the table",vFileName  ExtractCaseNumber = False  Exit Function   End If   End Function '******************************************************************************************************************************************************************************
Function ReplaceTextInAFile(vFilePath,vFileName,vTextToFind,vTextToReplace)  End Function

Function RelocationAssistanceExpensesEvents_Validation_UAT()  'Call FetchLoginDetails("InternalUser","001")  'vStatus =  LaunchSwingWebUrl(vSwingURL)  'If vStatus = True Then  'vStatus = LoginToSwing_JavaLogin(vUserName,vPassword) 'End If  'If vStatus = True Then  'vStatus = LoginToSwingCLMUI(vUserName, vPassword) 'End If vRow = 1   Datatable.GetSheet("Global").SetCurrentRow vRow  'Fetch the loan number to use. vSQL  =  trim(Datatable.Value("SQL","Global")) vSheet = "Global" 'vStatus =   ObtainDynamicData(vSQL,vSheet,vRow)  Datatable.Value("FANNIEMAELOANNO","Global") = GLOBAL_LOAN_NUM Datatable.Value("CaseStatus","Global") = GLOBAL_CASE_STATUS Datatable.Value("Scenario","Global") = "DIL - Delegated - Approved Case" vFannieMaeLoanNo   = trim(Datatable.Value("FANNIEMAELOANNO","Global")) vCaseStatus    = trim(Datatable.Value("CaseStatus","Global")) vScenarioName   = trim(Datatable.Value("Scenario","Global"))  'vStatus = SearchDartsCaseByStatus(vFannieMaeLoanNo,vCaseStatus,vSearchType) vStatus = True If vStatus = True Then   JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView").JavaTab("JavaTab").Select "Current Case"  wait 2    JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView").JavaTab("JavaSubTab").Select "Case"  wait 2    'Call FetchLoginDetails("InternalUser","001")  vUserName = GLOBAL_DARTS_JAVA_USERROLE  vTitle  = JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView").GetROProperty("title")  vCaseNumber  =  Trim(mid(vTitle,1,instr(1,vTitle,"~")-1))        'perform an additional check for PFS Type case  If Instr(1,vScenarioName,"PFS") > 0  Then     JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView").JavaTab("JavaSubTab").Select "Market"   wait 2   If JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView").JavaList("MAnalysis_IsPrimaryValue").GetROProperty("enabled") = true Then    JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView").JavaList("MAnalysis_IsPrimaryValue").Select "Yes"    wait 2   End If      JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView").JavaTab("JavaTab").Select "Current Case"   wait 2      JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView").JavaTab("JavaSubTab").Select "Case"   wait 2      Set vObj = JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView").JavaObject("SD_FMRelIncenive")   vCurrentValue = JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView").JavaObject("SD_FMRelIncenive").GetROProperty("text")   Call ClearJavaEditObject(vObj)   wait 1      JavaWindow("Credit Loss Management").JavaMenu("File").JavaMenu("Save").Select   Set vObj = JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView")   Call WaitForAnObjectToBeEnabled(vObj,vMinWaitTime)      Set vObj = JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView").JavaObject("SD_FMRelIncenive")   vCurrentValue = JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView").JavaObject("SD_FMRelIncenive").GetROProperty("text")   Call ClearJavaEditObject(vObj)   wait 1      JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView").JavaObject("SD_FMRelIncenive").Type "200.00"   wait 2      set vSendKeys = CreateObject("WScript.shell")   vSendKeys.SendKeys("{TAB}")   wait 1    JavaWindow("Credit Loss Management").JavaMenu("File").JavaMenu("Save").Select   Set vObj = JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView")   Call WaitForAnObjectToBeEnabled(vObj,vMinWaitTime)      Dim v_arr_ExpDetail(4)   v_arr_ExpDetail(0) = vCaseNumber   v_arr_ExpDetail(1) = vSysDate   v_arr_ExpDetail(3) = vUserName      v_arr_ExpDetail(2) =  "Fannie Mae Relocation Incentive changed from Null to $200.00"      Call VerifyCaseEvent(v_arr_ExpDetail,True)    Call VerifyLoanEvent(v_arr_ExpDetail,True)         'negative test for FM Rel Assiantance expense field   v_arr_ExpDetail(2) =  "Fannie Mae Relocation Assistance Expense from Null to $200.00"   Call VerifyCaseEvent(v_arr_ExpDetail,False)    Call VerifyLoanEvent(v_arr_ExpDetail,False)        'Handle the DIL Cases  ElseIf Instr(1,vScenarioName,"DIL") > 0 then   JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView").JavaTab("JavaSubTab").Select "Workout"   wait 2       If JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView").JavaObject("RelocationAssistExp").Exist(2) then    vCurrentValue = JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView").JavaObject("RelocationAssistExp").GetROProperty("text")    Call VerifyRelAssExpCaseEvents(vCaseNumber,vUserName)   Else    vFileName = "RelocationAssitExpense.bmp"    JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView").CaptureBitmap vFileName,True    Reporter.ReportEvent micFail,"RelocationAssitExpense","The Relocation Assit Expense is missing in the application, please verify",vFileName    ExitTest   End If     End If  
 Else  Reporter.ReportEvent micFail,"NoCaseFound","FannieMae Loan Number is not found in the application, please cross check the query - " &  vFannieMaeLoanNo End If  If JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView").Exist(2) then  JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS_CaseView").Close  wait 2 End If
 If JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS Case Manager").Exist(3) then  JavaWindow("Credit Loss Management").JavaInternalFrame("DARTS Case Manager").Close  wait 2 End if  'If JavaWindow("Credit Loss Management").Exist(4) then ' JavaWindow("Credit Loss Management").Close 'End If    'Call CloseAllBrowsers()  End Function''---------------------------------------------------''--------------------------Common:Dim GLOBAL_TEMPDIRGLOBAL_TEMPDIR = "C:\Temp"
'Register the overriding QTP function globally - added by Terry Wang - 02/28/2014RegisterUserFunc "WebTable", "GetColumnNumber", "GetColumnNumber",FalseRegisterUserFunc "WebTable", "SetCellData", "SetCellData", FalseRegisterUserFunc "WebTable", "SetCellDataEx", "SetCellDataEx", False'RegisterUserFunc "Browser", "Sync", "BrowserSync", False'RegisterUserFunc "Page", "Sync", "PageSync", False'RegisterUserFunc "Browser", "Maximize", "QTP_BrowserMaximize" 'RegisterUserFunc "WebList", "Select", "WebListSelect", False
Const ForReading = 1, ForWriting = 2, ForAppending = 8'*******************DB functions ''' The DB operation function shared with all other functions. The foundation of DB operation.' @param SQL_String - The SQL string for DB operation.' @return oRS - the object of the Record Set that contains the data. Nothing - if there is no data returned. ' @date Created Date:8/5/2013 Updated:12/30/2013 ' @author Terry Wang/Anbu' @version 1.0 ' @remarks Updated to remove HArd coded user ID/pwdFunction QTP_ExecuteDBQuery(ByVal DBName, ByVal SQLQuery) Const DB_CLOSED = 0 Dim oDBConn Dim oRS Dim arrayRS Dim ConnStr
 Set oDBConn = CreateObject("adodb.connection") ConnStr = "DRIVER={Microsoft ODBC for Oracle};Server=" + DBName + ";Uid=" + GLOBAL_SHARED_ID + ";Pwd=" + GLOBAL_SHARED_ID_PWD_DB + ";" oDBConn.ConnectionString = ConnStr oDBConn.Open
 Set oRS = CreateObject("adodb.recordset") oRS.Open SQLQuery, oDBConn  If oRS Is Nothing Then    arrayRS = Array()    oRS.Close ElseIf oRS.State = DB_CLOSED Then    arrayRS = Array() ElseIf oRS.EOF = True Then  arrayRS = Array()  oRS.Close Else  arrayRS = oRS.GetRows  oRS.Close End If  oDBConn.Close Set oRS = Nothing Set oDBConn = Nothing  QTP_ExecuteDBQuery = arrayRSEnd Function
'Sub MapNWDrive(Letter, SharedFolder, UserID, EncPwd)' Reporter.ReportEvent micDone,"START","MapNWDrive"''   On Error Resume Next'   Call RemoveAllNWDrives'   Set NWDrive = CreateObject("ETALib.NetworkDrive")' If InStr(Letter, ":") = 0Then'   Letter = Letter & ":"' End If' NWDrive.DisconnectDrive Letter' NWDrive.MapDrive Letter, SharedFolder, UserID, EncPwd' Wait 10'' Set NWDrive = Nothing' On Error Goto 0'    Reporter.ReportEvent micDone,"END","MapNWDrive"'End Sub''Sub RemoveAllNWDrives'   Reporter.ReportEvent micDone,"START","RemoveAllNWDrives"' On Error Resume Next' Dim WshNetwork, NWDrives' Set WshNetwork = CreateObject("WScript.Network")' Set NWDrives = WshNetwork.EnumNetworkDrives' For i = 0 To NWDrives.Count-1 Step 2'  WshNetwork.RemoveNetworkDrive NWDrives.Item(i), True, True' Next'    Reporter.ReportEvent micDone,"END","RemoveAllNWDrives"'End Sub
Function PauseScript  ' Msgbox "Waiting"End Function
Sub WaitForLoad(obj) Do While obj.Busy: Loop  Do While obj.readyState <> 4:  Loop   wscript.sleep(100)End Sub
''' This function overrides the default web browser object sync function because the default one doesn't work while BHOManager add-on is disabled. The overriding sync timeout  inherited from QTP Object Identification Timeout value' @param BrowserObject - The web browser object referred.' @return N/A' @date Created Date:03/31/2014 ' @author Terry Wang' @version 1.0 ' @remarksFunction BrowserSync(ByRef BrowserObject)
   'BrowserObject.Page("index:=.*").Sync   BrowserObject.Sync
End Function
''' This function overrides the default web page object sync function because the default one doesn't work while BHOManager add-on is disabled. The overriding sync timeout  inherited from QTP Object Identification Timeout value' @param PageObject - The web page object referred.' @return N/A' @date Created Date:02/28/2014 ' @author Terry Wang' @version 1.0 ' @remarksFunction PageSync(PageObject)
   Dim oBrowser   Dim Timeout: Timeout = Timer   Set oBrowser = PageObject.GetTOProperty("Parent")' wait(5)   While oBrowser.WinObject("regexpwndclass:=msctls_progress32").Exist(3)    Wait 1    If ((Timer - Timeout) * 1000) > Setting("DefaultTimeout") Then     Reporter.ReportEvent micWarning, "Page Sync Warning1", "The Page [" & PageObject.GetTOProperty("TestObjName") & "] synchronization failed !"     Exit Function    End If   Wend
   While PageObject.Object.readyState <> "complete"    Wait 1    If ((Timer - Timeout) * 1000) > Setting("DefaultTimeout") Then     Reporter.ReportEvent micWarning, "Page Sync Warning2", "The Page [" & PageObject.GetTOProperty("TestObjName") & "] synchronization failed !"     Exit Function    End If   Wend
   Set oBrowser = Nothing
End Function
'**********************************************************************'Name: waitForPageToLoad'Description: This function waitForPageToLoad'Created by: Sash Senthil'Date: 3/18/2013'History'*********************************************************************** Function waitForPageToLoad (obj) On error resume next obj.Object.focus
 Timeout2 = Timer + 30 Do until err.number = 0 or Timer > Timeout2   wait 1   If err.number <> 0 Then    wait 1   obj.Object.focus   End If Loop
 If Timer > Timeout2 or  Err.Number <> 0 Then        Error_Handler Global_REO_ID, "waitForPageToLoad", Err.Description End If
End Function
'************** This Procedure Format's the date according to the Manual File name Convention ******************Public Function GetTimeStamp Mon = Month(Now) If Mon < 10 Then  Mon = "0"& Mon End If Da = Day(Now) If Da < 10 Then  Da = "0"& Da End If Hr = Hour(Now) If Hr < 10 Then  Hr = "0" & Hr End If Min = Minute(Now) If Min < 10 Then  Min = "0" & Min End If Sec = Second(Now) If Sec < 10 Then  Sec = "0" & Sec End If ConvertDate = Year(Now)&Mon&Da&Hr&Min&Sec   GetTimeStamp=ConvertDateEnd Function
'**********************************************************************'Name: getFormattedDate'Description: This function getFormattedDate'Created by: Sash Senthil'Date: 3/18/2013'History'***********************************************************************Function getFormattedDate(sDate)If sDate<> "" Then  strDate = CDate(sDate)  strDay = DatePart("d", strDate)  strMonth = DatePart("m", strDate)  strYear = DatePart("yyyy", strDate)  If strDay < 10 Then    strDay = "0" & strDay  End If  If strMonth < 10 Then    strMonth = "0" & strMonth  End If  getFormattedDate = strMonth& "/" & strDay  & "/" & strYear End IfEnd Function
Function GetCurrentAttachmentFromQC(ByVal FileName)   Dim CurrentTest    Dim attf   Dim attList   Dim att
 If Not QCUtil.IsConnected Then  Reporter.ReportEvent micFail, "Get Attachment from QC", "The QC connection is not available."  GetAttachmentFromQC = "" End If Set CurrentTest = QCUtil.CurrentTest  Set attf = CurrentTest.Attachments Set attList = attf.NewList("") If attList.Count > 0 Then  For i = 1 To attList.Count     Set att = attList.Item(i)     If Instr(UCase(att.FileName), UCase(FileName)) > 0 Then      att.Load True, ""      GetCurrentAttachmentFromQC = att.FileName      Exit Function     End If  Next  Reporter.ReportEvent micFail, "Get Attachment from QC", "The attachment [" & Cstr(FileName) & "] is not found."  GetCurrentAttachmentFromQC = "" Else  Reporter.ReportEvent micFail, "Get Attachment from QC", "The attachment is not found."  GetCurrentAttachmentFromQC = "" End IfEnd Function
Function Pickup_Value_ByRegExp(ByVal StringToSearch, ByVal RegExpPattern)
 Dim iCurrentList_Price, sCurrentList_Price Dim sRegExp Dim sReturnValue
 Set sRegExp = New RegExp sRegExp.Pattern = RegExpPattern Set Matches = sRegExp.Execute(StringToSearch) If Matches.Count = 0 Then  sReturnValue = "" Else  sReturnValue = Matches(0).Value End If
 Set sRegExp = Nothing Set Matches = Nothing Set Match = Nothing
 Pickup_Value_ByRegExp = sReturnValueEnd Function
Function FormatDate(ByVal Date_Value)
 Dim sMonth Dim sDay Dim sYear
 sMonth = Month(Date_Value) If sMonth < 10 Then  sMonth = "0" & sMonth End If sDay = Day(Date_Value) If sDay < 10 Then  sDay = "0" & sDay End If sYear = Year(Date_Value)
 FormatDate = sMonth & "/" & sDay & "/" & sYear
End Function
Function FormatCurrencyValue(ByVal Expression, ByVal NumDigitsAfterDecimal)
   Dim sCurrencyString
   sCurrencyString = FormatCurrency(Expression, NumDigitsAfterDecimal, 0, 0, 0)   FormatCurrencyValue = Replace(sCurrencyString, "$", "")
End Function
'------------------------------------------------------------------------------------------------------------------------------------------------------ 'Funciton Name: CreateOpenTextFile 'Function Description: This functions creates recursive folder structure and the file. Then opens the file in mode specified 'Input Parameters: FilePath (File to open),Mode(1 - Read mode, 2- Write, 8-append),Create(True - creates folder structure if not present, False - Doesnot create folders) 'Returns - The function returns TextStream object that can be used to read,write and append, similar to OpenTextFile function 'Example - CreateOpenTextFile("C:\iBAT-Temp\"&Environment("TestName")&"\test.xls",2,"True")    'Created by: Raksha 'Revision : V1 'Example - CreateOpenTextFile("C:\iBAT-\Temp\"&Environment("TestName")&"\test.xls",2,"True")   '------------------------------------------------------------------------------------------------------------------------------------------------------
Function CreateOpenTextFile(Filepath,Mode,Create) folderPath=split(Filepath,"\") Set FSO= CreateObject("Scripting.FileSystemObject")  For i=1 to UBound(folderPath)-1   If not FSO.FolderExists(folderPath(0)&"\"&folderPath(i))  Then    FSO.CreateFolder (folderPath(0)&"\"&folderPath(i))   End If   folderPath(0)=folderPath(0)&"\"&folderPath(i)  Next set CreateOpenTextFile=FSO.OpenTextFile(Filepath,Mode,Create)  If Err.Number <> 0 Then        Error_Handler Global_REO_ID, "CreateOpenTextFile", Err.Description End If End Function

''------------------------------------------------------------------------------------------------------------------------------------------------------ 'Funciton Name: RightMenuSelect 'Function Description: This function performs right click operation to select a menu from the list 'Input Parameters: menu - The object on which you right click, index - the index you want to select from right menu 'Example - RightMenuSelect obj,3  'Returns - nothing 'Created by: Raksha 'Revision : V1 'Example - RightMenuSelect obj,3 '------------------------------------------------------------------------------------------------------------------------------------------------------
Function RightMenuSelect( menu,index)    On Error Resume Next   Setting.WebPackage("ReplayType") = 2 'mouse menu.FireEvent "onclick",,,micRightBtn Set WshShell = CreateObject("WScript.Shell") For i = 1 To index WshShell.sendkeys "{DOWN}" wait(1) Next WshShell.sendkeys "{ENTER}" Set WshSEll = nothing Setting.WebPackage("ReplayType") = 1 'Events  If Err.Number <> 0 Then        Error_Handler Global_REO_ID, "RightMenuSelect", Err.Description End If End Function
'------------------------------------------------------------------------------------------------------------------------------------------------------
 'Funciton Name: RegExpTest 'Function Description: This function performs regular expression check on a string across a pattern 'Input Parameters: menu - patrn - Partn to check ex :( ^R.  ) or (6.*), strng - any string  'Returns - Yes - if matches pattern, No - If doesn't match pattern 'Example - RegExpTest("6.*", "54466787")
  'Created by: Raksha 'Revision : V1 'Example - RegExpTest("6.*", "54466787")'------------------------------------------------------------------------------------------------------------------------------------------------------Function RegExpTest(patrn, strng)    On Error Resume Next
   Dim regEx, Match, Matches   '   Set regEx = New RegExp   '   regEx.Pattern = patrn     regEx.IgnoreCase = True      regEx.Global = True      Set Matches = regEx.Execute(strng)   ' Execute search.
    If Err.Number <> 0 Then        Error_Handler Global_REO_ID, "RegExpTest", Err.Description End If 
 If Matches.count>"0" Then  RegExpTest="Yes" Else  RegExpTest="No" End If
End Function
' =============================================================' function: CompareArrays' desc : Compares the content of two arrays and checks that'        they each contain the same data, ' params : arrArray1 is the base array'          arrArray2 is the array to compare' returns : True if they contain same data, False otherwise' =============================================================Function CompareArrays(arrArray1, arrArray2) On Error Resume Next Dim intA1 Dim intA2 Dim blnMatched  ' check that the arrays are the same size If UBound(arrArray1) <> UBound(arrArray2) then  ' arrays are different size, so return false and exit function  CompareArrays = False  Exit Function End if  ' for each element in the first array For intA1 = LBound(arrArray1) to UBound(arrArray1)  ' initialise this to false  blnMatched = False   ' compare the content of the two arrays   If arrArray1 (intA1) = arrArray2 (intA1) Then    blnMatched = True   End If  ' if the element was not found in array two, return false and exit function  If Not blnMatched then    CompareArrays = False   Exit Function  End If Next ' next element in first array  ' if the function got this far, then the arrays contain the same data If Err.Number <> 0 Then        Error_Handler Global_REO_ID, "CompareArrays", Err.Description End If
 CompareArrays = True
End Function ' CompareArrays
'-----------------------------------------------------------------------------------------------
'Funciton to get date in mm/dd/yyyy format Function dateMMDDYYYY(dateInput) On Error Resume Next
 dateArray=split(dateInput,"/") If len(dateArray(0))=1 Then  dateArray(0)="0"&dateArray(0) End If If len(dateArray(1))=1 Then  dateArray(1)="0"&dateArray(1) End If
 If Err.Number <> 0 Then        Error_Handler Global_REO_ID, "dateMMDDYYYY", Err.Description End If
 dateMMDDYYYY=dateArray(0)&"/"&dateArray(1)&"/"&dateArray(2)
 End Function
'----------------------------------------------------------------------------------  'Function Name: StateNameFinder 'Function Description: This function Returns an Array for 3 variables.    'Input Parameters: STATE -- Either all CAPS or state abbreviation (ie AL, ALABAMA) 'Returns - Array with 0 yes no flag if found, Initstate (Alabama), and Alabama (AL) 'Created by: Clem 'Revision : V1 'Example - StateNameFinder("AL") 'Example - StateNameFinder("ALABAMA")Function StateNameFinder(STATE) Dim arrSTATE(3) arrSTATE(0) = "" arrSTATE(1) = "" arrSTATE(2) = ""
 StateName = UCase (Trim (STATE))
 Select Case StateName  Case "AL", "ALABAMA"   arrSTATE(0) = "Yes"   arrSTATE(1) = "Alabama"   arrSTATE(2) = "Alabama (AL)"    arrSTATE(3) = "AL"  Case "AK", "ALASKA"   arrSTATE(0) = "Yes"   arrSTATE(1) = "Alaska"   arrSTATE(2) = "Alaska (AK)"   arrSTATE(3) = "AK"  Case "AZ", "ARIZONA"   arrSTATE(0) = "Yes"   arrSTATE(1) = "Arizona"   arrSTATE(2) = "Arizona (AZ)"   arrSTATE(3) = "AZ"  Case "AR", "ARKANSAS"   arrSTATE(0) = "Yes"   arrSTATE(1) = "Arkansas"   arrSTATE(2) = "Arkansas (AR)"   arrSTATE(3) = "AR"  Case "CA", "CALIFORNIA"   arrSTATE(0) = "Yes"   arrSTATE(1) = "California"   arrSTATE(2) = "California (CA)"   arrSTATE(3) = "CA"  Case "CO", "COLORADO"   arrSTATE(0) = "Yes"   arrSTATE(1) = "Colorado"   arrSTATE(2) = "Colorado (CO)"   arrSTATE(3) = "CO"  Case "CT", "CONNECTICUT"   arrSTATE(0) = "Yes"   arrSTATE(1) = "Connecticut"   arrSTATE(2) = "Connecticut (CT)"   arrSTATE(3) = "CT"  Case "DE", "DELAWARE"   arrSTATE(0) = "Yes"   arrSTATE(1) = "Delaware"   arrSTATE(2) = "Delaware (DE)"   arrSTATE(3) = "DE"  Case "DC", "DISTRICT OF COLUMBIA"   arrSTATE(0) = "Yes"   arrSTATE(1) = "District of Columbia"   arrSTATE(2) = "District of Columbia (DC)"   arrSTATE(3) = "DC"  Case "FL", "FLORIDA"   arrSTATE(0) = "Yes"   arrSTATE(1) = "Florida"   arrSTATE(2) = "Florida (FL)"   arrSTATE(3) = "FL"  Case "GA", "GEORGIA"   arrSTATE(0) = "Yes"   arrSTATE(1) = "Georgia"   arrSTATE(2) = "Georgia (GA)"   arrSTATE(3) = "GA"  Case "GU", "GUAM"   arrSTATE(0) = "Yes"   arrSTATE(1) = "Guam"   arrSTATE(2) = "Guam (GU)"   arrSTATE(3) = "GU"  Case "HI", "HAWAII"   arrSTATE(0) = "Yes"   arrSTATE(1) = "Hawaii"   arrSTATE(2) = "Hawaii (HI)"   arrSTATE(3) = "HI"  Case "ID", "IDAHO"   arrSTATE(0) = "Yes"   arrSTATE(1) = "Idaho"   arrSTATE(2) = "Idaho (ID)"   arrSTATE(3) = "ID"  Case "IL", "ILLINOIS"   arrSTATE(0) = "Yes"   arrSTATE(1) = "Illinois"   arrSTATE(2) = "Illinois (IL)"   arrSTATE(3) = "IL"  Case "IN", "INDIANA"   arrSTATE(0) = "Yes"   arrSTATE(1) = "Indiana"   arrSTATE(2) = "Indiana (IN)"   arrSTATE(3) = "IN"  Case "IA", "IOWA"   arrSTATE(0) = "Yes"   arrSTATE(1) = "Iowa"   arrSTATE(2) = "Iowa (IA)"   arrSTATE(3) = "IA"  Case "KS", "KANSAS"   arrSTATE(0) = "Yes"   arrSTATE(1) = "Kansas"   arrSTATE(2) = "Kansas (KS)"   arrSTATE(3) = "KS"  Case "KY", "KENTUCKY"   arrSTATE(0) = "Yes"   arrSTATE(1) = "Kentucky"   arrSTATE(2) = "Kentucky (KY)"   arrSTATE(3) = "KY"  Case "LA", "LOUISIANA"   arrSTATE(0) = "Yes"   arrSTATE(1) = "Louisiana"   arrSTATE(2) = "Louisiana (LA)"   arrSTATE(3) = "LA"  Case "ME", "MAINE"    arrSTATE(0) = "Yes"   arrSTATE(1) = "Maine"   arrSTATE(2) = "Maine (ME)"   arrSTATE(3) = "ME"  Case "MD", "MARYLAND"   arrSTATE(0) = "Yes"   arrSTATE(1) = "Maryland"   arrSTATE(2) = "Maryland (MD)"   arrSTATE(3) = "MD"  Case "MA", "MASSACHUSETTS"   arrSTATE(0) = "Yes"   arrSTATE(1) = "Massachusetts"   arrSTATE(2) = "Massachusetts (MA)"   arrSTATE(3) = "MA"  Case "MI", "MICHIGAN"   arrSTATE(0) = "Yes"   arrSTATE(1) = "Michigan"   arrSTATE(2) = "Michigan (MI)"   arrSTATE(3) = "MI"  Case "MN", "MINNESOTA"   arrSTATE(0) = "Yes"       arrSTATE(1) = "Minnesota"   arrSTATE(2) = "Minnesota (MN)"   arrSTATE(3) = "MN"  Case "MS", "MISSISSIPPI"   arrSTATE(0) = "Yes"   arrSTATE(1) = "Mississippi"   arrSTATE(2) = "Mississippi (MS)"   arrSTATE(3) = "MS"  Case "MO", "MISSOURI"   arrSTATE(0) = "Yes"   arrSTATE(1) = "Missouri"   arrSTATE(2) = "Missouri (MO)"   arrSTATE(3) = "MO"  Case "MT", "MONTANA"   arrSTATE(0) = "Yes"   arrSTATE(1) = "Montana"   arrSTATE(2) = "Montana (MT)"   arrSTATE(3) = "MT"  Case "NE", "NEBRASKA"   arrSTATE(0) = "Yes"   arrSTATE(1) = "Nebraska"   arrSTATE(2) = "Nebraska (NE)"   arrSTATE(3) = "NE"  Case "NV", "NEVADA"   arrSTATE(0) = "Yes"   arrSTATE(1) = "Nevada"   arrSTATE(2) = "Nevada (NV)"   arrSTATE(3) = "NV"  Case "NH", "NEW HAMPSHIRE"   arrSTATE(0) = "Yes"   arrSTATE(1) = "New Hampshire"   arrSTATE(2) = "New Hampshire (NH)"   arrSTATE(3) = "NH"  Case "NJ", "NEW JERSEY"   arrSTATE(0) = "Yes"   arrSTATE(1) = "New Jersey"   arrSTATE(2) = "New Jersey (NJ)"   arrSTATE(3) = "NJ"  Case "NM", "NEW MEXICO"   arrSTATE(0) = "Yes"   arrSTATE(1) = "New Mexico"   arrSTATE(2) = "New Mexico (NM)"   arrSTATE(3) = "NM"  Case "NY", "NEW YORK"   arrSTATE(0) = "Yes"   arrSTATE(1) = "New York"   arrSTATE(2) = "New York (NY)"   arrSTATE(3) = "NY"  Case "NC", "NORTH CAROLINA"   arrSTATE(0) = "Yes"   arrSTATE(1) = "North Carolina"   arrSTATE(2) = "North Carolina (NC)"   arrSTATE(3) = "NC"  Case "ND", "NORTH DAKOTA"   arrSTATE(0) = "Yes"   arrSTATE(1) = "North Dakota"   arrSTATE(2) = "North Dakota (ND)"   arrSTATE(3) = "ND"  Case "OH", "OHIO"   arrSTATE(0) = "Yes"   arrSTATE(1) = "Ohio"   arrSTATE(2) = "Ohio (OH)"   arrSTATE(3) = "OH"  Case "OK", "OKLAHOMA"   arrSTATE(0) = "Yes"   arrSTATE(1) = "Oklahoma"   arrSTATE(2) = "Oklahoma (OK)"   arrSTATE(3) = "OK"  Case "OR", "OREGON"   arrSTATE(0) = "Yes"   arrSTATE(1) = "Oregon"   arrSTATE(2) = "Oregon (OR)"   arrSTATE(3) = "OR"  Case "PA", "PENNSYLVANIA"   arrSTATE(0) = "Yes"   arrSTATE(1) = "Pennsylvania"   arrSTATE(2) = "Pennsylvania (PA)"   arrSTATE(3) = "PA"  Case "PR", "PUERTO RICO"   arrSTATE(0) = "Yes"   arrSTATE(1) = "Puerto Rico"   arrSTATE(2) = "Puerto Rico (PR)"     arrSTATE(3) = "PR"  Case "RI", "RHODE ISLAND"   arrSTATE(0) = "Yes"   arrSTATE(1) = "Rhode Island"   arrSTATE(2) = "Rhode Island (RI)"   arrSTATE(3) = "RI"  Case "SC", "SOUTH CAROLINA"   arrSTATE(0) = "Yes"   arrSTATE(1) = "South Carolina"   arrSTATE(2) = "South Carolina (SC)"   arrSTATE(3) = "SC"  Case "SD", "SOUTH DAKOTA"   arrSTATE(0) = "Yes"   arrSTATE(1) = "South Dakota"   arrSTATE(2) = "South Dakota (SD)"   arrSTATE(3) = "SD"  Case "TN", "TENNESSEE"   arrSTATE(0) = "Yes"   arrSTATE(1) = "Tennessee"   arrSTATE(2) = "Tennessee (TN)"   arrSTATE(3) = "TN"  Case "TX", "TEXAS"   arrSTATE(0) = "Yes"   arrSTATE(1) = "Texas"   arrSTATE(2) = "Texas (TX)"   arrSTATE(3) = "TX"  Case "UT", "UTAH"   arrSTATE(0) = "Yes"   arrSTATE(1) = "Utah"   arrSTATE(2) = "Utah (UT)"   arrSTATE(3) = "UT"  Case "VT", "VERMONT"   arrSTATE(0) = "Yes"   arrSTATE(1) = "Vermont"   arrSTATE(2) = "Vermont (VT)"   arrSTATE(3) = "VT"  Case "VI", "VIRGIN ISLANDS"   arrSTATE(0) = "Yes"   arrSTATE(1) = "Virgin Islands"   arrSTATE(2) = "Virgin Islands (VI)"   arrSTATE(3) = "VI"  Case "VA", "VIRGINIA"   arrSTATE(0) = "Yes"   arrSTATE(1) = "Virginia"   arrSTATE(2) = "Virginia (VA)"   arrSTATE(3) = "VA"  Case "WA", "WASHINGTON"   arrSTATE(0) = "Yes"   arrSTATE(1) = "Washington"   arrSTATE(2) = "Washington (WA)"   arrSTATE(3) = "WA"  Case "WV", "WEST VIRGINIA"   arrSTATE(0) = "Yes"   arrSTATE(1) = "West Virginia"   arrSTATE(2) = "West Virginia (WV)"   arrSTATE(3) = "WV"  Case "WI", "WISCONSIN"   arrSTATE(0) = "Yes"   arrSTATE(1) = "Wisconsin"   arrSTATE(2) = "Wisconsin (WI)"   arrSTATE(3) = "WI"  Case "WY", "WYOMING"   arrSTATE(0) = "Yes"   arrSTATE(1) = "Wyoming"   arrSTATE(2) = "Wyoming (WY)"   arrSTATE(3) = "WY"  Case Else   arrSTATE(0) = "Invalid State"   arrSTATE(1) = "Invalid"   arrSTATE(2) = "Invalid"    arrSTATE(3) = "Invalid" End Select
 StateNameFinder = arrSTATE  End Function
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''* Description 'Function name : verifyFileExist 'Function description: This function is to verify if  the file exist in the C:\iBAT - Temp folder 'Parameters:  File Name & File path - C:\iBAT - Temp folder 'Return value: verifyFile_Exist - true/false 'Created By: Srikanth Reddy
Public Function verifyFileExist(FileName,FilePath)   Dim FSO   Dim fileExist fileExist = False   Set FSO = Createobject("Scripting.FileSystemObject") If FSO.FileExists(FilePath&"\"&FileName) Then   fileExist = True Else    downloadResFromQC FileName,Filepath   fileExist = Environment("downloadStatus") End If verifyFileExist = fileExistEnd Function''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''* Description 'Function name : verifyObjExist 'Function description: This function is to verify if a link or webelement exists in the screen 'Parameters: scenarioNum , Page obj = Browser().Page.Webtable(Optional) , object type(link/webelement)  'and object name(literal link/webelmt displayed on the screen) 'Created By: Srikanth Reddy
Function verifyObjExist (ScenarioNum,PgObj,objType,objName)   wait(5)   On error resume next   Dim blnFound   Dim pageObj   Dim WebElmObj   Dim WebLinkObj   blnFound = False    Set pageObj = PgObj  If lcase(objType) = "webelement" Then     Set WebElmObj = pageObj.WebElement("html tag:=TD" , "innertext:="&objName&"*.*")    If WebElmObj.exist(1) Then     blnFound = True    Else     blnFound = False    End if  Elseif lcase(objType) = "link" Then   Set WebLinkObj = pageObj.Link("html tag:=A" , "innertext:="&objName&"*.*","Index:=0")    If WebLinkObj.exist(1) Then      blnFound = True    Else     blnFound = False    End If    End If     If  blnFound = True Then     verifyObjExist = True    Else     verifyObjExist = False     End if    On error goto 0End Function''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Function ClickWebPageError()'Needs to be at WebPage error.  This is for recovery scenario ClickWebPagerError Browser("Webpage error").Page("Webpage error").Link("Try to return to equator.com").Click
 Dim Timeout2 Timeout2 = Timer + 60 Do Until Timer > Timeout2  If (NOT Browser("Workstation_1").WinObject("msctls_progress32").Exist(2)) Then   WhileExistAdv = True   Exit Do  End If  Browser("Workstation_1").WinObject("msctls_progress32").highlight Loop
End Function

'**********************************************************************'Name: findTextFromWebTable'Description: This function findTextFromWebTable'Created by: Sash Senthil'Date: 3/18/2013'History'***********************************************************************Function findTextFromWebTable(sWebTable, colNo, expectedText)rowNo = 0wait 2For row=2 to sWebTable.RowCount actualText=sWebTable.GetCellData(row,colNo) If  instr(trim(actualText), trim(expectedText)) <> 0 Then  rowNo = row  Exit For End IfNextfindTextFromWebTable = rowNoEnd Function
'**********************************************************************'Name: findTextFromWebTableAllColumn'Description: This function findTextFromWebTableAllColumn'Created by: Sash Senthil'Date: 3/25/2013'History'***********************************************************************Function findTextFromWebTableAllColumn(sWebTable, startingRow, expectedText)colNo = 0found = "false"wait 2
For rowNo = startingRow to sWebTable.RowCount For col=1 to sWebTable.ColumnCount(rowNo)-1  actualText=sWebTable.GetCellData(rowNo,col)  If  trim(actualText) = trim(expectedText)Then   colNo = col   found = "true"   Exit For  End If Next If found  = "true" Then  Exit For End If rowNo = rowNo +1NextstartingRow = rowNofindTextFromWebTableAllColumn = colNoEnd Function

'Date Fromat in MM/DD/YYYY. Move this to QTP_Commom Library
Function FormatDate(ByVal Date_Value)
 Dim sMonth Dim sDay Dim sYear
 sMonth = Month(Date_Value) If sMonth < 10 Then  sMonth = "0" & sMonth End If sDay = Day(Date_Value) If sDay < 10 Then  sDay = "0" & sDay End If sYear = Year(Date_Value)
 FormatDate = sMonth & "/" & sDay & "/" & sYear
End Function
Function CheckFileExists(FilePath)   Dim fso, oFile, strText   Set fso = CreateObject("Scripting.FileSystemObject")   If fso.FileExists(FilePath) Then  CheckFileExists = True  Else    CheckFileExists = False  End If  Set fso = Nothing'  If Err.Number <> 0 Then'  Reporter.ReportEvent micFail,"CQ TEST","CQ Test did NOT PASS"'  Call EmailFileUsingQC("", EmailForFailure, EmailForFailureSubject, EmailForFailureBody, "")'  ExitTest' End If End Function
Sub DeleteAFile(FilePath)   Dim fso, MyFile   Set fso = CreateObject("Scripting.FileSystemObject")   fso.DeleteFile FilePath,True   If Err.Number <> 0 Then  Reporter.ReportEvent micFail,"CQ TEST","CQ Test did NOT PASS"  Call EmailFileUsingQC("", EmailForFailure, EmailForFailureSubject, EmailForFailureBody, "")  ExitTest End If End Sub
Function WriteToFile(ByVal FileName, ByVal Str)   Const ForReading = 1, ForWriting = 2   Dim fso, f   Set fso = CreateObject("Scripting.FileSystemObject")   If NOT CheckFileExists(FileName) Then  Set f = fso.CreateTextFile(FileName, True)   End If   'Set f = fso.OpenTextFile(FileName, ForWriting, True)   f.WriteLine Str   Set f = fso.OpenTextFile(FileName, ForReading)   WriteLineToFile = f.ReadAllEnd Function
''' This function is used to Select a value in the weblist if the task name passed is present inside the value in the list' ' @param object  WebList Object' @param taskName task name that is present in the ' @return' @date Created 7/1/2013' @author Ravishankar P' @version 1.0' @remarksFunction instrSelectWebList(object, taskName)   Reporter.ReportEvent micDone,"START","instrSelectWebList"    Dim arrAllItems, ix
 'Split Object's all_items property    arrAllItems = Split(object.GetROProperty("all items"), ";")    For ix = LBound(arrAllItems) To UBound(arrAllItems)  If Instr(arrAllItems(ix),taskName) = 1 Then            object.Select ix            Exit Function        End If    Next Reporter.ReportEvent micFail,"instrSelectWebList","Could not select '" & taskName & "' from the weblist object"    ExitTest    Reporter.ReportEvent micDone,"END","instrSelectWebList"End Function
'================================================================================ ' Function: QTP_CaptureScreenShot' Purpose:   This function captures the screen shot' Arguments: None' Returns:  None'# Author:  Barani, Shekar for version 1'# Author:  Terry Wang for re-coding of version 2; Updated function name to prefix QTP_'@remarks remove all the original codes and use the new code to capture the screenshot with an image file; Added QTP_ prefix to name'================================================================================Function QTP_CaptureScreenshot            Call MinimizeQTPWindow   Desktop.CaptureBitmap "Screenshot.png", True   Reporter.ReportEvent micDone, "Screen Capture", "Screen Capture", "Screenshot.png"'    strStoreSnapshotMode = Setting("SnapshotReportMode")       ' Setting("SnapshotReportMode") = 0         ' Browser("index:=.*").Page("Index:=.*").Sync      ' Setting("SnapshotReportMode") = strStoreSnapshotMode End Function 
Function GetColumnNumber(ByRef WebTableObj, ByVal Text)   Reporter.ReportEvent micDone,"START","GetColumnNumber" Dim arrayColumnNames Dim sRegExp Dim bFound
 Set sRegExp = New RegExp sRegExp.Pattern = Text
 arrayColumnNames = Split(WebTableObj.GetROProperty("column names"), ";")
 For i = LBound(arrayColumnNames) To UBound(arrayColumnNames)        If Instr(arrayColumnNames(i), Text) > 0 OR sRegExp.Test(arrayColumnNames(i)) Then   iCurrentColumnNo = i + 1   Exit For  End If Next
 Set sRegExp = Nothing GetColumnNumber = iCurrentColumnNo    Reporter.ReportEvent micDone,"END","GetColumnNumber"End Function
'================================================================================ ' Function: IfObjectExists' Purpose:   Checks if the specified Object exists and Waits until the Object becomes'               available on the page.' Arguments: strQtpObj - the name of the QTP Object that you want to syncrhonize for'    iDelay - the time in seconds that you want the script to wait for the Object' Returns:  True if the function succeeds, otherwise  False'# Author:  Satya Kusuma'================================================================================Function IfObjectExists (strQtpObj, iDelay)   IfObjectExists = False Dim bExist, counter, strErrMsg     bExist = strQtpObj.Exist  counter = 1  While bExist = 0     bExist = strQtpObj.Exist(30)     counter=counter+1      If counter= iDelay then       bExist = 1      strErrMsg = strQtpObj.ToString()       strErrMsg = CStr(strErrMsg)      Reporter.ReportEvent micFail, "Synchronization Error", "The object " & strErrMsg  & " does not exist on the page"      Exit Function     End If  Wend  IfObjectExists = TrueEnd Function
Function GetDateTimeString Dim MyDate, Temp MyDate = Month(Now) &  Day(Now) & Year(Now) &"_" & Hour(Now) & Minute(Now)
 Temp = Day(Now) If Temp < 10 Then  Temp = "0" & Temp End If    MyDate = Temp Temp = MonthName(Month(Now), True)' If Temp < 10 Then'  Temp = "0" & Temp' End If
 MyDate = MyDate & Temp & Year(Now) & "_"
 Temp = Hour(Now) If Temp < 10 Then  Temp = "0" & Temp End If MyDate = MyDate & Temp Temp = Minute(Now) If Temp < 10 Then  Temp = "0" & Temp End If
 MyDate = MyDate & Temp
 GetDateTimeString = MyDateEnd Function
''' Provide QTP webtable object with the capability to set the cell with the value for different controls embedded in the webtable. 'If you need to input the value for the specific control and index, you could use the extended function 'SetCellDataEx'.' @param WebTableObject - The mandatory object required by QTP which refers to the webtable itself.' @param Row - Row number' @param Column - Column number' @param Value - The value to set ' @return N/A' @date Created Date:01/14/2014 ' @author Terry Wang' @version 1.0 ' @remarksFunction SetCellData(ByRef WebTableObject, ByVal Row, ByVal Column, ByVal Value)
 Dim iRow, iCol Dim sControlType
 iRow = WebTableObject.GetROProperty("rows")     If Row < 1 OR Row > iRow Then  EQ_ErrorHandler "SetCellData Failed: Incorrect Parameter 'Row' (" & Row & ") ! The WebTable [" & WebTableObject.GetTOProperty("TestObjName") & "] has " & iRow & " rows." Else  iCol = WebTableObject.ColumnCount(Row)  If Column < 1 OR Column > iCol Then   EQ_ErrorHandler "SetCellData Failed: Incorrect Parameter 'Column' (" & Column & ") ! The WebTable [" & WebTableObject.GetTOProperty("TestObjName") & "] has " & iCol & " columns for Row " & Row & "."  End If End If
 Select Case True  Case (WebTableObject.ChildItemCount(Row, Column, "WebList") = 1) sControlType = "WebList"  Case (WebTableObject.ChildItemCount(Row, Column, "WebEdit") = 1) sControlType = "WebEdit"  Case (WebTableObject.ChildItemCount(Row, Column, "WebCheckBox") = 1) sControlType = "WebCheckBox"  Case (WebTableObject.ChildItemCount(Row, Column, "WebRadioGroup") = 1) sControlType = "WebRadioGroup"  Case Else   EQ_ErrorHandler "SetCellData Failed: The operation is not supported to input value for Row " & Row & " and Column " & Column & " within WebTable [" & WebTableObject.GetTOProperty("TestObjName") & "] !" End Select
 SetCellDataEx WebTableObject, Row, Column, sControlType, 0, Value 
End Function
''' Provide QTP webtable object with the EXTENDED capability to set the cell with the value for different controls with specific index embedded in the webtable. ' @param WebTableObject - The mandatory object required by QTP which refers to the webtable itself.' @param Row - Row number' @param Column - Column number' @param ControlType - The types of control embedded in the webtable' @param Index - The control index if there are more than ONE controls embedded in the webtable' @param Value - The value to set ' @return N/A' @date Created Date:01/14/2014 ' @author Terry Wang' @version 1.0 ' @remarksFunction SetCellDataEx(ByRef WebTableObject, ByVal Row, ByVal Column, ByVal ControlType, ByVal Index, ByVal Value)
 Dim iRow, iCol
 iRow = WebTableObject.GetROProperty("rows")     If Row < 1 OR Row > iRow Then  EQ_ErrorHandler "SetCellDataEx Failed: Incorrect Parameter 'Row' (" & Row & ") ! The WebTable [" & WebTableObject.GetTOProperty("TestObjName") & "] has " & iRow & " rows." Else  iCol = WebTableObject.ColumnCount(Row)  If Column < 1 OR Column > iCol Then   EQ_ErrorHandler "SetCellDataEx Failed: Incorrect Parameter 'Column' (" & Column & ") ! The WebTable [" & WebTableObject.GetTOProperty("TestObjName") & "] has " & iCol & " columns for Row " & Row & "."  End If End If
 Select Case True  Case (WebTableObject.ChildItemCount(Row, Column, ControlType) = 0)   EQ_ErrorHandler "SetCellDataEx Failed: Incorrect Parameter 'ControlType' ! There is no " & ControlType & " in Row " & Row & " and Column " & Column & " within WebTable [" & WebTableObject.GetTOProperty("TestObjName") & "]."  Case (WebTableObject.ChildItemCount(Row, Column, ControlType) < Index)   EQ_ErrorHandler "SetCellDataEx Failed: Incorrect Parameter 'Index' ! There is less " & ControlType & " in Row " & Row & " and Column " & Column & " within WebTable [" & WebTableObject.GetTOProperty("TestObjName") & "]." End Select
 Select Case UCase(ControlType)  Case "WEBLIST" WebTableObject.ChildItem(Row, Column, ControlType, Index).Select Value  Case "WEBEDIT" WebTableObject.ChildItem(Row, Column, ControlType, Index).Set Value  Case "WEBCHECKBOX" WebTableObject.ChildItem(Row, Column, ControlType, Index).Set Value  Case "WEBRADIOGROUP" WebTableObject.ChildItem(Row, Column, ControlType, Index).Select Value  Case Else   EQ_ErrorHandler "SetCellDataEx Failed: The operation of [" & ControlType & "] is not supported to input value for Row " & Row & " and Column " & Column & " within WebTable [" & WebTableObject.GetTOProperty("TestObjName") & "] !" End Select
End Function
'-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- 'Function Name : WhileExistAdv 'Description: This function is useful to sync/wait until the current operation completes by verifying browser status bar 'Input Parameters:  Object for which it should sync, it  could be Workstation/Agent/Vendor 'Returns: Nothing 'Example: WhileExistAdv ((Browser("Vendor").WinStatusBar("msctls_progress32")))'------------------------------------------------------------------------------------------------------------------------------------------------------Function WhileExistAdv (WoObj)    Reporter.ReportEvent micDone,"START","WhileExistAdv" Dim Timeout2 Timeout2 = Timer + 60 Do Until Timer > Timeout2  If (NOT WoObj.Exist(2)) Then   WhileExistAdv = True   Exit Do  End If  WoObj.highlight Loop Reporter.ReportEvent micDone,"END","WhileExistAdv"End Function
''' This Sub is used to Load the specified sheet into the run time data table' ' @param file_path Path of the Excel file to load' @param sheet_name Name of the excel work sheet to load' @date Created 6/14/2013 Modified' @author Ravishankar P  ' @version 1.0 ' @remarks 
Sub load_sheet(file_path,sheet_name)
 'Reporter.ReportEvent micDone, "load_sheet", "Started for File:" & file_path & " and Sheet Name:" & sheet_name DataTable.AddSheet (sheet_name) DataTable.ImportSheet file_path,sheet_name,sheet_name 'Reporter.ReportEvent micDone, "load_sheet", "Ended for File:" & file_path & " and Sheet Name:" & sheet_name
End Sub
''' This Sub is used to navigate to the specific row in the run time data table based on the cell value in a particular column' ' @param sheet_name Name of the excel work sheet to search' @param column_name Name of the column to search' @param cell_value value to search in the specified column' @date Created 6/14/2013 Modified' @author Ravishankar P  ' @version 1.0 ' @remarks
Sub find_row(sheet_name,column_name,cell_value)
 'Reporter.ReportEvent micDone, "find_row", "Started for Sheet Name:" & sheet_name & ", Column Name:" & column_name & " and Cell Value:" & cell_value Dim max_row,rowfound,rc max_row = DataTable.GetSheet(sheet_name).Getrowcount rowfound=0 'Loop through the rows and look for a match in the specified column For rc=1 to max_row  DataTable.getSheet(sheet_name).SetCurrentRow(rc)  If lcase(Trim(DataTable.Value(column_name,sheet_name))) = lcase(Trim(cell_value)) Then   rowfound = 1   Exit For  End If Next 'If no match is found write to the error log and call ExitTest If rowfound = 0 Then  Reporter.ReportEvent micFail, "find_row Sub", "Could not find row in data sheet" & VBNewline & _  "Sheet Name : " & sheet_name & VBNewline & _  "Column name : " & column_name & VBNewline & _  "Cell Value : " & cell_value  ExitTest End If 'Reporter.ReportEvent micDone, "find_row", "Ended for Sheet Name:" & sheet_name & ", Column Name:" & column_name & " and Cell Value:" & cell_value
End Sub
''' This function is used to get the data from the current row of a specified file and sheet and store it in a data dictionay object as name value pairs. ' The name is the name of the column and the value is the value in the field' @param input_file_path The path for the input file' @param sheet_name Name of the sheet to get the data from' @param column_name Name of the column to search for' @param field_value value of the field to search for' @return data dictionay object' @date Created 6/14/2013 Modified' @author Ravishankar P  ' @version 1.0 ' @remarks
Function getData(input_file_path,sheet_name,column_name,field_value)
 'Reporter.ReportEvent micDone, "getData", "Started for File:" & input_file_path & " Sheet Name:" & sheet_name & " Column_name:" & column_name & " Field_value:" & field_value
 Set getData = CreateObject("Scripting.Dictionary")
 Dim current_column Call load_sheet(input_file_path,sheet_name) Call find_row(sheet_name,column_name,field_value)
 'Load the column names and values into the Data Dictionary Object as Name value pair For current_column = 1 to DataTable.GetSheet(sheet_name).GetParameterCount  getData.Add Trim(DataTable.GetSheet(sheet_name).GetParameter(current_column).Name),Trim(DataTable.Value(current_column,sheet_name)) Next
' Reporter.ReportEvent micDone, "getData", "Ended for File:" & input_file_path & " Sheet Name:" & sheet_name & " Column_name:" & column_name & " Field_value:" & field_value
End function
''' This function is used to get the data from the current row of a specified file and sheet and store it in a data dictionay object as name value pairs. ' @param sheet_name Name of the sheet to get the data from' @param current_row Row number to set as current row' @return data dictionay object' @date Created 3/14/2014 Modified' @author Ravishankar P  ' @version 1.0 ' @remarks
Function getDataByRowNumber(sheet_name,current_row)
 Reporter.ReportEvent micDone, "getDataByRowNumber", "Started for Sheet Name: " & sheet_name & " Row: " & current_row
 Set getDataByRowNumber = CreateObject("Scripting.Dictionary")
 Dim current_column DataTable.GetSheet(sheet_name).SetCurrentRow(current_row) 'Load the column names and values into the Data Dictionary Object as Name value pair For current_column = 1 to DataTable.GetSheet(sheet_name).GetParameterCount  getDataByRowNumber.Add Trim(DataTable.GetSheet(sheet_name).GetParameter(current_column).Name),Trim(DataTable.Value(current_column,sheet_name)) Next
 Reporter.ReportEvent micDone, "getDataByRowNumber", "Ended for Sheet Name:" & sheet_name & " Row: " & current_row
End function
''' This function is used to get a Two dimensional array by passing a string and two delimiters as inputs'' @param parentString  The string that needs to be converted two a two dimensional array' @param firstDelimiter  The first delimiter in the string' @param secondDelimiter The second delimiter in the string' @return Two Dimensional array' @date Created 7/10/2013 Modified' @author Ravishankar P  ' @version 1.0 ' @remarks Example : exampleArray = getTwoDimensionalArray("5 - Animal at Property;reject,6 - Unable to Access Property;reject,4 - Environmental Issues;accept",";",",")
Public Function getTwoDimensionalArray(ByVal parentString,ByVal firstDelimiter,ByVal secondDelimiter)
  Dim array1,k,arrayItem,array2 array1 = Split(parentString,secondDelimiter)  ReDim  array3(UBound(array1),1)  k=0 For each arrayItem in array1    array2 = Split(arrayItem,firstDelimiter)  array3(k,0) = Trim(array2(0))  array3(k,1) = Trim(array2(1))  k = k+1  Next
 getTwoDimensionalArray = array3
End Function
''' This function is used to load the Recovery Scenario' @param' @date Created 2/26/2014 Modified ' @author Ravishankar P  ' @version 1.0 ' @remarks
Public Function loadRecoveryScenario()  Reporter.ReportEvent micDone,"START","loadRecoveryScenario" Dim qtApp,qtTestRecovery,intIndex
 Set qtApp = CreateObject("QuickTest.Application") Set qtTestRecovery = qtApp.Test.Settings.Recovery 
 If qtTestRecovery.Count > 0 Then   qtTestRecovery.RemoveAll End If
 qtTestRecovery.Add "[QualityCenter\Resources] Resources\Common - Credit UAT\Recovery Scenario\RecoveryScenario.qrs", "ErrorHandlingScenario",1
 For intIndex = 1 To qtTestRecovery.Count   qtTestRecovery.Item(intIndex).Enabled = True Next
 qtTestRecovery.Enabled =  True qtTestRecovery.SetActivationMode "OnError"
 Set qtApp = Nothing Set qtTestRecovery = Nothing Reporter.ReportEvent micDone,"END","loadRecoveryScenario"  End Function''' This function is simulates tab action' @param' @date Created 3/3/14' @author Raksha' @version 1.0 ' @remarksFunction WshShellTab
 Dim WshShell   Set WshShell = CreateObject("WScript.Shell")  wait 2  WshShell.SendKeys "{TAB}"  wait 2  Set WshShell = Nothing End Function
Function QTP_GetStateName(stateAbbrv)'*********************************************************************************************************************' DESCRIPTION' Retrieves the state name for a given two letter abbreviation'PARAMETERS'state code'RETURNED VALUE' state name'*********************************************************************************************************************Select Case uCase(stateAbbrv) Case "AK" stateName = "ALASKA" Case "AL" stateName = "ALABAMA" Case "AR" stateName = "ARKANSAS" Case "AZ" stateName = "ARIZONA" Case "CA" stateName = "CALIFORNIA" Case "CO" stateName = "COLORADO" Case "CT" stateName = "CONNECTICUT" Case "DC" stateName = "DISTRICT OF COLUMBIA" Case "DE" stateName = "DELAWARE" Case "FL" stateName = "FLORIDA" Case "GA" stateName = "GEORGIA" Case "GU" stateName = "GUAM" Case "HI" stateName = "HAWAII" Case "IA" stateName = "IOWA" Case "ID" stateName = "IDAHO" Case "IL" stateName = "ILLINOIS" Case "IN" stateName = "INDIANA" Case "KS" stateName = "KANSAS" Case "KY" stateName = "KENTUCKY" Case "LA" stateName = "LOUISIANA" Case "MA" stateName = "MASSACHUSETTS" Case "MD" stateName = "MARYLAND" Case "ME" stateName = "MAINE" Case "MI" stateName = "MICHIGAN" Case "MN" stateName = "MINNESOTA" Case "MO" stateName = "MISSOURI" Case "MS" stateName = "MISSISSIPPI" Case "MT" stateName = "MONTANA" Case "NC" stateName = "NORTH CAROLINA" Case "ND" stateName = "NORTH DAKOTA" Case "NE" stateName = "NEBRASKA" Case "NH" stateName = "NEW HAMPSHIRE" Case "NJ" stateName = "NEW JERSEY" Case "NM" stateName = "NEW MEXICO" Case "NV" stateName = "NEVADA" Case "NY" stateName = "NEW YORK" Case "OH" stateName = "OHIO" Case "OK" stateName = "OKLAHOMA" Case "OR" stateName = "OREGON" Case "PA" stateName = "PENNSYLVANIA" Case "PR" stateName = "PUERTO RICO" Case "RI" stateName = "RHODE ISLAND" Case "SC" stateName = "SOUTH CAROLINA" Case "SD" stateName = "SOUTH DAKOTA" Case "TN" stateName = "TENNESSEE" Case "TX" stateName = "TEXAS" Case "UT" stateName = "UTAH" Case "VA" stateName = "VIRGINIA" Case "VI" stateName = "VIRGIN ISLANDS" Case "VT" stateName = "VERMONT" Case "WA" stateName = "WASHINGTON" Case "WI" stateName = "WISCONSIN" Case "WV" stateName = "WEST VIRGINIA" Case "WY" stateName = "WYOMING"End Select
QTP_GetStateName = stateName
End Function
'*********************************************************************************************************************'Name: MinimizeQTPWindow'Description: Minimize QTP window'Created by: Raksha'Date: 3/13/2014'History'*********************************************************************************************************************Function MinimizeQTPWindow ()    Set     qtApp = getObject("","QuickTest.Application")    qtApp.WindowState = "Minimized"    Set qtApp = NothingEnd Function
Function CreditUAT_GetEnvironment(ByVal execConfigFile) Dim testSetPath, XLSWorksheetName ' If running Local  - return empty sting Set CurrentTestSet = QCUtil.CurrentTestSet If CurrentTestSet is Nothing Then  testSetPath = "DEFAULT" Else  Set TSFolder = CurrentTestSet.TestSetFolder  folder_name = TSFolder.Name  testSetPath = TSFolder.Name  While(folder_name <> "Root" and folder_name <> Empty )   Set TSFolder = TSFolder.Father   folder_name = TSFolder.Name   If folder_name <> "Root" Then    TestSetPath = folder_name & "\" & TestSetPath   End If  WEnd End If
 tempExecConfigFile = QTP_copyFileToTempFolder(execConfigFile) XLSWorksheetName = "Sheet1"
  If testSetPath <> "" Then  Set Con = CreateObject("ADODB.Connection")  Set Rs =  CreateObject("ADODB.RecordSet")  Con.ConnectionString = "Driver={Microsoft Excel Driver (*.xls)};DBQ=" & tempExecConfigFile  Con.Open  'Rs.Open "Select ENVIRONMENT,TestSetFolderPath  FROM ExecutionConfig where TestSetFolderPath = '" & testSetPath & "'", Con  Rs.Open "SELECT ENVIRONMENT,TestSetFolderPath FROM [" & XLSWorksheetName & "$] WHERE TestSetFolderPath = '" & testSetPath & "'", Con  If Rs.BOF <> True then   Rs.MoveFirst   CreditUAT_GetEnvironment =  Rs(0).Value  Else     Rs.Close   'Rs.Open "Select ENVIRONMENT,TestSetFolderPath  FROM ExecutionConfig where TestSetFolderPath = 'DEFAULT'", Con   Rs.Open "SELECT ENVIRONMENT,TestSetFolderPath FROM [" & XLSWorksheetName & "$] WHERE TestSetFolderPath = 'DEFAULT'", Con   Rs.MoveFirst   CreditUAT_GetEnvironment =  Rs(0).Value   End If End If
End Function
''' This function is used to Maximize Browser' @param Object  Browser Object' @date Created 4/3/14' @author Ravi P' @version 1.0 ' @remarks
Function QTP_BrowserMaximize(Object)
' Dim hWnd' ' hWnd=Object.GetROProperty("hwnd")' ' hWnd = Browser("hwnd:=" & hWnd).Object.hWnd' ' Window("hwnd:=" & hWnd).Activate' ' Window("hwnd:=" & hWnd).Maximize Dim WshShell Set WshShell = CreateObject("WScript.Shell") WshShell.SendKeys "%( )" wait(1) WshShell.SendKeys "x" Set WshShell = Nothing End Function
Function QTP_scrolltoEnd()
 Dim WshShell Set WshShell = CreateObject("WScript.Shell") WshShell.SendKeys "{END}" Set WshShell = Nothing
End Function
Function QTP_pageDown()
 Dim WshShell Set WshShell = CreateObject("WScript.Shell") WshShell.SendKeys "{PGDN}" Set WshShell = Nothing
End Function
Function QTP_pageUp()
 Dim WshShell Set WshShell = CreateObject("WScript.Shell") WshShell.SendKeys "{PGUP}" Set WshShell = Nothing
End Function
''' This function returns the current date in the MM/DD/YYYY format'  @param ' @return' @author Anbu' @version 1.0' @date 3/26/14' @remarksFunction QTP_getFormattedDate strDate = Now strDay = DatePart("d", strDate) strMonth = DatePart("m", strDate) strYear = DatePart("yyyy", strDate) If strDay < 10 Then strDay = "0" & strDay End If If strMonth < 10 Then strMonth = "0" & strMonth End If QTP_getFormattedDate = strMonth& "/" & strDay  & "/" & strYear End Function
''' This function returns the current date in the MM/DD/YYYY format'  @param ' @return' @author Anbu' @version 1.0' @date 3/26/14' @remarks updated 4/2/2015 Swathi G interchanged if - else if condition for UFT 12. load library for UFT 11 and 12Function QTP_LoadFunctionLibrary(ByVal LibraryFile) If Instr(Environment.Value("ProductVer"), "10.") > 0 Then  ExecuteFile LibraryFile Else  LoadFunctionLibrary LibraryFile End IfEnd Function
''' This function is used to get the data from the current row of a specified file and sheet and store it in a data dictionay object as name value pairs.'This function uses EXCEL OBJECT' The name is the name of the column and the value is the value in the field' ' @param inputFile The path for the input file' @param sheetName Name of the sheet to get the data from' @param columnName Name of the column to search for' @param fieldValue value of the field to search for' @return data dictionay object' @date Created 8/29/2014 Modified' @author Ravishankar P  ' @version 1.0 ' @remarks
Function getDataByExcel(inputFile,sheetName,columnName,fieldValue)
 Dim objExcel, objWorkbook, objSheet Dim columnFound,rowFound, maxColumns, currentcolumn Dim maxRows, currentRow, columns  Set objExcel = CreateObject("Excel.Application")  Set objWorkbook = objExcel.Workbooks.Open (inputFile) Set objSheet = objWorkbook.Worksheets(sheetName) objExcel.DisplayAlerts = False Set getDataByExcel = CreateObject("Scripting.Dictionary")
 columnFound = 0 rowFound = 0 maxColumns = objSheet.UsedRange.columns.Count 'Find the column For currentcolumn = 1 to maxColumns  If Trim(objSheet.cells(1,currentcolumn)) = columnName Then   columnFound = 1   Exit For  End If Next If columnFound = 0 Then  Reporter.ReportEvent micFail, "getDataByExcel", "Could not find column in data sheet" & VBNewline & _  "Sheet Name : " & sheetName & VBNewline & _  "Column name : " & columnName & VBNewline & _  "Cell Value : " & fieldValue  ExitTest End If
 maxRows = objSheet.usedrange.rows.count 'Find the row For currentRow = 2 to maxRows  If Trim(objSheet.cells(currentRow,currentcolumn)) = fieldValue Then   rowFound = 1   Exit For  End If Next If rowFound = 0 Then  Reporter.ReportEvent micFail, "getDataByExcel", "Could not find row in data sheet" & VBNewline & _  "Sheet Name : " & sheetName & VBNewline & _  "Column name : " & columnName & VBNewline & _  "Cell Value : " & fieldValue  ExitTest End If
 'Load the column names and values into the Data Dictionary Object as Name value pair For columns = 1 to maxColumns  getDataByExcel.Add Trim(objSheet.cells(1,columns)),Trim(objSheet.cells(currentRow,columns)) Next  objWorkbook.Close    objExcel.Quit Set objSheet = Nothing Set objWorkbook = Nothing Set objExcel = Nothing
End function
''' This function is used to get the data from the current row of a specified file and sheet and store it in a data dictionay object as name value pairs.'This function uses EXCEL OBJECT' @param inputFile The path for the input file' @param sheetName Name of the sheet to get the data from' @param currentRow Row number to set as current row' @return data dictionay object' @date Created 8/29/2014 Modified' @author Ravishankar P  ' @version 1.0 ' @remarks
Function getDataByRowNumberByExcel(inputFile,sheetName,currentRow)
 Dim objExcel, objWorkbook, objSheet Dim maxColumns, columns
 Set objExcel = CreateObject("Excel.Application")  Set objWorkbook = objExcel.Workbooks.Open (inputFile) Set objSheet = objWorkbook.Worksheets(sheetName) objExcel.DisplayAlerts = False Set getDataByRowNumberByExcel = CreateObject("Scripting.Dictionary")
 maxColumns = objSheet.UsedRange.columns.Count  'Load the column names and values into the Data Dictionary Object as Name value pair For columns = 1 to maxColumns  getDataByRowNumberByExcel.Add Trim(objSheet.cells(1,columns)),Trim(objSheet.cells(currentRow,columns)) Next
 objWorkbook.Close objExcel.Quit Set objSheet = Nothing Set objWorkbook = Nothing Set objExcel = Nothing
End function
''' This function returns the current  host name'  @param ' @return' @author Anbu' @version 1.0' @date 3/26/14' @remarksFunction QTP_GetHostName   Set WshNetwork = CreateObject("WScript.Network")   QTP_GetHostName = UCase(WshNetwork.ComputerName)End Function
Function QTP_GetDateTimeString Dim MyDate, Temp MyDate = Month(Now) &  Day(Now) & Year(Now) &"_" & Hour(Now) & Minute(Now) & Second(Now)
 Temp = Day(Now) If Temp < 10 Then  Temp = "0" & Temp End If    MyDate = Temp Temp = MonthName(Month(Now), True)' If Temp < 10 Then'  Temp = "0" & Temp' End If
 MyDate = MyDate & Temp & Year(Now) & "_"
 Temp = Hour(Now) If Temp < 10 Then  Temp = "0" & Temp End If MyDate = MyDate & Temp Temp = Minute(Now) If Temp < 10 Then  Temp = "0" & Temp End If MyDate = MyDate & Temp Temp = Second(Now) If Temp < 10 Then  Temp = "0" & Temp End If MyDate = MyDate & Temp  QTP_GetDateTimeString = MyDateEnd Function
' This Fucntion will select a random item from a given listbox. It also reports any error occured in performing the operation and exits the test case execution' @param Object reference of the list box.' @return NA.' @date Created 8/8/2014 Modified' @author Naresh Jayaseelan' @version 1.0 ' @remarks function QTP_SelectRandomItemFromListbox(listObj) Dim MyValue If listObj.exist and listObj.getroproperty("disabled")=0 Then   ltemCount = listObj.GetROProperty("items count")   If ltemCount -1 >0 Then    Randomize   ' Initialize random-number generator.    MyValue = Int((ltemCount-1 * Rnd))   ' Generate random value between 1 and 6.    listObj.select "#"&MyValue    selectedItem=listObj.getroproperty("selection")    Reporter.ReportEvent micPass,"Listbox :- "& listObj.getroproperty("name") & ", selection action success.","selected item was :- " & selectedItem   else    Reporter.ReportEvent micFail,"Listbox :- "& listObj.getroproperty("name") &", selection action failed.", "There were no item to select."    If Err.Number <> 0 Then     Reporter.ReportEvent micFail,"SelectRandomItemFromListbox","",Err.Description    Else     Reporter.ReportEvent micDone,"END","SelectRandomItemFromListbox"    End If    ExitTest   End IF  else   Reporter.ReportEvent micFail,"Listbox :- "& listObj.getroproperty("name") &", selection action failed.","List box was either disabled or not present in the page."   If Err.Number <> 0 Then    Reporter.ReportEvent micFail,"SelectRandomItemFromListbox","",Err.Description   Else    Reporter.ReportEvent micDone,"END","SelectRandomItemFromListbox"   End If   ExitTest End IfEnd Function
' This Fucntion will select a radiobutton from a given radiobutton object. It also reports any error occured in performing the operation and exits the test case execution' @param Object reference of the radiobox, RadioButtonToBeSelected' @return NA.' @date Created 8/8/2014 Modified' @author Naresh Jayaseelan' @version 1.0 ' @remarks 
function QTP_SelectRadioButton (listObj,RadioButtonToBeSelected)   listFlag=false If listObj.exist and listObj.getroproperty("disabled")=0 Then   ltemCount = listObj.GetROProperty("items count")               If ltemCount -1 >= 0 Then    Itemlist=listObj.getroproperty("all items")    ItemArr=split(Itemlist,";")    For each intItem in ItemArr     If Trim(Ucase(intItem))=Trim(Ucase(RadioButtonToBeSelected)) Then      listObj.select RadioButtonToBeSelected      selectedRadioButton=listObj.getroproperty("value")      Reporter.ReportEvent micPass,"RadioButton :- "& listObj.getroproperty("name") & ", selection action success.","selected item was :- " & selectedRadioButton      listFlag=true      Exit for     End If    Next    If listFlag=false Then     Reporter.ReportEvent micPass,"RadioButton :- "& listObj.getroproperty("name") & ", selection action failed.","The Item to be selected:- " & RadioButtonToBeSelected & "was not found in the listbox."     If Err.Number <> 0 Then      Reporter.ReportEvent micFail,"SelectRadioButton","",Err.Description     Else      Reporter.ReportEvent micDone,"END","SelectRadioButton"     End If     ExitTest    End If
   else    Reporter.ReportEvent micFail,"RadioButton :- "& listObj.getroproperty("name") &", selection action failed.", "no radiobutton option was there to select"    If Err.Number <> 0 Then     Reporter.ReportEvent micFail,"SelectRadioButton","",Err.Description    Else     Reporter.ReportEvent micDone,"END","SelectRadioButton"    End If    ExitTest   End IF  else   Reporter.ReportEvent micFail,"RadioButton :- "& listObj.getroproperty("name") &", selection action failed.","List box was either disabled or not present in the page."   If Err.Number <> 0 Then    Reporter.ReportEvent micFail,"SelectRadioButton","",Err.Description   Else    Reporter.ReportEvent micDone,"END","SelectRadioButton"   End If   ExitTest End IfEnd Function
' This Fucntion will select a given item  from a given listbox object. It also reports any error occured in performing the operation and exits the test case execution' @param Object reference of the listbox, ItemToBeSelected' @return NA.' @date Created 8/11/2014 Modified' @author Naresh Jayaseelan' @version 1.0 ' @remarks 
function QTP_SelecttemFromListbox (listObj,ItemToBeSelected)   listFlag=false If listObj.exist and listObj.getroproperty("disabled")=0 Then   ltemCount = listObj.GetROProperty("items count")               If ltemCount -1 >= 0 Then    Itemlist=listObj.getroproperty("all items")    ItemArr=split(Itemlist,";")    For each intItem in ItemArr     If Trim(Ucase(intItem))=Trim(Ucase(ItemToBeSelected)) Then      listObj.select ItemToBeSelected      selectedItem=listObj.getroproperty("selection")      Reporter.ReportEvent micPass,"Listbox :- "& listObj.getroproperty("name") & ", selection action success.","selected item was :- " & selectedItem      listFlag=true      Exit for     End If    Next    If listFlag=false Then     Reporter.ReportEvent micFail,"Listbox :- "& listObj.getroproperty("name") & ", selection action failed.","The Item to be selected:- " & ItemToBeSelected & "was not found in the listbox."     If Err.Number <> 0 Then      Reporter.ReportEvent micFail,"SelecttemFromListbox","",Err.Description     Else      Reporter.ReportEvent micDone,"END","SelecttemFromListbox"     End If    End If
   else    Reporter.ReportEvent micFail,"Selection of Module listbox", "no item was there to select"    If Err.Number <> 0 Then     Reporter.ReportEvent micFail,"SelecttemFromListbox","",Err.Description    Else     Reporter.ReportEvent micDone,"END","SelecttemFromListbox"    End If    ExitTest   End IF  else   Reporter.ReportEvent micFail,"Listbox :- "& listObj.getroproperty("name") &", selection action failed.","List box was either disabled or not present in the page."   If Err.Number <> 0 Then    Reporter.ReportEvent micFail,"SelecttemFromListbox","",Err.Description   Else    Reporter.ReportEvent micDone,"END","SelecttemFromListbox"   End If   ExitTest End IfEnd Function
' This Fucntion will enter a given value  into a given editbox object. It also reports any error occured in performing the operation and exits the test case execution' @param Object reference of the editbox, valueToBeSelected' @return NA.' @date Created 8/11/2014 Modified' @author Naresh Jayaseelan' @version 1.0 ' @remarks 
function QTP_EnterEditBox (listObj,valueToBeSelected) listFlag=false If listObj.exist and listObj.getroproperty("disabled")=0 Then  listObj.set valueToBeSelected  enterValue=replace(listObj.getroproperty("value"),".00","")  If Trim(Ucase(enterValue))=Trim(Ucase(valueToBeSelected)) Then   Reporter.ReportEvent micPass,"EditBox :- "& listObj.getroproperty("name") & ", enter action success.","Entered value was :- " & valueToBeSelected  Else   Reporter.ReportEvent micFail,"EditBox :- "& listObj.getroproperty("name") & ", enter action failed.","The value:- " & valueToBeSelected & "was not entered in the editbox.."   If Err.Number <> 0 Then    Reporter.ReportEvent micFail,"EnterEditBox","",Err.Description   Else    Reporter.ReportEvent micDone,"END","EnterEditBox"   End If  End If Else   Reporter.ReportEvent micFail,"EditBox :- "& listObj.getroproperty("name") &", selection action failed.","Editbox was either disabled or not present in the page."   If Err.Number <> 0 Then    Reporter.ReportEvent micFail,"EnterEditBox","",Err.Description   Else    Reporter.ReportEvent micDone,"END","EnterEditBox"   End If   ExitTest End IfEnd Function
'''This function executes a .sql file on the DB' @param pathForFile Path of the .sql file' @param dbName Name of the Service' @return' @date Created 09/24/2014' @author RaviShankar P' @version 1.0' @remarks
Function QTP_executeSqlFile(ByVal dbName,ByVal pathForFile)
 Reporter.ReportEvent micDone,"START","QTP_executeSqlFile"  Dim fs, sqlFile, txtStream, sqlStr, objConn, connStr
 Set objConn = CreateObject("ADODB.Connection") Set fs = CreateObject("Scripting.FileSystemObject") Set sqlFile = fs.GetFile(pathForFile) Set txtStream = sqlFile.OpenAsTextStream(1,0) connStr = "DRIVER={Microsoft ODBC for Oracle};Server=" + dbName + ";Uid=" + GLOBAL_SHARED_ID + ";Pwd=" + GLOBAL_SHARED_ID_PWD_DB + ";" objConn.ConnectionString = connStr
 objConn.Open sqlStr = txtStream.ReadAll
 objConn.BeginTrans objConn.Execute(sqlStr) If objConn.Errors.Count > 0 Then  Reporter.ReportEvent micFail, "QTP_executeSqlFile", "Rolling back Transactions because of errors"  objConn.RollbackTrans Else  objConn.CommitTrans  Reporter.ReportEvent micPass, "QTP_executeSqlFile", "committed the Transactions" End If  Set txtStream = Nothing Set sqlFile = Nothing Set fs = Nothing Set objConn = Nothing   If Err.Number <> 0 Then  Reporter.ReportEvent micFail, "QTP_executeSqlFile", "" & Err.Description Else  Reporter.ReportEvent micDone,"END","QTP_executeSqlFile" End If
End Function
'''This function will check if a page is not present' @param pageObject  The Page that should not be present' @param timeout  Time (in Seconds) to wait for the page to disappear. Example: 60  ' @date Created 9/26/2014 Modified' @author Ravishankar P  ' @version 1.0 ' @remarks
Function QTP_checkPageNotPresent(ByVal pageObject, ByVal timeout)
 Reporter.ReportEvent micDone,"START","QTP_checkPageNotPresent"  Dim counter counter = 0
 Do While  pageObject.Exist(1)   wait(1)   counter = counter+1   If counter = timeout Then    Reporter.ReportEvent micFail,"QTP_checkPageNotPresent","Page is Present - waited for " & timeout & " secs"    Exit Do   End If Loop
 If Err.Number <> 0 Then  Reporter.ReportEvent micFail,"QTP_checkPageNotPresent","" & Err.Description Else  Reporter.ReportEvent micDone,"END","QTP_checkPageNotPresent" End If
End Function
''' This function is used to copy any file to the temp folder. After copying, It returns the file path in the temp folder' @param filePath  Path to the Source file' @date Created Date: 10/02/2014' @return File path in the temp folder' @author  Ravi P' @version 1.0 ' @remarks
Function QTP_copyFileToTempFolder(ByVal filePath)
   Reporter.ReportEvent micDone,"START","QTP_copyFileToTempFolder"
 Dim fso, fileName Set fso = CreateObject("Scripting.FileSystemObject") fileName = fso.GetFileName(filePath)  If fso.FileExists(filePath) Then    fso.CopyFile filePath,GLOBAL_TEMPDIR & "\" & fileName  QTP_copyFileToTempFolder = GLOBAL_TEMPDIR & "\" & fileName Else  Reporter.ReportEvent micFail,"QTP_copyFileToTempFolder","Source File could not be found"  ExitTest End If 
 Set fso = Nothing  If Err.Number <> 0 Then  Reporter.ReportEvent micFail,"QTP_copyFileToTempFolder","" & Err.Description Else  Reporter.ReportEvent micDone,"END","QTP_copyFileToTempFolder" End If End Function
''' This function is used to copy any file to a destination folder.' @param filePath  Path to the Source file' @param destinationFolder  Path to the destination folder' @date Created Date: 7/07/2015' @author  Ravi P' @version 1.0 ' @remarks
Function QTP_copyFileToDestinationFolder(ByVal filePath, ByVal destinationFolder)
   Reporter.ReportEvent micDone,"START","QTP_copyFileToDestinationFolder"
 Dim fso, fileName Set fso = CreateObject("Scripting.FileSystemObject") fileName = fso.GetFileName(filePath)  If fso.FileExists(filePath) Then    fso.CopyFile filePath,destinationFolder & "\" & fileName Else  Reporter.ReportEvent micFail,"QTP_copyFileToDestinationFolder","Source File could not be found"  ExitTest End If 
 Set fso = Nothing  If Err.Number <> 0 Then  Reporter.ReportEvent micFail,"QTP_copyFileToDestinationFolder","" & Err.Description Else  Reporter.ReportEvent micDone,"END","QTP_copyFileToDestinationFolder" End If End Function
''' This function is used to copy any folder with sub dir to a destination folder.' @param folderPath  Path to the Source folder' @param destinationFolder  Path to the destination folder' @date Created Date: 7/07/2015' @author  Ravi P' @version 1.0 ' @remarks
Function QTP_copyFolderToDestinationFolder(ByVal folderPath, ByVal destinationFolder)
   Reporter.ReportEvent micDone,"START","QTP_copyFolderToDestinationFolder"
 Dim fso Set fso = CreateObject("Scripting.FileSystemObject")  If fso.FolderExists(folderPath) Then  fso.CopyFolder folderPath , destinationFolder , True Else  Reporter.ReportEvent micFail,"QTP_copyFolderToDestinationFolder","Source Folder could not be found"  ExitTest End If  Set fso = Nothing  If Err.Number <> 0 Then  Reporter.ReportEvent micFail,"QTP_copyFolderToDestinationFolder","" & Err.Description Else  Reporter.ReportEvent micDone,"END","QTP_copyFolderToDestinationFolder" End If End Function
''' This function is used to return only Alplabets from a given string. Example "ABCabc123" would return "ABCabc"' @param sourceString' @date Created Date: 10/08/2014' @return String with only Alphabets' @author  Ravi P' @version 1.0 ' @remarks
Function QTP_getAlphabetsFromString(ByVal sourceString)
 Reporter.ReportEvent micDone,"START","QTP_getAlphabetsFromString"
 Dim objRegEx
 Set objRegEx = CreateObject("VBScript.RegExp") objRegEx.Global = True objRegEx.Pattern = "[^A-Za-z]"
 QTP_getAlphabetsFromString = objRegEx.Replace(sourceString,"")
 Set objRegEx = Nothing
 If Err.Number <> 0 Then  Reporter.ReportEvent micFail,"QTP_getAlphabetsFromString","" & Err.Description Else  Reporter.ReportEvent micDone,"END","QTP_getAlphabetsFromString" End If
End Function
''' This function is used to zip the files in a directory' @param myFolder,  myZipFile' @date Created Date:  10/29/2014' @return ' @author  Ravi P' @version 1.0 ' @remarks
Function QTP_ZipFolder(myFolder,myZipFile )
   Reporter.ReportEvent micDone,"START","QTP_ZipFolder"
 Dim sSourceFolder Dim sArchiveFile Dim oShell Dim oZIP Dim oSourceFolder Dim objFolder Dim oFSO Dim oFile
    ' Make sure the path ends with a backslash    If Right( myFolder, 1 ) <> "\" Then        myFolder = myFolder & "\"    End If   sSourceFolder = myFolder sArchiveFile = myZipFile  Set oFSO = CreateObject( "Scripting.FileSystemObject" ) Set oFile = oFSO.OpenTextFile(sArchiveFile, 2, True) oFile.Write "PK" & Chr(5) & Chr(6) & String( 18, Chr(0) ) oFile.Close
  Set oShell = CreateObject("Shell.Application") 'Create ZIP Set oZIP= oShell.NameSpace(sArchiveFile) 'Get Source Folder Set oSourceFolder=oShell.NameSpace(sSourceFolder) 'Add source items to ZIP oZIP.CopyHere(oSourceFolder.Items)  '    For each sourceItem in oSourceFolder.Items'  Set objFolder = oFSO.GetFolder(sourceItem.Path)'  If objFolder.Files.Count <>0 Then'   oZIP.CopyHere sourceItem'  End If' Next  wait(10) Set oShell = Nothing Set oZIP = Nothing Set oSourceFolder = Nothing Set oFile = Nothing Set oFSO = Nothing
 If Err.Number <> 0 Then  Reporter.ReportEvent micFail,"QTP_ZipFolder","" & Err.Description Else  Reporter.ReportEvent micDone,"END","QTP_ZipFolder" End If
End Function
''' This function is used to transfer files to synchrony' @param hostName,  userID, password, srcPath, destPath' @date Created Date:  10/30/2014' @return ' @author Anbu' @version 1.0 ' @remarks
Function QTP_TransferFileToUnix(hostName, userID, password, srcPath, destPath)
 Dim args args = " -pw " + password + " " + srcPath + " " + userID + "@" + hostName + ":" + destPath SystemUtil.Run "pscp.exe", args
End Function
''' This function is used to click Run on the java security pop up' @date Created Date: 11/25/2014' @author  Ravi P' @version 1.0 ' @remarks
Function QTP_clickRunOnJavaSecurityWarning()
 Reporter.ReportEvent micDone,"START","QTP_clickRunOnJavaSecurityWarning"
 If Window("regexpwndtitle:=Security Warning").Exist(10) Then  Reporter.ReportEvent micPass,"QTP_clickRunOnJavaSecurityWarning","Initial Java Security Warning Dialog is displayed "  Window("regexpwndtitle:=Security Warning").Activate  Set WshShell = CreateObject("WScript.Shell")  WshShell.SendKeys "{TAB}"  wait(1)  WshShell.SendKeys "{TAB}"  wait(1)  WshShell.SendKeys " "  wait(1)  WshShell.SendKeys "{TAB}"  wait(1)  WshShell.SendKeys "{ENTER}"  Set WshShell = Nothing  Else     Reporter.ReportEvent micDone,"QTP_clickRunOnJavaSecurityWarning","Initial Java Security Warning Dialog is NOT displayed -- this might be version 1.6"  'Reporter.ReportEvent micFail,"QTP_clickRunOnJavaSecurityWarning","Initial Java Security Warning Dialog is NOT displayed"  'Call QTP_CaptureScreenshot  'SystemUtil.CloseProcessByName("java.exe")  'SystemUtil.CloseProcessByName("javaw.exe")  'ExitTest End If
 If Err.Number <> 0 Then  Reporter.ReportEvent micFail,"QTP_clickRunOnJavaSecurityWarning","" & Err.Description Else  Reporter.ReportEvent micDone,"END","QTP_clickRunOnJavaSecurityWarning" End If
End Function
''' This function is used to click OK on the java Authentication Required' @date Created Date: 12/11/2014' @author  Ravi P' @version 1.0 ' @remarks
Function QTP_clickOkOnJavaAuthenticationRequired()
 Reporter.ReportEvent micDone,"START","QTP_clickOkOnJavaAuthenticationRequired"  'Commented out the below set of code by Praveen Mandava - 08/27/2015'  If Window("regexpwndtitle:=Authentication Required").Exist(30) Then'  Reporter.ReportEvent micPass,"QTP_clickOkOnJavaAuthenticationRequired","Initial Java Authentication Required is displayed"'  Window("regexpwndtitle:=Authentication Required").Activate'  Set WshShell = CreateObject("WScript.Shell")'  wait(2)'  WshShell.SendKeys "%p"'  wait(2)'  WshShell.SendKeys "+({TAB})"'  wait(2)'  WshShell.SendKeys "autadm"'  wait(2)'  WshShell.SendKeys "{TAB}"'  wait(2)'        WshShell.SendKeys "{TAB}"'  wait(2)'  WshShell.SendKeys "CLM_2015"'  wait(2)'  WshShell.SendKeys "{TAB}"'  wait(2)'  WshShell.SendKeys " "'  wait(2)'  WshShell.SendKeys "{TAB}"'  wait(2)'        WshShell.SendKeys "{ENTER}"'  Set WshShell = Nothing' Else'  Reporter.ReportEvent micDone,"QTP_clickOkOnJavaAuthenticationRequired","Initial Java Authentication Required is NOT displayed"' End If
 Dim DPObj, UserNameFld, PasswordFld, OK_Button  Set DPObj = JavaDialog("title:=Authentication Required", "index:=0")  If DPObj.Exist(30) Then            DPObj.Activate      Set UserNameFld = DPObj.JavaEdit("tagname:=User name.*", "attached text:=User name.*", "Index:=0")      'UserNameFld.Set "autadm"      UserNameFld.Set DictObj.Item(Environment.Value("UserRoleInputSheet") & ".UserID")      Set PasswordFld = DPObj.JavaEdit("tagname:=Password.*", "attached text:=Password.*", "Index:=0")      'PasswordFld.Set "CLM_2015"      PasswordFld.Set DictObj.Item(Environment.Value("UserRoleInputSheet") & ".Password")      Set OK_Button = DPObj.JavaButton("text:=OK", "Index:=0")      OK_Button.Click            If Err.Number <> 0 Then  Reporter.ReportEvent micFail,"QTP_clickOkOnJavaAuthenticationRequired","" & Err.Description  ExitAction   End If            Set DPObj = JavaDialog("title:=Application Error", "Index:=0")      If DPObj.Exist(5) Then            Reporter.ReportEvent micFail,"QTP_clickOkOnJavaAuthenticationRequired","Error in Login to Java Authentication Reqired Dialog. Abort Test."            ExitAction      Else             Reporter.ReportEvent micDone,"END", "QTP_clickOkOnJavaAuthenticationRequired"                End If    Else           Reporter.ReportEvent micDone, "END", "QTP_clickOkOnJavaAuthenticationRequired - Initial Java Authentication Required Dialog is NOT displayed. Continue Test."    End If    
 
End Function
''' This function is used to execute a command in Unix' @date Created Date: 1/21/2015' @param host  The name of the unix host ' @param cmd The command to execute' @author  Ravi P' @version 1.0 ' @remarks
Function QTP_execUnixCmd(ByVal host, ByVal cmd)
 Reporter.ReportEvent micDone,"START","QTP_execUnixCmd"
   Dim params      params = GLOBAL_SHARED_ID & "@" & host & " -pw " & SharedIDPwd_LDAP & " " & cmd   If GLOBAL_OS = "XP" Then    Systemutil.Run "C:\Program Files\Putty\plink.exe", params   Else    Systemutil.Run "C:\Program Files (x86)\PuTTY\plink.exe", params   End If   
 If Err.Number <> 0 Then  Reporter.ReportEvent micFail,"QTP_execUnixCmd","" & Err.Description Else  Reporter.ReportEvent micDone,"END","QTP_execUnixCmd" End If
End Function
''' WebList Select Override' @date Created Date: 04/23/2015' @author  Swathi G' @version 1.0 ' @remarks Overrides the Weblist.Select with following  ''07/29/2016 added webpackages. 'Commented out Wshell ; added additional required wait, web listeners takes time for next eevnt to trigegr; updated 10/27/16 adding UFT version numberFunction WebListSelect(ByRef WebListObject, ByVal Value)If Instr(Environment.Value("ProductVer"), "12.01") > 0 Then 'UFT Version 12.01 arrAllItems = Split(WebListObject.GetROProperty("all items"), ";") For ix = LBound(arrAllItems) To UBound(arrAllItems)  If Instr(arrAllItems(ix),Value) > 0 Then   Setting.WebPackage("ReplayType") = 2   ''''Added by Naveen 07/29/2016         'WebListObject.Select Value         WebListObject.Click   Set WshShell = CreateObject("WScript.Shell")   WshShell.SendKeys Value & "{TAB}"   Set WshShell = Nothing   Setting.WebPackage("ReplayType") = 1   ''''Added by Naveen 07/29/2016        Reporter.ReportEvent micPass, "WebListSelect", "Web List value successfully Selected" & Value   Wait (5) ' required for next event to trigger  Exit Function  End If NextElse WebListObject.Select Value Exit FunctionEnd IfReporter.ReportEvent MicFail, "WebListSelect", "Web List value not found ->" & ValueEnd Function
''' This function is used to get an array from a comma delimited text file' @date Created Date: 7/15/2015' @param filePath  The path of the file' @author  Ravi P' @version 1.0 ' @remarks
Public Function QTP_getArrayFromTextFile(ByVal filePath)
Reporter.ReportEvent micDone,"START","QTP_getArrayFromTextFile"
dim fs,objTextFile,arrStrset fs=CreateObject("Scripting.FileSystemObject")set objTextFile = fs.OpenTextFile(filePath)
Do while NOT objTextFile.AtEndOfStream  arrStr = split(objTextFile.ReadLine,",")Loop
objTextFile.Closeset objTextFile = Nothingset fs = Nothing
QTP_getArrayFromTextFile = arrStr
If Err.Number <> 0 Then Reporter.ReportEvent micFail,"QTP_getArrayFromTextFile","" & Err.DescriptionElse Reporter.ReportEvent micDone,"END","QTP_getArrayFromTextFile"End If
End Function
Function QTP_ExecuteDBQueryWithUserName(DBName, DB_ID, DB_PWD, SQLQuery)    Const DB_CLOSED = 0    Dim oDBConn    Dim oRS    Dim arrayRS    Dim ConnStr
    Set oDBConn = CreateObject("adodb.connection")    ConnStr = "DRIVER={Microsoft ODBC for Oracle};Server=" + DBName + ";Uid=" + DB_ID + ";Pwd=" + DB_PWD + ";"    oDBConn.ConnectionString = ConnStr    oDBConn.Open
    Set oRS = CreateObject("adodb.recordset")    oRS.Open SQLQuery, oDBConn        If oRS Is Nothing Then       arrayRS = Array()       oRS.Close    ElseIf oRS.State = DB_CLOSED Then       arrayRS = Array()    ElseIf oRS.EOF = True Then        arrayRS = Array()        oRS.Close    Else        arrayRS = oRS.GetRows        oRS.Close    End If        oDBConn.Close    Set oRS = Nothing    Set oDBConn = Nothing        QTP_ExecuteDBQueryWithUserName = arrayRSEnd Function

''' This function is used to conevert the date with slashes and dashes' @date Created Date: 11/29/2016' @param Date_Value ' @author  Sanjith Vasireddy' @version 1.0 ' @remarksFunction DateString(ByVal Date_Value) Dim sMonth Dim sDay Dim sYear
 sMonth = Month(Date_Value) If sMonth < 10 Then  sMonth = "0" & sMonth End If sDay = Day(Date_Value) If sDay < 10 Then  sDay = "0" & sDay End If sYear = Year(Date_Value) DateString = sMonth & sDay & sYearEnd Function
'**********************************************************************'Name: findTextFromWebTableExactMatch'Description: This function findTextFromWebTableExactMatch'Created by: Sanjith vasireddy'Date: 11/18/2016'History'***********************************************************************Function findTextFromWebTableExactMatch(sWebTable, colNo, expectedText)rowNo = 0wait 2For row=2 to sWebTable.RowCount actualText=sWebTable.GetCellData(row,colNo) If trim(actualText) = trim(expectedText) Then  rowNo = row  Exit For End IfNextfindTextFromWebTableExactMatch = rowNoEnd Function
''' This function is used to export data from DB Table to Excel Sheet(xls Format).' @param DBName,SQLQuery: Query To fetch the data to export from DB.' @param FilePath: Filepath should be destination path to save the Excel file.Ex:("c:Temp\Test.xls")' @return N/A' @date Created Date:12/13/2016 ' @author Naveen Balusu' @version 1.0 ' @remarks
Function GetDataFromDBToExcel(Byval DBName,ByVal SQLQuery,Byval FilePath) Reporter.ReportEvent micDone,"START","GetDataFromDBToExcel" Dim xlSheet,Con,RS,xlSht,iCount,iRow Set xlSheet= CreateObject("Excel.Application") xlSheet.Visible = True xlSheet.Workbooks.Add() Set xlSht = xlSheet.Sheets.Item(1)  Set Con = CreateObject("ADODB.Connection") Set RS = CreateObject("ADODB.Recordset") conStr =  "DRIVER={Microsoft ODBC for Oracle};Server=" + DBName + ";Uid=" + GLOBAL_SHARED_ID + ";Pwd=" + GLOBAL_SHARED_ID_PWD_DB + ";" Con.ConnectionString = conStr Con.Open  RS.Open SQLQuery,Con  For iCount = 0 To RS.Fields.Count-1  xlSht.Cells(1,iCount+1).Value = Replace(RS.Fields(iCount).Name,"_"," ")   If Not RS.BOF Then   RS.MoveFirst  End If    iRow = 1  Do Until RS.EOF   xlSht.Cells(iRow+1,iCount+1).Value = RS.Fields(iCount).Value   RS.MoveNext   iRow = iRow+1  Loop Next  xlSheet.ActiveWorkbook.SaveAs filePath,18 xlSheet.Quit  xlSheet.Workbooks.Close  Reporter.ReportEvent micDone,"END","GetDataFromDBToExcel"End Function
'**********************************************************************'Name: CreateAFolder'Description: This function is used to create the Folder with name'Param: strRootPath = ""C:\Automation1\Library\TEST"'Created by: Sanjith vasireddy'Date: 04/18/2017'History'***********************************************************************Function CreateAFolder(ByVal strRootPath) On Error Resume Next     Dim objFSO, f Set objFSO = CreateObject("Scripting.FileSystemObject") ' Note If..Exists. Then, Else ... End If construction If Not (objFSO.FolderExists(strRootPath)) Then  Set f = objFSO.CreateFolder(strRootPath)  CreateAFolder = f.Path Else  CreateAFolder = strRootPath End IfEnd Function 
''' This function is used to send email to external addresses with an attachment. ' It uses QC API's email function to bypass the security alert seen in OUTLOOK, seen when sending attachments to external email addresses.' ' @param input_file_path The path for the input file' @param sheet_name Name of the sheet to get the data from' @param column_name Name of the column to search for' @param field_value value of the field to search for' @return None' @date Created 8/26/2013 Modified' @author Ravishankar P , Anbu' @version 1.0 ' @remarks
Public Function EmailFileUsingQC(filePath, EmailTo, EmailSubject, EmailBody, QCFolderPath)  Set tdc = QCUtil.QCConnection 
  If filePath = "" Then   Call tdc.SendMail(EmailTo,,EmailSubject, EmailBody,,"HTML")  Else   Set ScreenUploaded = tdc.TreeManager.NodeByPath(QCFolderPath)   Set FolderAttachObj = ScreenUploaded.Attachments   Set AttachItems = FolderAttachObj.AddItem(Null)    AttachItems.FileName = filePath   AttachItems.type = 1   AttachItems.Post()    Dim AttachmentPath(0)   Set AttachList = FolderAttachObj.NewList("")   AttachmentPath(0) = AttachList.item(1).ServerFileName    Call tdc.SendMail(EmailTo, "", EmailSubject, EmailBody, AttachmentPath, "HTML")    Set fso = CreateObject("Scripting.FileSystemObject")   attachmentName = FSO.GetFile(filePath).Name     Set otaAttachmentFilter = FolderAttachObj.Filter   otaAttachmentFilter.Filter("CR_REFERENCE") = "'ALL_LISTS_" & ScreenUploaded.NodeID & "_" & attachmentName & "'"   Set otaAttachmentList = otaAttachmentFilter.NewList   If otaAttachmentList.Count > 0 Then       FolderAttachObj.RemoveItem otaAttachmentList.Item(1).ID   Else       Reporter.ReportEvent micFail, "Attachment not deleted in QC", "Failed to find attachment '" & attachmentName & "' in folder '" & tdFolderPath & "'."   End If
  End If  If Err.Number <> 0 Then   Reporter.ReportEvent micFail,"CQ TEST","CQ Test did NOT PASS"   ExitTest  End If End Function
Sub QCGetResource(resourceName,saveTo) Set qcConn = QCUtil.QCConnection Set oResource = qcConn.QCResourceFactory Set oFilter = oResource.Filter  oFilter.Filter("RSC_FILE_NAME") = resourceName  Set oResourceList = oFilter.NewList  If oResourceList.Count = 1 Then Set oFile = oResourceList.Item(1) oFile.FileName = resourceName oFile.DownloadResource saveTo, True End If  Set qcConn = Nothing Set oResource = Nothing Set oFilter = Nothing Set oFlieList = Nothing Set oFile = Nothing
End Sub
Function QC_GetTestID(FolderPath, TestName) Set TFact = QCUtil.QCConnection.TestFactory Set TFilter = TFact.Filter TFilter.Filter("TS_SUBJECT") = "'" & FolderPath & "'" TFilter.Filter("TS_NAME") = "'" & TestName & "'" Set TList = TFact.NewList(TFilter.Text) 'msgbox TFilter.Text 'msgbox TList.Count If TList.Count = 0 Then  QC_GetTestID = -1 Else  Set TestCase = TList.Item(1)  QC_GetTestID = TestCase.ID End IfEnd Function
'Sub CaptureScreen'   Browser("Welcome to HomeSite").Page("Welcome to HomeSite").CaptureBitmap "err.png",False'End Sub' Function RecoveryFunction1(Object, Method, Arguments, retVal)Browser("Welcome to HomeSite").Page("Welcome to HomeSite").CaptureBitmap "c:\err.png",True Reporter.ReportEvent micFail, "Error", "Error", "c:\err.png" Call CollapseFolder'Browser("Welcome to HomeSite").Page("Welcome to HomeSite").CaptureBitmap "c:\err.png",FalseEnd Function  Sub CollapseFolder   Browser("BusinessObjects InfoView").Page("BusinessObjects InfoView").Frame("headerPlusFrame").WebElement("Home").Clickwait 1folderArr=split(Parameter("ReportPath"),"\",-1,1)For i=UBound(folderArr)-1 to  0 step -1        'Browser("BusinessObjects InfoView").Page("BusinessObjects InfoView").Frame("workspaceBodyFrame").Image("image type:=Image Link","html tag:=IMG","alt:="&folderArr(i)&" expanded","Index:=0").FireEvent "onmouseover"  Browser("Welcome to HomeSite").Page("Welcome to HomeSite").Frame("workspaceBodyFrame").Image("image type:=Image Link","html tag:=IMG","alt:="&folderArr(i)&" expanded","Index:=0").FireEvent "onmouseover"  Browser("Welcome to HomeSite").Page("Welcome to HomeSite").Frame("workspaceBodyFrame").Image("image type:=Image Link","html tag:=IMG","alt:="&folderArr(i)&" expanded","Index:=0").Click        wait 2NextEnd Sub''''''Functions
' Save Excel as  HTMLFunction  Excel2HTML (ExcelFile) Const xlHTML = 44 Dim fname, NewFName Set objExcel = CreateObject("Excel.Application") Set objWorkbook = OpenWorkbook(objExcel, ExcelFile) objExcel.DisplayAlerts = False  fname = Split (ExcelFile, ".xls") NewFName = fname(i) &".htm" objWorkbook.SaveAs  fname(i) &".htm", xlHTML  objWorkbook.Close objExcel.Quit
 Excel2HTML = NewFNameEnd Function
Function CompareExcel(ExpFile, ActFile) Dim RetVal RetVal = True Set objExcel = CreateObject("Excel.Application") objExcel.Visible = True Set objWorkbook1= objExcel.Workbooks.Open(ActFile) Set objWorkbook2= objExcel.Workbooks.Open(ExpFile)  Set objWorksheet1= objWorkbook1.Worksheets(1)  Set objWorksheet2= objWorkbook2.Worksheets(1)     For Each cell In objWorksheet1.UsedRange     If cell.Value <> objWorksheet2.Range(cell.Address).Value Then      cell.Interior.ColorIndex = 3    ' Highlights in red color if any changes in cells      RetVal = False     Else      cell.Interior.ColorIndex = 0     End If    Next  objWorkbook1.Save  objWorkbook1.Close  objWorkbook2.Close objExcel.application.Quit set objExcel=nothing  Set objWorkbook1=nothing Set objWorkbook2=nothing Set objWorksheet1=nothing Set objWorksheet1=nothing
 CompareExcel = RetValEnd Function
'The CompareSheets method compares between two sheets.'if there is a difference between the two sheets then the value in the second sheet'will be changed to red and contain the string:'"Compare conflict - Value was 'Value2', Expected value is 'value2'"'sheet1, sheet2 - the excel sheets to be compared'startColumn - the column to start comparing in the two sheets'numberOfColumns - the number of columns to be compared'startRow - the row to start comparing in the two sheets'numberOfRows - the number of rows to be comparedFunction CompareSheets(sheet1, sheet2) 'As Boolean   'Function CompareSheets(sheet1, sheet2, startColumn, numberOfColumns, startRow, numberOfRows, trimed) 'As Boolean    Dim returnVal 'As Boolean    returnVal = True     'In case that one of the sheets doesn't exists, don't continue the process    If sheet1 Is Nothing Or sheet2 Is Nothing Then        CompareSheets = False        Exit Function    End If Dim ColCount, RowCount ColCount = Sheet1.usedrange.columns.count ' Get Column count RowCount = Sheet1.usedrange.rows.count  'Get Row Count
 startRow  = 2 numberof Rows = RowCount numberOfColumns = ColCount
    'loop through the table and fill values into the two worksheets    For r = startRow to (startRow + (numberOfRows - 1))        For c = startColumn to (startColumn + (numberOfColumns - 1))            Value1 = Trim(sheet1.Cells(r, c))            Value2 = Trim(sheet2.Cells(r, c))             'in case that the values of a cell are not equel in the two worksheets            'create an indicator that the values are not equel and set return value            'to False            If Value1 <> Value2 Then                Dim cell 'As Excel.Range                sheet2.Cells(r, c) = "Compare conflict - Value was '" & Value2 & "', Expected value is '" & Value1 & "'."                Set cell = sheet2.Cells(r, c)                cell.Font.Color = vbRed                returnVal = False            End If        Next    Next    CompareSheets = returnValEnd Function 
'The GetSheet method returns a Microsoft Excel sheet according to the sheet Identifier 'ExcelApp - The Microsoft Excel application which is the parent of the requested sheet 'sheetIdentifier - The name or the number of the requested Microsofr Excel sheet 'return Nothing on failure Function GetSheet(ExcelApp, sheetIdentifier) 'As Excel.worksheet        On Error Resume Next        Set GetSheet = ExcelApp.Worksheets.Item(sheetIdentifier)        On Error GoTo 0 End Function
'The SetCellValue method sets the given 'value' in the cell which is identified by 'its row, column, and parent Microsoft Excel sheet 'excelSheet - The Microsoft Excel sheet that is the parent of the requested cell 'row - the cell's row in the excelSheet 'column - the cell's column in the excelSheet 'value - the value to be set in the cell Sub SetCellValue(excelSheet, row, column, value)        On Error Resume Next        excelSheet.Cells(row, column) = value        On Error GoTo 0 End Sub 
'The GetCellValue returns the cell's value according to its row, column, and sheet 'excelSheet - The Microsoft Excel sheet in which the cell exists 'row - The cell's row 'column - The cell's column 'return 0 if the cell cannot be found Function GetCellValue(excelSheet, row, column)        value = 0        Err = 0        On Error Resume Next        tempValue = excelSheet.Cells(row, column)        If Err = 0 Then               value = tempValue               Err = 0        End If        On Error GoTo 0        GetCellValue = value End Function 
' This function returns a new Microsoft Excel object with a default new workbook Function CreateExcel() 'As Excel.Application        Dim excelSheet 'As Excel.worksheet        Set ExcelApp = CreateObject("Excel.Application") 'Create a new Microsoft Excel object        ExcelApp.Workbooks.Add        ExcelApp.Visible = True        Set CreateExcel = ExcelApp End Function
Sub CloseWorkbook(ExcelApp, path)        On Error Resume Next        Set NewWorkbook = ExcelApp.Workbooks.Close(True, path)       'Set OpenWorkbook = NewWorkbook        On Error GoTo 0 End Sub 
'The OpenWorkbook method opens a previously saved Microsoft Excel workbook and adds it to the Application 
'excelApp - The Microsoft Excel application to which the workbook will be added. 'path - The path of the workbook that will be opened 'Returns Nothing on failure Function OpenWorkbook(ExcelApp, path)        On Error Resume Next        Set NewWorkbook = ExcelApp.Workbooks.Open(path, 0, False)        Set OpenWorkbook = NewWorkbook        On Error GoTo 0 End Function 'The ActivateWorkbook method sets one of the workbooks in the application as the active workbook 'ExcelApp - The workbook's parent Microsft Excel application 'workbookIdentifier - The name or the number of the workbook Sub ActivateWorkbook(ExcelApp, workbookIdentifier)        On Error Resume Next        ExcelApp.Workbooks(workbookIdentifier).Activate        On Error GoTo 0 End Sub 
'The SaveWorkbook method saves a workbook according to the workbook identifier. 'The method overwrites the previously saved file in the given path. 'excelApp - a reference to the Microsoft Excel application 'workbookIdentifier - The name or number of the requested workbook 'path - The location to which the workbook should be saved 'Returns "OK" on success and "Bad Workbook Identifier" on failure Function SaveWorkbook(ExcelApp, workbookIdentifier, path) 'As String        Dim workbook 'As Excel.workbook        On Error Resume Next        Set workbook = ExcelApp.Workbooks(workbookIdentifier)        On Error GoTo 0        If Not workbook Is Nothing Then               If path = "" Or path = workbook.FullName Or path = workbook.Name Then                      workbook.Save               Else                      Set fso = CreateObject("Scripting.FileSystemObject")                      'If the path has no file extension then add the 'xls' extension                      If InStr(path, ".") = 0 Then                             path = path & ".xls"                      End If                      On Error Resume Next                      fso.DeleteFile path                      Set fso = Nothing                      Err = 0                      On Error GoTo 0                      workbook.SaveAs path               End If               SaveWorkbook = "OK"        Else               SaveWorkbook = "Bad Workbook Identifier"        End If End Function 
