----------------------
''BKFS'''Option Explicit
Public Function getSQLByKeyword(byVal keyword)  Dim Con, Rs  Set Con = CreateObject("ADODB.Connection")  Set Rs =  CreateObject("ADODB.RecordSet")  Con.ConnectionString = "Driver={Microsoft Excel Driver (*.xls)};DBQ=" &GLOBAL_KEYWORD_QUERIESFILE  Con.Open  Rs.Open "Select Query FROM [Sheet1$] where Keyword = '" & keyword & "'",Con  If Rs.BOF <> True then  Rs.MoveFirst  getSQLByKeyword =  Rs(0).Value   End If   Rs.Close   Con.Close   Set Rs = Nothing   Set Con = Nothing    End Function

Function InsertUsedLoanNo(ByVal LOAN_NO, byVAl RULE_ID, ByVal Trigger_Name, ByVal Used_Date) Dim sSQLString sSQLString = "INSERT INTO AUTO_BKFS_USED_LOANNO(LOAN_NUMBER, RULE_ID, SCENARIO_NAME, USED_DATE) VALUES ('" & LOAN_NO & "','" & RULE_ID & "','" & Trigger_Name & "','" & Used_Date & "')" Call QTP_ExecuteDBQuery(GLOBAL_AUTO_DBNAME, sSQLString)End Function

Function CheckUsedLoanNo(ByVal LOAN_NO) Dim sSQLString Dim arrayRS sSQLString = "Select LOAN_NUMBER from AUTO_BKFS_USED_LOANNO Where LOAN_NUMBER='" & LOAN_NO & "'" arrayRS = QTP_ExecuteDBQuery(GLOBAL_AUTO_DBNAME, sSQLString) If UBound(arrayRS) > -1 Then  CheckUsedLoanNo = True Else  CheckUsedLoanNo = False End IfEnd Function

Function PickupTESTIDFromDB(ByVal TestID, ByVal TableName)   Dim sSQLString   Dim arrayRS
   sSQLString = "Select FLAG FROM " & TableName & " where Test_Case_No = '" & TestID & "'"   arrayRS = QTP_ExecuteDBQuery(GLOBAL_AUTO_DBNAME, sSQLString)   If UBound(arrayRS) > -1 Then  PickupTESTIDFromDB = arrayRS(0,0) Else  PickupTESTIDFromDB = ""   End IfEnd Function
Function InsertIntoAutoBKFSResults(ByVal Flag, ByVal TestID, ByVal TestName, byVal ScenarioType, byVal LoanNumber, byVal CliamNumber, ByVal State, byVal Buckectcode, byVal Category1, byVal SubCat1, byVal UnitPrice1,byVal ServicerFromDate1,byVal ServicerToDate1,byVal Category2, byVal SubCat2, byVal UnitPrice2,byVal ServicerFromDate2,byVal ServicerToDate2, byVal EditName, byVal ClaimStatus )  Dim sSQLString  If Environment.Value("AlreadyExists") = True Then     sSQLString ="Update AUTO_BKFS Set FLAG = '" & Flag & "',TEST_CASE_NO = '" & TestID & "',SCENARIO_NAME = '" & TestName & "',SCENARIO_TYPE = '" & ScenarioType & "',LOAN_NUMBER = '" & LoanNumber & "', CLAIM_NUMBER = '" & CliamNumber & "', STATE = '" & State & "',BUCKET_CODE = '" & Buckectcode & "',CATEGORY_1 = '" & Category1 & "', SUB_CATEGORY_1 = '" & SubCat1 & "', UNIT_PRICE_1 = '" & UnitPrice1 & "',SERVICER_FROM_DATE_1 = '" & ServicerFromDate1 & "',SERVICER_TO_DATE_1 = '" & ServicerToDate1 & "',CATEGORY_2 = '" & Category2 & "', SUB_CATEGORY_2 = '" & SubCat2 & "', UNIT_PRICE_2 = '" & UnitPrice2 & "',SERVICER_FROM_DATE_2 = '" & ServicerFromDate2 & "',SERVICER_TO_DATE_2 = '" & ServicerToDate2 & "',EDIT_NAME = '" & EditName & "', CLAIM_STATUS = '" & ClaimStatus & "' Where TEST_CASE_NO = '" & TestID & "'"  Else              sSQLString = "INSERT INTO AUTO_BKFS (FLAG, TEST_CASE_NO, SCENARIO_NAME, SCENARIO_TYPE, LOAN_NUMBER, CLAIM_NUMBER, STATE, BUCKET_CODE, CATEGORY_1, SUB_CATEGORY_1, UNIT_PRICE_1, SERVICER_FROM_DATE_1, SERVICER_TO_DATE_1, CATEGORY_2, SUB_CATEGORY_2, UNIT_PRICE_2, SERVICER_FROM_DATE_2, SERVICER_TO_DATE_2, EDIT_NAME, CLAIM_STATUS) VALUES ('" & Flag & "','" & TestID & "' ,'" & TestName & "' ,'" & ScenarioType & "' ,'" & LoanNumber & "','" & CliamNumber & "','" & State & "','" & Buckectcode & "','" & Category1 & "','" & SubCat1 & "','" & UnitPrice1 & "','" & ServicerFromDate1 & "','" & ServicerToDate1 & "','" & Category2 & "','" & SubCat2 & "','" & UnitPrice2 & "','" & ServicerFromDate2 & "','" & ServicerToDate2 & "','" & EditName & "','" & ClaimStatus & "')"      End If             Call QTP_ExecuteDBQuery(GLOBAL_AUTO_DBNAME, sSQLString)        Wait 3End Function

 Public Function BKFS_STATE_CAT_SUBCAT_LOANNUM(ByVal sql, ByVal rulesData)    Dim DBName, DB_ID, DB_PWD, SQLQuery, LoanNumberArray, i DBName = Environment.Value("IHDS_DBName") DB_ID = Environment.Value("IHDS_SHARED_ID") DB_PWD = Environment.Value("IHDS_SHARED_ID_PWD_DB") SQLQuery = sql   SQLQuery = Replace(SQLQuery,"$STATE$",rulesData("State")) SQLQuery = Replace(SQLQuery,"$CATEGORY$",rulesData("Category")) SQLQuery = Replace(SQLQuery,"$SUBCAT$",rulesData("SubCategory"))    SQLQuery = Replace(SQLQuery,"$BUCKETCODE$",rulesData("BucketCode"))   LoanNumberArray = QTP_ExecuteDBQueryWithUserName(DBName, DB_ID, DB_PWD, SQLQuery)  If UBound(LoanNumberArray) >= 0 Then  For i = 0 to UBound(LoanNumberArray,2)             IF CheckUsedLoanNo(LoanNumberArray(0,i)) = False Then      GLOBAL_BKFS_LOANNUMBER = LoanNumberArray(0,i)      InsertUsedLoanNo GLOBAL_BKFS_LOANNUMBER, GLOBAL_RULE_ID, Environment.Value("TestName"), Date      Exit For   End If  Next  Else  GLOBAL_BKFS_LOANNUMBER = "" End If    End Function

Public Function BKFS_STATE_CAT_SUBCAT_LOANNUM_HECM_YES(ByVal sql, ByVal rulesData)    Dim DBName, DB_ID, DB_PWD, SQLQuery, LoanNumberArray, i DBName = Environment.Value("IHDS_DBName") DB_ID = Environment.Value("IHDS_SHARED_ID") DB_PWD = Environment.Value("IHDS_SHARED_ID_PWD_DB") SQLQuery = sql   'SQLQuery = Replace(SQLQuery,"$STATE$",rulesData("State")) 'SQLQuery = Replace(SQLQuery,"$CATEGORY$",rulesData("Category")) 'SQLQuery = Replace(SQLQuery,"$SUBCAT$",rulesData("SubCategory"))    SQLQuery = Replace(SQLQuery,"$BUCKETCODE$",rulesData("BucketCode"))   LoanNumberArray = QTP_ExecuteDBQueryWithUserName(DBName, DB_ID, DB_PWD, SQLQuery)  If UBound(LoanNumberArray) >= 0 Then  For i = 0 to UBound(LoanNumberArray,2)             IF CheckUsedLoanNo(LoanNumberArray(0,i)) = False Then      GLOBAL_BKFS_LOANNUMBER = LoanNumberArray(0,i)      InsertUsedLoanNo GLOBAL_BKFS_LOANNUMBER, GLOBAL_RULE_ID, Environment.Value("TestName"), Date      Exit For   End If  Next  Else  GLOBAL_BKFS_LOANNUMBER = "" End If    End Function
Public Function BKFS_STATE_CAT_SUBCAT_LOANNUM_HECM_NO(ByVal sql, ByVal rulesData)    Dim DBName, DB_ID, DB_PWD, SQLQuery, LoanNumberArray, i DBName = Environment.Value("IHDS_DBName") DB_ID = Environment.Value("IHDS_SHARED_ID") DB_PWD = Environment.Value("IHDS_SHARED_ID_PWD_DB") SQLQuery = sql   'SQLQuery = Replace(SQLQuery,"$STATE$",rulesData("State")) 'SQLQuery = Replace(SQLQuery,"$CATEGORY$",rulesData("Category")) 'SQLQuery = Replace(SQLQuery,"$SUBCAT$",rulesData("SubCategory"))    SQLQuery = Replace(SQLQuery,"$BUCKETCODE$",rulesData("BucketCode"))   LoanNumberArray = QTP_ExecuteDBQueryWithUserName(DBName, DB_ID, DB_PWD, SQLQuery)  If UBound(LoanNumberArray) >= 0 Then  For i = 0 to UBound(LoanNumberArray,2)             IF CheckUsedLoanNo(LoanNumberArray(0,i)) = False Then      GLOBAL_BKFS_LOANNUMBER = LoanNumberArray(0,i)      InsertUsedLoanNo GLOBAL_BKFS_LOANNUMBER, GLOBAL_RULE_ID, Environment.Value("TestName"), Date      Exit For   End If  Next  Else  GLOBAL_BKFS_LOANNUMBER = "" End If    End Function
Public Function BKFS_STATE_CAT_SUBCAT_LOANNUM_HECM_WELLS_YES(ByVal sql, ByVal rulesData)    Dim DBName, DB_ID, DB_PWD, SQLQuery, LoanNumberArray, i DBName = Environment.Value("IHDS_DBName") DB_ID = Environment.Value("IHDS_SHARED_ID") DB_PWD = Environment.Value("IHDS_SHARED_ID_PWD_DB") SQLQuery = sql
    SQLQuery = Replace(SQLQuery,"$BUCKETCODE$",rulesData("BucketCode"))   LoanNumberArray = QTP_ExecuteDBQueryWithUserName(DBName, DB_ID, DB_PWD, SQLQuery)  If UBound(LoanNumberArray) >= 0 Then  For i = 0 to UBound(LoanNumberArray,2)             IF CheckUsedLoanNo(LoanNumberArray(0,i)) = False Then      GLOBAL_BKFS_LOANNUMBER = LoanNumberArray(0,i)      InsertUsedLoanNo GLOBAL_BKFS_LOANNUMBER, GLOBAL_RULE_ID, Environment.Value("TestName"), Date      Exit For   End If  Next  Else  GLOBAL_BKFS_LOANNUMBER = "" End If    End Function
Public Function BKFS_STATE_CAT_SUBCAT_LOANNUM_HECM_WELLS_NO(ByVal sql, ByVal rulesData)    Dim DBName, DB_ID, DB_PWD, SQLQuery, LoanNumberArray, i DBName = Environment.Value("IHDS_DBName") DB_ID = Environment.Value("IHDS_SHARED_ID") DB_PWD = Environment.Value("IHDS_SHARED_ID_PWD_DB") SQLQuery = sql
    SQLQuery = Replace(SQLQuery,"$BUCKETCODE$",rulesData("BucketCode"))   LoanNumberArray = QTP_ExecuteDBQueryWithUserName(DBName, DB_ID, DB_PWD, SQLQuery)  If UBound(LoanNumberArray) >= 0 Then  For i = 0 to UBound(LoanNumberArray,2)             IF CheckUsedLoanNo(LoanNumberArray(0,i)) = False Then      GLOBAL_BKFS_LOANNUMBER = LoanNumberArray(0,i)      InsertUsedLoanNo GLOBAL_BKFS_LOANNUMBER, GLOBAL_RULE_ID, Environment.Value("TestName"), Date      Exit For   End If  Next  Else  GLOBAL_BKFS_LOANNUMBER = "" End If    End Function












Public Function SERFS_STATE_CAT_SUBCAT_LOANNUMS_BKFS_STATE_CAT_SUBCAT_LOANNUM_AMOUNT(ByVal sql, ByVal rulesData)    Dim SERFSDBName, SERFSDB_ID, SERFSDB_PWD, IHDSDBName     Dim IHDSDB_ID, IHDSDB_PWD, initialQuery, SERFSQuery, IHDSQuery        Dim SERFSloanNumArray, ix, BKFSloanNumberArray,  tempQuery, blnSERFSLoanFound, blnBKFSLoanFound, TempString    Dim TempFlag
 SERFSDBName = Environment.Value("SERFS_DBName") 'SERFSDB_ID = Environment.Value("GLOBAL_SHARED_ID") 'SERFSDB_PWD = Environment.Value("GLOBAL_SHARED_ID_PWD_DB")  IHDSDBName = Environment.Value("IHDS_DBName") IHDSDB_ID = Environment.Value("IHDS_SHARED_ID") IHDSDB_PWD = Environment.Value("IHDS_SHARED_ID_PWD_DB")  initialQuery = split(sql,";") SERFSQuery = initialQuery(0) IHDSQuery = initialQuery(1)  SERFSQuery = Replace(SERFSQuery,"$BUCKETCODE$",rulesData("BucketCode")) SERFSQuery = Replace(SERFSQuery,"$STATCODE$",rulesData("StatusCode"))  IHDSQuery = Replace(IHDSQuery,"$STATE$",rulesData("State")) IHDSQuery = Replace(IHDSQuery,"$CATEGORY$",rulesData("Category")) IHDSQuery = Replace(IHDSQuery,"$SUBCAT$",rulesData("SubCategory"))   SERFSloanNumArray = QTP_ExecuteDBQueryWithUserName(SERFSDBName, GLOBAL_SHARED_ID, GLOBAL_SHARED_ID_PWD_DB, SERFSQuery)  blnSERFSLoanFound = TRUE blnBKFSLoanFound = TRUE  If UBound(SERFSloanNumArray,2) >= 0 Then      TempString = "'"      For ix = 0 To UBound(SERFSloanNumArray,2)          TempString = TempString & SERFSloanNumArray(0,ix) & "', '"          If ix = UBound(SERFSloanNumArray,2) Then             TempString = Right(TempString, Len(TempString) - 1)          End If      Next       tempQuery = Replace(IHDSQuery,"$LoanNumber$", TempString)      BKFSloanNumberArray = QTP_ExecuteDBQueryWithUserName(IHDSDBName, IHDSDB_ID, IHDSDB_PWD, tempQuery)       TempFlag = False      If UBound(BKFSloanNumberArray) >= 0 Then            For ix = 0 To UBound(BKFSloanNumberArray)               If CheckUsedLoanNo(BKFSloanNumberArray(ix)) = False Then                    For iy = 0 to UBound(SERFSloanNumArray, 2)                        If BKFSloanNumberArray(ix) = SERFSloanNumArray(0, iy) Then                              GLOBAL_BKFS_UNITPRICE = SERFSloanNumArray(3, iy)                             GLOBAL_BKFS_LOANNUMBER = SERFSloanNumArray(0, iy)                             TempFlag = True                             Exit For                        End If                    Next                End If                If TempFlag Then Exit For             Next      Else            blnBKFSLoanFound = FALSE         End If  Else     blnSERFSLoanFound = FALSE       End If
  If  blnSERFSLoanFound = FALSE OR blnBKFSLoanFound = False Then  GLOBAL_BKFS_LOANNUMBER = ""  GLOBAL_BKFS_UNITPRICE = ""  Exit Function End If  
  'If UBound(SERFSloanNumArray) >= 0 Then  'For ix = 0 To UBound(SERFSloanNumArray, 2)          'tempQuery = Replace(IHDSQuery,"$LoanNumber$",SERFSloanNumArray(0,ix))      'BKFSloanNumberArray = QTP_ExecuteDBQueryWithUserName(IHDSDBName, IHDSDB_ID, IHDSDB_PWD, tempQuery)      '      If UBound(BKFSloanNumberArray) >= 0 Then'         IF CheckUsedLoanNo(BKFSloanNumberArray(0,ix)) = False Then '            GLOBAL_BKFS_UNITPRICE = BKFSloanNumberArray(3,ix)'      InsertUsedLoanNo GLOBAL_BKFS_LOANNUMBER, GLOBAL_RULE_ID, Environment.Value("TestName"), Date   '      GLOBAL_BKFS_LOANNUMBER = BKFSloanNumberArray(0,ix)'      Exit For'         End If                       'End If  'Next' Else'  GLOBAL_BKFS_LOANNUMBER = ""'  GLOBAL_BKFS_UNITPRICE = ""'  Exit Function' End If    End Function

Public Function BKFS_STATE_CAT_SUBCAT_LOANNUMS_SERFS_STATE_CAT_SUBCAT_LOANNUM(ByVal sql, ByVal rulesData)
    Dim SERFSDBName, SERFSDB_ID, SERFSDB_PWD, IHDSDBName, IHDSDB_ID, IHDSDB_PWD, initialQuery, SERFSQuery, IHDSQuery        Dim SERFSloanNumArray, ix, BKFSloanNumberArray,  tempQuery
 SERFSDBName = Environment.Value("SERFS_DBName") SERFSDB_ID = Environment.Value("GLOBAL_SHARED_ID") SERFSDB_PWD = Environment.Value("GLOBAL_SHARED_ID_PWD_DB")  IHDSDBName = Environment.Value("IHDS_DBName") IHDSDB_ID = Environment.Value("IHDS_SHARED_ID") IHDSDB_PWD = Environment.Value("IHDS_SHARED_ID_PWD_DB")  initialQuery = split(sql,";") IHDSQuery = initialQuery(0) SERFSQuery = initialQuery(1)   IHDSQuery = Replace(IHDSQuery,"$STATE$",rulesData("State")) IHDSQuery = Replace(IHDSQuery,"$CATEGORY$",rulesData("Category")) IHDSQuery = Replace(IHDSQuery,"$SUBCAT$",rulesData("SubCategory"))   SERFSQuery = Replace(SERFSQuery,"$STATE$",rulesData("State"))   BKFSloanNumArray = QTP_ExecuteDBQueryWithUserName(IHDSDBName, IHDSDB_ID, IHDSDB_PWD, IHDSQuery)  If UBound(BKFSloanNumArray) >= 0 Then  For ix = 0 To UBound(BKFSloanNumArray, 2)          tempQuery = Replace(SERFSQuery,"$LoanNumber$",BKFSloanNumArray(0,ix))      SERFSloanNumberArray = QTP_ExecuteDBQueryWithUserName(SERFSDBName, SERFSDB_ID, SERFSDB_PWD, tempQuery)            If UBound(SERFSloanNumberArray) >= 0 Then    GLOBAL_BKFS_LOANNUMBER = BKFSloanNumArray(0,ix)    Exit For    End If  Next Else  GLOBAL_BKFS_LOANNUMBER = ""  Exit Function End If    End Function

Function InsertIntoAutoBKFSResults_Duplicate(ByVal Flag,ByVal StatusFlag,ByVal ClaimTypeFlag, ByVal TestID, ByVal UniqueNo, ByVal Hecm, ByVal TestName, byVal ScenarioType, byVal LoanNumber, byVal CliamNumber1,byVal CliamNumber2, byVal Buckectcode, byVal Category, byVal SubCat, byVal UnitPrice,byVal ServicerFromDate,byVal ServicerToDate, byVal EditName, byVal ClaimStatus,byVal ClaimStatustoChange,byVal ClaimTypetoChange)  Dim sSQLString   If Environment.Value("AlreadyExists") = True Then    sSQLString ="Update AUTO_BKFS_DUPLICATE_CLAIMS Set FLAG = '" & Flag & "',STATUS_FLAG = '" & StatusFlag & "',CLAIM_TYPE_FLAG = '" & ClaimTypeFlag & "',TEST_CASE_NO = '" & TestID & "',UNIQUE_NO = '" & UniqueNo & "',HECM = '" & Hecm & "',SCENARIO_NAME = '" & TestName & "',SCENARIO_TYPE = '" & ScenarioType & "',LOAN_NUMBER = '" & LoanNumber & "', CLAIM_NUMBER_1 = '" & CliamNumber1 & "',CLAIM_NUMBER_2 = '" & CliamNumber2 & "',BUCKET_CODE = '" & Buckectcode & "',CATEGORY = '" & Category & "', SUB_CATEGORY = '" & SubCat & "', UNIT_PRICE = '" & UnitPrice & "',SERVICER_FROM_DATE = '" & ServicerFromDate & "',SERVICER_TO_DATE = '" & ServicerToDate & "', EDIT_NAME = '" & EditName & "', CLAIM_STATUS = '" & ClaimStatus & "', CLAIM_STATUS_TO_CHANGE = '" & ClaimStatustoChange & "', CLAIM_TYPE_TO_CHANGE = '" & ClaimTypetoChange & "' Where TEST_CASE_NO = '" & TestID & "'"   Else    sSQLString = "INSERT INTO AUTO_BKFS_DUPLICATE_CLAIMS (FLAG, STATUS_FLAG, CLAIM_TYPE_FLAG, TEST_CASE_NO, UNIQUE_NO, HECM, SCENARIO_NAME, SCENARIO_TYPE, LOAN_NUMBER, CLAIM_NUMBER_1, CLAIM_NUMBER_2, BUCKET_CODE, CATEGORY, SUB_CATEGORY, UNIT_PRICE, SERVICER_FROM_DATE, SERVICER_TO_DATE, EDIT_NAME, CLAIM_STATUS,CLAIM_STATUS_TO_CHANGE,CLAIM_TYPE_TO_CHANGE) VALUES ('" & Flag & "','" & StatusFlag & "','" & ClaimTypeFlag & "','" & TestID & "' ,'" & UniqueNo & "' ,'" & Hecm & "' ,'" & TestName & "' ,'" & ScenarioType & "' ,'" & LoanNumber & "','" & CliamNumber1 & "','" & CliamNumber2 & "','" & Buckectcode & "','" & Category & "','" & SubCat & "','" & UnitPrice & "','" & ServicerFromDate & "','" & ServicerToDate & "','" & EditName & "','" & ClaimStatus & "','" & ClaimStatustoChange & "','" & ClaimTypetoChange & "')"       End If             Call QTP_ExecuteDBQuery(GLOBAL_AUTO_DBNAME, sSQLString)        Wait 3End Function

Function BKFS_CreateExpense  Reporter.ReportEvent micDone,"START","BKFS_CreateExpense"    Dim rowNumber, maxRow, rulesData 'getDateTimestamp Dim executeHostName, VerifyEdit, ruleId, claimStatus  'getDateTimestamp = QTP_GetDateTimeString Call load_sheet(GLOBAL_RULE_ENGINEFILE,"Rules") maxRow = DataTable.GetSheet("Rules").GetRowCount
    If BKFS_Login("Servicer") = False Then       ExitTest    End If
 For rowNumber=1 To maxRow          Set rulesData =  getDataByRowNumber("Rules",rowNumber)            Call BKFS_servicerDecisionService(rulesData, rowNumber)          Next               Call BKFS_Logout          If BKFS_Login("Investor") = False Then      ExitTest     End If               For rowNumber=1 To maxRow      Set rulesData =  getDataByRowNumber("Rules",rowNumber)        Call BKFS_investorDecisionService(rulesData, rowNumber)            Next      Call BKFS_Logout  DataTable.ExportSheet GLOBAL_RULE_ENGINEFILE,"Rules","Rules"          Reporter.ReportEvent micDone,"END","BKFS_CreateExpense"      End Function
 ''*******************************************************************************************' This function is useed to Function flow of the servicer side' @param ' @return' @date Created  10/05/2016' @author  Sanjith Vasireddy' @version 1.0 ' @remarks '''****************************************************************************************** 
 Function BKFS_servicerDecisionService(rulesData, rowNumber)
 Dim keyword, sql, executeHostName, Flag Reporter.ReportEvent micDone,"START","BKFS_servicerDecisionService" 
'''''''''''''''''''''''''''''''''''''''************************************************************''''''''''''''''''''''''''''''''''''''''''''''''  'INITIALIZE SECTION GLOBAL_BKFS_LOANNUMBER = ""    GLOBAL_BKFS_UNITPRICE = ""      Global_Claim_Number = ""    GLOBAL_EDIT_CODE = ""    GLOBAL_RULE_ID = ""    Environment.Value("AlreadyExists") = False        executeHostName =  Trim(rulesData("HostName"))   Flag = PickupTESTIDFromDB(rulesData("TestCaseNo"),"AUTO_BKFS")    If (UCASE(Flag) = "PASS") OR Ucase(executeHostName) <> Ucase(GLOBAL_HOSTNAME) Then  Exit Function ElseIf UCASE(Flag) = "FAIL" Then          Environment.Value("AlreadyExists") = True  End If  DataTable.GetSheet("Rules").SetCurrentRow(rowNumber)  'EXECUTING QUERY SECTION (INPUT FROM DATA SHEET. OUTPUT = BKFS LOAN NUMBER)  'Get the Keyword from the spread sheet keyword = rulesData("Keyword")  'Get the SQL from the spread sheet sql = getSQLByKeyword(keyword)  Select Case keyword  Case "BKFS_STATE_CAT_SUBCAT_LOANNUM"   Call BKFS_STATE_CAT_SUBCAT_LOANNUM(sql,rulesData)  Case "BKFS_STATE_CAT_SUBCAT_LOANNUM_DUPLICATE"      Call BKFS_STATE_CAT_SUBCAT_LOANNUM_DUPLICATE(sql,rulesData) End Select
   If Len(Trim(GLOBAL_BKFS_LOANNUMBER)) < 1 Then     Call ErrorHandler(rowNumber, "Servicer",rulesData)  Exit Function End If  If GLOBAL_BKFS_UNITPRICE <> "" Then        DataTable.Value("UnitPrice","Rules")= GLOBAL_BKFS_UNITPRICE    rulesData("UnitPrice") = GLOBAL_BKFS_UNITPRICE    End If   DataTable.Value("LoanNumber","Rules") = GLOBAL_BKFS_LOANNUMBER 
'''''''''''''''''''''''''''''''''''''''************************************************************''''''''''''''''''''''''''''''''''''''''''''''''
 'CREATING CLAIM SECTION    If BKFS_CreateNewClaim(rulesData) = False then    Call ErrorHandler(rowNumber, "Servicer",rulesData)    Exit Function End If   DataTable.Value("ClaimNumber","Rules")= Global_Claim_Number
'''''''''''''''''''''''''''''''''''''''************************************************************''''''''''''''''''''''''''''''''''''''''''''''''
 'VERIFY CLAIM Section  Environment.Value("VerifyType") = "Regular"     Select Case Trim(UCase(rulesData("Functionality")))  Case "POSITIVE"   If BKFS_VerifyEdit(rulesData) = False then              DataTable.Value("LoanNumber","Rules")= "FAIL"   DataTable.Value("ClaimNumber","Rules")= "FAIL"   Call ErrorHandler(rowNumber, "Servicer",rulesData)      Exit Function    End If        Case "NEGATIVE"    Environment.Value("BKFS_VerifyEdit") = ""     If BKFS_VerifyEdit(rulesData) = True then                     Call InsertIntoAutoBKFSResults(Environment.Value("BKFS_VerifyEdit"),rulesData("TestCaseNo"),rulesData("RuleID"),rulesData("Functionality"),GLOBAL_BKFS_LOANNUMBER,Global_Claim_Number,rulesData("StateName"),rulesData("BucketCode"),rulesData("Category1"),rulesData("SubCategory1"),rulesData("UnitPrice1"),rulesData("ServicerFromDate1"),rulesData("ServicerToDate1"),rulesData("Category2"),rulesData("SubCategory2"),rulesData("UnitPrice2"),rulesData("ServicerFromDate2"),rulesData("ServicerToDate2"),rulesData("VerifyEdit"),rulesData("ClaimStatus"))     Else     DataTable.Value("LoanNumber","Rules")= "FAIL"     DataTable.Value("ClaimNumber","Rules")= "FAIL"     Call ErrorHandler(rowNumber, "Servicer",rulesData)     Exit Function     End If         End Select'''''''''''''''''''''''''''''''''''''''************************************************************''''''''''''''''''''''''''''''''''''''''''''''''    Reporter.ReportEvent micDone,"END","BKFS_servicerDecisionService"End Function
''*******************************************************************************************' This function is useed to Function flow of the Investor side' @param ' @return' @date Created  10/05/2016' @author  Sanjith Vasireddy' @version 1.0 ' @remarks '''****************************************************************************************** 
Function BKFS_investorDecisionService(rulesData, rowNumber)  Reporter.ReportEvent micDone,"START","BKFS_investorDecisionService"  Dim Flag, executeHostName  '''''''''''''''''''''''''''''''''''''''************************************************************'''''''''''''''''''''''''''''''''''''''''''''''' 'INITIALIZE SECTION executeHostName =  Trim(rulesData("HostName")) GLOBAL_BKFS_LOANNUMBER = Trim(rulesData("LoanNumber")) Global_Claim_Number = Trim(rulesData("ClaimNumber")) Environment.Value("AlreadyExists") = False Flag = PickupTESTIDFromDB(rulesData("TestCaseNo"),"AUTO_BKFS")  If (UCASE(Flag) = "PASS") OR Ucase(executeHostName) <> Ucase(GLOBAL_HOSTNAME) OR Trim(rulesData("LoanNumber")) = "FAIL" OR UCASE(Trim(rulesData("Functionality"))) = "NEGATIVE" Then    Exit Function ElseIf UCASE(Flag) = "FAIL" Then       Environment.Value("AlreadyExists") = True End If  DataTable.GetSheet("Rules").SetCurrentRow(rowNumber) '''''''''''''''''''''''''''''''''''''''************************************************************''''''''''''''''''''''''''''''''''''''''''''''''
 'VERIFY CLAIM SECTION    'Call Verify Claim    Environment.Value("BKFS_VerifyClaimStatus") = ""   If BKFS_VerifyClaimStatus(rulesData) = True then   Call InsertIntoAutoBKFSResults(Environment.Value("BKFS_VerifyClaimStatus"),rulesData("TestCaseNo"),rulesData("RuleID"),rulesData("Functionality"),GLOBAL_BKFS_LOANNUMBER,Global_Claim_Number,rulesData("StateName"),rulesData("BucketCode"),rulesData("Category1"),rulesData("SubCategory1"),rulesData("UnitPrice1"),rulesData("ServicerFromDate1"),rulesData("ServicerToDate1"),rulesData("Category2"),rulesData("SubCategory2"),rulesData("UnitPrice2"),rulesData("ServicerFromDate2"),rulesData("ServicerToDate2"),rulesData("VerifyEdit"),rulesData("ClaimStatus"))   Else   Call ErrorHandler(rowNumber, "Investor",rulesData)          Exit Function   End If  '''''''''''''''''''''''''''''''''''''''************************************************************'''''''''''''''''''''''''''''''''''''''''''''''' Reporter.ReportEvent micDone,"END","BKFS_investorDecisionService" End Function
''*************************************************************************************************''' This function is used to login the servicer and investor side portals' @param  Role' @return' @date Created  04/27/2016' @author  Sanjith' @version 1.0 ' @remarks ''*************************************************************************************************Function BKFS_Login(byVal Role)
 Reporter.ReportEvent micDone,"START","BKFS_Login" BKFS_Login = False
    Dim URL, loginData, LS, ServicerName, loginRowNumber, TotalRows,userInfo,userInfoArray        Call load_sheet(GLOBAL_ROLES_DATAFILE,"Login") TotalRows = DataTable.GetSheet("Login").GetRowCount     URL = Environment.Value("BKFS_LoanSphere_URL")    ServicerName = UCASE(Environment.Value("SERVICER_NAME"))    SystemUtil.Run "iexplore", "-noframemerging " & URL,,,3    ''Call MaximizeBrowser    Call ProxyLogin        For loginRowNumber = 1 to TotalRows     Set loginData = getDataByRowNumber("Login",loginRowNumber)     Select Case Ucase(Role)      Case "SERVICER"       If GLOBAL_HOSTNAME = Ucase(loginData("HostName")) AND Ucase(loginData("Servicer")) = ServicerName AND Ucase(Role) = Ucase(loginData("Role"))  Then          Exit For        End If      Case "INVESTOR"          If GLOBAL_HOSTNAME = Ucase(loginData("HostName")) AND Ucase(Role) = Ucase(loginData("Role")) Then             Exit For          End IF      Case "IPAVENDOR"       If GLOBAL_HOSTNAME = Ucase(loginData("HostName")) AND Ucase(Role) = Ucase(loginData("Role")) Then          Exit For       End IF      Case "IPAINVESTOR"       If GLOBAL_HOSTNAME = Ucase(loginData("HostName")) AND Ucase(Role) = Ucase(loginData("Role")) Then          Exit For       End IF      Case "INVESTOR_MGR"       If GLOBAL_HOSTNAME = Ucase(loginData("HostName")) AND Ucase(Role) = Ucase(loginData("Role")) Then        Exit For       End If      Case "INVESTOR_PROCESSOR"       If GLOBAL_HOSTNAME = Ucase(loginData("HostName")) AND Ucase(Role) = Ucase(loginData("Role")) Then        Exit For       End If      Case "VENDOR_UI"       If GLOBAL_HOSTNAME = Ucase(loginData("HostName")) AND Ucase(Role) = Ucase(loginData("Role")) Then        Exit For       End If                  End Select    Next    Set LS = Browser("LoanSphere").Page("LoanSphere")        LS.Sync LS.WebEdit("Company_Code").Set loginData("Company_Code") LS.WebEdit("UserName").Set loginData("User_ID") LS.WebEdit("Password").Set loginData("PWD") wait(03) 'LS.WebButton("Login").WaitProperty("Enabled","true",20000) LS.WebButton("Login").Click LS.Sync If LS.Link("Logoff").Exist(30) Then  Reporter.ReportEvent micPass,"Login Screen Verification","Logged in as a ("&Role&")"    If Role = "Servicer" OR Role = "IPAVendor" OR Role = "Vendor_UI" Then      Browser("LoanSphere").Page("LoanSphere").Sync       Browser("LoanSphere").Page("LoanSphere").Image("name:=btnNewInvoice.*", "html tag:=INPUT").Click      Browser("LoanSphere").Page("LoanSphere").Sync        Else            Browser("LoanSphere").Page("LoanSphere").Sync        Browser("LoanSphere").Page("LoanSphere").Image("name:=btnInvPortal.*", "html tag:=INPUT", "index:=0").Click    Browser("LoanSphere").Page("LoanSphere").Sync   End If  userInfo = Trim(LS.WebElement("html id:=.*lblUserInfo","html tag:=SPAN").GetROProperty("innertext"))  userInfoArray = Split(userInfo,"/")  Environment.Value("ProcessorName") = userInfoArray(0)  Environment.Value("User") = userInfoArray(1) Else    Reporter.ReportEvent micFail,"Login Screen Verification","Invoicing Screen not found" End If  Set loginData = Nothing  Set LS = Nothing   If Err.Number <> 0 Then  Reporter.ReportEvent micFail,"BKFS_Login",Err.Description  BKFS_Login = False Else  Reporter.ReportEvent micDone,"END","BKFS_Login"  BKFS_Login = True End If  End Function
''*************************************************************************************************''' This function is used logout the servicer and investor portals' @param  ' @return' @date Created  04/27/2016' @author  Sanjith' @version 1.0 ' @remarks ''*************************************************************************************************Function BKFS_Logout    Reporter.ReportEvent micDone,"START","BKFS_Logout" BKFS_Logout = False If Browser("LoanSphere").Page("LoanSphere").WebElement("Home").Exist(10) Then    Browser("LoanSphere").Page("LoanSphere").WebElement("Home").Click   Else    Browser("LoanSphere").Page("LoanSphere").Image("title:=.*home","html tag:=IMG").Click End If     Wait(03)    If Browser("LoanSphere").Page("LoanSphere").WebElement("Logoff").Exist(10)  Then     Browser("LoanSphere").Page("LoanSphere").WebElement("Logoff").Click       Else     Browser("LoanSphere").Page("LoanSphere").Link("html tag:=A","innerhtml:=Logoff").Click       End If    'Browser("LoanSphere").Page("LoanSphere").WebElement("Logoff").Click       Browser("LoanSphere").Page("LoanSphere").Sync    Wait 10    Systemutil.CloseProcessByName "iexplore.exe"
 If Err.Number <> 0 Then  Reporter.ReportEvent micFail,"BKFS_Logout",Err.Description  BKFS_Logout = False Else  Reporter.ReportEvent micDone,"END","BKFS_Logout"  BKFS_Logout = True End If   End Function''*************************************************************************************************''' This function is used search the claims in all the situations' @param  SearchScenario' @return' @date Created  09/27/2016' @author  Sanjith' @version 1.0 ' @remarks ''*************************************************************************************************
Function LS_SearchScenarios(SearchScenario)  Reporter.ReportEvent micDone,"START","LS_SearchScenarios"    Dim LS, Pos, searchScenarioData, searchType, state, status, onlyACK, amtStartRange, amtEndRange  Dim onlyAckInvReview, department, claimType, servicerName, fromDate, toDate, bucketCode,exceptionType  Dim subCotegory, invLoanNumber, searchMethod, vendorType, bValue, claimNumber,processor,getDateTimestamp,WshShell    LS_SearchScenarios = False  RepositoriesCollection.Add(BKFS_RepPath&"BKFS_SearchScenarios.tsr")  Pos = RepositoriesCollection.Find(BKFS_RepPath&"BKFS_SearchScenarios.tsr")   Set LS = Browser("LoanSphere").Page("LoanSphere")    LS.Sync    If LS.WebElement("Home").Exist(10) Then   LS.WebElement("Home").Click  Else   LS.Image("title:=.*home","html tag:=IMG").Click  End If  LS.Sync  Set searchScenarioData = getData(GLOBAL_SEARCH_DATA,"SearchScenarios","SearchScenario",SearchScenario)  searchType = Trim(searchScenarioData("SearchType"))    Sourcel =  Trim(searchScenarioData("Source"))  servicerName = Trim(searchScenarioData("ServicerName"))   vendorName =  Trim(searchScenarioData("VendorName"))  vendorType = Trim(searchScenarioData("VendorType"))   investorVendorGroup = Trim(searchScenarioData("InvestorVendorGroup"))   status = Trim(searchScenarioData("Status"))  state = Trim(searchScenarioData("State"))   loanTag = Trim(searchScenarioData("LoanTag"))   excludeException = Trim(searchScenarioData("ExcludeExceptions"))   exceptionType = Trim(searchScenarioData("ExceptionType"))    processor = Trim(searchScenarioData("Processor"))     bucketCode = Trim(searchScenarioData("BucketCode"))  subCotegory = Trim(searchScenarioData("SubCat"))   claimType = Trim(searchScenarioData("ClaimType"))  jobName = Trim(searchScenarioData("JobName"))  SellerServicerNum = Trim(searchScenarioData("SellerServicerNum"))   invLoanNumber = Trim(searchScenarioData("InvLoanNumber"))   claimNumber = Trim(searchScenarioData("ClaimNumber"))  servicerLoanNum  = Trim(searchScenarioData("ServicerLoaNum"))   amtStartRange = Trim(searchScenarioData("AmtStartRange"))  amtEndRange = Trim(searchScenarioData("AmtEndRange"))  fromDate = Trim(searchScenarioData("FromDate"))  toDate = Trim(searchScenarioData("ToDate"))  searchBy = Trim(searchScenarioData("SearchBy"))  sortBy =  Trim(searchScenarioData("SortBy"))  sortByDirection = Trim(searchScenarioData("SortByDirection"))   onlyACK = Trim(searchScenarioData("OnlyAck"))  onlyAckInvReview = Trim(searchScenarioData("OnlyAckInvReview"))   department = Trim(searchScenarioData("Department"))  searchMethod = Trim(searchScenarioData("SearchMethod"))   Select Case Ucase(searchType)   Case Ucase("IPA_Investor")    Setting.WebPackage("ReplayType") = 2  LS.WebElement("innertext:=Reports","html tag:=NOBR").FireEvent "onclick"  Wait(2)  LS.WebElement("innertext:=IPA","html tag:=NOBR").FireEvent "onclick"  Setting.WebPackage("ReplayType") = 1  Wait(2)  LS.WebElement("innertext:=Request Search","html tag:=NOBR").Click  Wait(2)        Case Ucase("Mass_Approve")    Setting.WebPackage("ReplayType") = 2    LS.WebElement("innertext:=Admin","html tag:=NOBR").FireEvent "onclick"    Wait(2)  LS.WebElement("innertext:=Manage Claims","html tag:=NOBR").FireEvent "onclick"  Setting.WebPackage("ReplayType") = 1  Wait(2)  LS.WebElement("innertext:=Mass Approve","html tag:=NOBR").Click    Case Ucase("Mass_Assign")    Setting.WebPackage("ReplayType") = 2    LS.WebElement("innertext:=Admin","html tag:=NOBR").FireEvent "onclick"    Wait(2)  LS.WebElement("innertext:=Manage Claims","html tag:=NOBR").FireEvent "onclick"  Setting.WebPackage("ReplayType") = 1  Wait(2)  LS.WebElement("innertext:=Mass Assign","html tag:=NOBR").Click   Case Ucase("Investor")    LS.Link("html id:=lnkMyClaims","html tag:=A" ).Click       Case Ucase("Servicer")       LS.Link("name:=View Existing Claims.*", "html tag:=A").Click          Case Ucase("Vendor_UI")    LS.Link("name:=View Existing Claims.*", "html tag:=A").Click    End Select            LS.Sync        bValue = LS.WebButton("Delete").GetROProperty("disabled")  If bValue = 0 Then   LS.WebButton("Delete").Click   Browser("LoanSphere").Dialog("Message from webpage").WinButton("OK").Click  End If   If Sourcel <> "" Then   LS.WebList("lstClaimSource").Select Sourcel  End If  If servicerName <> "" Then         LS.WebList("ServicerName").Select servicerName        End If          If vendorName <> "" Then         LS.WebList("ServicerName").Select "Fannie Mae - Vendors"         LS.Sync         LS.WebList("VendorNames").Select vendorName        End If        If vendorType <> "" Then         LS.WebList("lstInvVendorType").Select vendorType        End If         If investorVendorGroup <> "" Then         LS.WebList("lstInvVendorGroup").Select investorVendorGroup        End If  If Ucase(searchType) = Ucase("IPA_Investor") Then         If status <> "" Then          LS.WebList("lstIPAStatus").Select status         End If        Else            If status <> "" Then          LS.WebList("ClaimStatus").Select status         End If        End If         If state <> "" Then            LS.WebList("lstState").Select state        End If                If loanTag <> "" Then         LS.WebList("lstLoanTag").Select loanTag        End If             If excludeException <> "" Then         LS.WebCheckBox("chkExcludeExceptions").Set excludeException        End If          If exceptionType <> ""Then         LS.WebList("lstExceptionType").Select exceptionType        End If         If processor <> "" Then         LS.WebList("lstProcessor").Select processor        End If          If bucketCode <> "" Then         LS.WebList("BucketCode_Claim").Select bucketCode        End If               If subCotegory <> "" Then         LS.WebList("SubCategory_Claim").Select subCotegory        End If             If claimType <> "" Then         LS.WebList("ClaimTypeListBox").Select claimType        End If            If jobName <> "" Then         LS.WebEdit("JobNameTextBox").Set jobName        End If  If SellerServicerNum <> "" Then   LS.WebEdit("SellerServicerIdTextBox").Set SellerServicerNum  End If             If invLoanNumber <> "" Then                  LS.WebEdit("InvestorLoanNumber").Set invLoanNumber        End If            If claimNumber <> "" Then         LS.WebEdit("txtClaimNumber").Set claimNumber        End If               If servicerLoanNum<> "" Then         LS.WebEdit("ServicerLoanNumber").Set servicerLoanNum        End If                If Ucase(searchType) = Ucase("Servicer") Then         If amtStartRange <> "" Then                   LS.WebEdit("ClaimAmtStartRange").Set amtStartRange         End If         If amtEndRange <> "" Then                   LS.WebEdit("ClaimAmtEndRange").Set amtEndRange         End If        Else         If amtStartRange <> "" Then                   LS.WebEdit("txtStartRange").Set amtStartRange         End If    If amtEndRange <> "" Then                   LS.WebEdit("txtEndRange").Set amtEndRange         End If                End If     If Ucase(searchType) = Ucase("IPA_Investor") Then         If fromDate <> "" Then                   LS.WebEdit("fromDate_IPA").Set fromDate         End If         If toDate <> "" Then                   LS.WebEdit("toDate_IPA").Set toDate         End If        Else            If fromDate <> "" Then                   LS.WebEdit("fromDate_Claim").Set fromDate         End If     If toDate <> "" Then                   LS.WebEdit("toDate_Claim").Set toDate         End If                 End If               If searchBy <> "" Then         LS.WebList("SearchBy").Select searchBy        End If         If sortBy <> "" Then         LS.WebList("ddlSortByColumn").Select sortBy        End If           If sortByDirection <> "" Then    If UCase(sortByDirection) = "Ascending" Then    LS.WebRadioGroup("rdSortByDirection").Select "Asc"   Else    LS.WebRadioGroup("rdSortByDirection").Select "Desc"   End If                         End If  If onlyACK <> "" Then         LS.WebCheckBox("chkStatusAck").Set "ON"        End If             If onlyAckInvReview <> ""  Then         LS.WebCheckBox("chkStatusAckReview").Set "ON"        End If               If department <> "" Then         LS.WebList("ddlDepartment").Select department        End If
        If Ucase(searchMethod) = "SEARCH" Then         LS.WebButton("Search").Click        Else         Set WshShell = CreateObject("WScript.Shell")         wait (2)         LS.WebEdit("InvestorLoanNumber").Click   WshShell.SendKeys "{ENTER}"   wait (3)   Set WshShell = Nothing   Wait (5)        End If        LS.Sync        getDateTimestamp = QTP_GetDateTimeString             If LS.WebElement("innerhtml:=No rows were returned.*","html tag:=SPAN").Exist(10) Then           LS.WebEdit("fromDate_Claim").Set "01/01/2016"         LS.WebEdit("toDate_Claim").Set "01/01/2018"      LS.WebButton("Search").Click        End If  If LS.WebTable("Request ID").Exist(30) Then   Reporter.ReportEvent micPass, "Verify Search Criteria_"&SearchScenario&".","-"&SearchScenario& "Claims Summary Opens"            If instr(Ucase(Environment.Value("TestName")),"SHAKEOUT") Then             LS.CaptureBitmap GLOBAL_TEST_PATH &"02.BKFS_MyClaimSearch_ _"&SearchScenario&"-"& getDateTimestamp &".PNG"            Else             LS.CaptureBitmap GLOBAL_TEST_PATH & Environment.Value("TestName") & SearchScenario &"PASSED"& getDateTimestamp&".PNG"                End If        Else   Reporter.ReportEvent micFail, "Verify Search Criteria_"&SearchScenario&".","-"&SearchScenario& "Claims Summary Not Opens"    If instr(Ucase(Environment.Value("TestName")),"SHAKEOUT") Then    LS.CaptureBitmap GLOBAL_TEST_PATH &"02.BKFS_MyClaimSearch_"&SearchScenario&"_Failed-"& getDateTimestamp &".PNG"   Else    LS.CaptureBitmap GLOBAL_TEST_PATH & Environment.Value("TestName") & SearchScenario &"FAILED"& getDateTimestamp&".PNG"   End If    End If      Call QTP_CaptureScreenshot      RepositoriesCollection.Remove(Pos)  If Err.Number <> 0 Then  Reporter.ReportEvent micFail,"LS_SearchScenarios",Err.Description  LS_SearchScenarios = False  Else  Reporter.ReportEvent micDone,"END","LS_SearchScenarios"  LS_SearchScenarios = True  End If End Function''*************************************************************************************************''' This function is used to click on any linkfrom the search results webtable' @param  (ByVal ItemName,byVal loanNumber, byVal ClaimStatus) here we need to pass the values of header text for which Item you need to click' @return' @date Created  010/05/2016' @author  Sanjith' @version 1.0 ' @remarks ''*************************************************************************************************
Function LS_ClickSearchResults(searchScenarioData,ByVal ItemName,byVal loanNumber, byVal ClaimStatus) Reporter.ReportEvent micDone,"START","LS_ClickSearchResults"  Dim LS, sWebTable, rowNo, loanNumbercol, claimStatusCol, blnFound, claimNum Dim Pos, colNo, totalRowCount, i, InvestorLoanNum, sClaimStatus, getDateTimestamp  RepositoriesCollection.Add(BKFS_RepPath&"BKFS_SearchScenarios.tsr")    Pos = RepositoriesCollection.Find(BKFS_RepPath&"BKFS_SearchScenarios.tsr") LS_ClickSearchResults = False Set LS = Browser("LoanSphere").Page("LoanSphere") LS.Sync Set sWebTable = LS.WebTable("Request ID") rowNo = 1  blnFound = False If loanNumber <> "" Then    loanNumbercol = findTextFromWebTableAllColumn(sWebTable, rowNo,loanNumber)    If ClaimStatus <> "" Then      claimStatusCol = findTextFromWebTableAllColumn(sWebTable, rowNo,ClaimStatus)    End If     colNo = findTextFromWebTableAllColumn(sWebTable, rowNo,ItemName)    totalRowCount = sWebTable.RowCount     For i = 2 to totalRowCount      InvestorLoanNum = Trim(sWebTable.GetCellData(i,loanNumbercol))       If ClaimStatus <> "" AND Ucase(Trim(searchScenarioData("LPSorBKFS"))) = ""  Then        sClaimStatus = Ucase(Trim(sWebTable.GetCellData(i,claimStatusCol)))         If sClaimStatus = Ucase(Trim(searchScenarioData("Status"))) AND CheckUsedLoanNo(InvestorLoanNum) = False Then       InsertUsedLoanNo InvestorLoanNum, GLOBAL_RULE_ID, Environment.Value("TestName"), Date       blnFound = True            Exit For                 End If       ElseIf Ucase(Trim(searchScenarioData("LPSorBKFS"))) = "NO" Then         claimNum = Trim(Ucase(LS.WebTable("Request ID").GetCellData(i,colNo)))         If Left(claimNum,3) <>"LPS" OR Left(claimNum,4) <> "BKFS"Then          blnFound = True          Exit For         End IF        ''End If       Else        If CheckUsedLoanNo(InvestorLoanNum) = False Then         InsertUsedLoanNo InvestorLoanNum, GLOBAL_RULE_ID, Environment.Value("TestName"), Date         blnFound = True          Exit For          End If       End If                  Next End If getDateTimestamp = QTP_GetDateTimeString If blnFound = True Then     Reporter.ReportEvent micPass, "Verify Search Results status","Search results displayed as expected"     LS.CaptureBitmap GLOBAL_TEST_PATH & Environment.Value("TestName")&"LS_ClickSearchResults_PASSED"&ClaimStatus&getDateTimestamp&".PNG"      sWebTable.ChildItem(i,colNo,"Link",0).Click     Else        LS.CaptureBitmap GLOBAL_TEST_PATH & Environment.Value("TestName")&"LS_ClickSearchResults_FAILED"&ClaimStatus&getDateTimestamp&".PNG"            Reporter.ReportEvent micFail, "Verify Search Results status","Search results not displayed as expected"  End If LS.Sync If Browser("LoanSphere").Dialog("Message from webpage").Exist(10) Then     Browser("LoanSphere").Dialog("Message from webpage").WinButton("OK").Click End If If Browser("LoanSphere Invoicing").Page("LoanSphere Invoicing").WebButton("Close").Exist(10) Then    Browser("LoanSphere Invoicing").Page("LoanSphere Invoicing").WebButton("Close").Click End If LS.Sync  getDateTimestamp = QTP_GetDateTimeString  If LS.WebElement("html id:=.*lblStatus", "html tag:=SPAN").Exist(30) Then    Reporter.ReportEvent micPass, "Claim Verification","-" &   Global_Claim_Number       &"Claim Screen Opens"    LS.CaptureBitmap GLOBAL_TEST_PATH & Environment.Value("TestName")&"ClaimScreen_Passed"&getDateTimestamp&".PNG" Else    Reporter.ReportEvent micFail, "Claim Verification","-" &   Global_Claim_Number       &"Claim Screen Screen Not Open"    LS.CaptureBitmap GLOBAL_TEST_PATH & Environment.Value("TestName")&"ClaimScreen_failed"&getDateTimestamp&".PNG" End If  RepositoriesCollection.Remove(Pos) Set LS = Nothing Set sWebTable = Nothing Set Pos = Nothing If Err.Number <> 0 Then  Reporter.ReportEvent micFail,"LS_ClickSearchResults",Err.Description  LS_ClickSearchResults = False   Else  Reporter.ReportEvent micDone,"END","LS_ClickSearchResults"  LS_ClickSearchResults = True End IfEnd Function
''*************************************************************************************************''' This function is used to get the item form search results table For Ex: Loand Number or Claim Number' @param  (ByVal ItemName, ByVal status) here we need to pass the values of header text for which Item you need to retrive ' @return' @date Created  010/05/2016' @author  Sanjith' @version 1.0 ' @remarks ''*************************************************************************************************
Function LS_GetSearchResults(searchScenarioData,ByVal ItemName,byVal loanNoColName, ByVal status) Reporter.ReportEvent micDone,"START","LS_GetSearchResults"  RepositoriesCollection.Add(BKFS_RepPath&"BKFS_SearchScenarios.tsr")    Pos = RepositoriesCollection.Find(BKFS_RepPath&"BKFS_SearchScenarios.tsr")  Dim LS, sWebTable, Pos, rowNo, colNo, sStatusCol, TotalRows Dim i, sStatus, getDateTimestamp, loanColNo LS_GetSearchResults = False  Set LS = Browser("LoanSphere").Page("LoanSphere") LS.Sync Set sWebTable = LS.WebTable("Request ID") rowNo = 1   colNo = findTextFromWebTableAllColumn(sWebTable, rowNo,ItemName) loanColNo = findTextFromWebTableAllColumn(sWebTable, rowNo,loanNoColName) sStatusCol = findTextFromWebTableAllColumn(sWebTable, rowNo,status)  TotalRows = sWebTable.RowCount  For i = 2 to TotalRows-1   sStatus = Trim(sWebTable.GetCellData(i,sStatusCol))   Select Case ItemName    Case "Servicer Loan #"     GLOBAL_Servicer_LoanNumber = Trim(sWebTable.GetCellData(i,colNo))    Case "Claim #"     Global_Claim_Number = Trim(sWebTable.GetCellData(i,colNo))   End Select   'Global_Claim_Number = Trim(sWebTable.GetCellData(i,colNo))   GLOBAL_BKFS_LOANNUMBER = Trim(sWebTable.GetCellData(i,loanColNo))    If Ucase(sStatus) = Ucase(Trim(searchScenarioData("Status"))) AND CheckUsedLoanNo(GLOBAL_BKFS_LOANNUMBER) = False Then     InsertUsedLoanNo GLOBAL_BKFS_LOANNUMBER, GLOBAL_RULE_ID, Environment.Value("TestName"), Date     getDateTimestamp = QTP_GetDateTimeString     LS.CaptureBitmap GLOBAL_TEST_PATH & Environment.Value("TestName")&"LS_GetSearchResults_PASSED"&getDateTimestamp&".PNG"         Exit For          End If      Next     If LS.WebElement("Home").Exist(10) Then    LS.WebElement("Home").Click   Else    LS.Image("title:=.*home","html tag:=IMG").Click End If LS.Sync  RepositoriesCollection.Remove(Pos) Set LS = Nothing Set sWebTable = Nothing Set Pos = Nothing  If Err.Number <> 0 Then  Reporter.ReportEvent micFail,"LS_GetSearchResults",Err.Description  LS_GetSearchResults = False   Else  Reporter.ReportEvent micDone,"END","LS_GetSearchResults"  LS_GetSearchResults = True   End IfEnd Function
    Set searchScenarioData = getData(GLOBAL_SEARCH_DATA,"SearchScenarios","SearchScenario","Servicer_Acknowledged")    Call LS_GetSearchResults(searchScenarioData,"Claim #","Investor Loan #","Claim Status")'
Function BKFS_VerifyColumnHeader(ByVal headerName,Byval exists) Reporter.ReportEvent micDone,"START","BKFS_VerifyColumnHeader" Dim Pos,LS, rowNo, colNo, sWebTable,itemName RepositoriesCollection.Add(BKFS_RepPath&"BKFS_SearchScenarios.tsr") Pos = RepositoriesCollection.Find(BKFS_RepPath&"BKFS_SearchScenarios.tsr")   BKFS_VerifyColumnHeader = False Set LS = Browser("LoanSphere").Page("LoanSphere") LS.Sync Set sWebTable = LS.WebTable("Request ID") If Not sWebTable.Exist(10) Then  Set sWebTable = LS.WebTable("html id:=grdResults","html tag:=TABLE") End If rowCount = sWebTable.RowCount rowNo = 1 colNo = findTextFromWebTableAllColumn(sWebTable, rowNo,headerName) itemName = headerName If Ucase(exists) = "YES" Then  If colNo <> 0 Then   Reporter.ReportEvent micPass, "Verify column header of "&itemName, "The" &itemName& " is exists."     Else   Reporter.ReportEvent micFail, "Verify column header of "&itemName, "The" &itemName& " is not exists"  End If  Else  If colNo = 0  Then   Reporter.ReportEvent micPass, "Verify column header of "&itemName, "The" &itemName& " is not exists"  Else   Reporter.ReportEvent micFail, "Verify column header of "&itemName, "The" &itemName& " is exists."  End If  End If getDateTimestamp = QTP_GetDateTimeString LS.CaptureBitmap GLOBAL_TEST_PATH & Environment.Value("TestName")&"Verify "&itemName& "Header"& getDateTimestamp&".PNG"       Call QTP_CaptureScreenshot Set LS = Nothing RepositoriesCollection.Remove(Pos)   If Err.Number <> 0 Then  Reporter.ReportEvent micFail,"BKFS_VerifyColumnHeader",Err.Description  BKFS_VerifyColumnHeader = False Else  Reporter.ReportEvent micDone,"END","BKFS_VerifyColumnHeader"  BKFS_VerifyColumnHeader = True End If End Function
Function BKFS_VerifyAmountRange(searchScenarioData) Reporter.ReportEvent micDone,"START","BKFS_VerifyAmountRange" Dim Pos,LS, rowNo, colNo, sWebTable, actualValue RepositoriesCollection.Add(BKFS_RepPath&"BKFS_SearchScenarios.tsr") Pos = RepositoriesCollection.Find(BKFS_RepPath&"BKFS_SearchScenarios.tsr")   BKFS_VerifyAmountRange = False amtStartRange = Trim(searchScenarioData("AmtStartRange")) amtEndRange = Trim(searchScenarioData("AmtEndRange")) SearchScenario = Trim(searchScenarioData("SearchScenario")) Set LS = Browser("LoanSphere").Page("LoanSphere") LS.Sync Set sWebTable = LS.WebTable("Request ID") rowCount = sWebTable.RowCount rowNo = 1 colNo = findTextFromWebTableAllColumn(sWebTable, rowNo,"Requested Amount") If colNo <> 0 Then  For rowNo = 1 To rowCount-3   actualValue = cCur(Trim(sWebTable.GetCellData(rowNo+1,colNo)))   bValue = False   If amtEndRange = "" Then    ItemValue = "$"&amtStartRange    ItemValue = cCur(ItemValue)    If actualValue >= ItemValue Then     bValue = True    End If   ElseIf amtStartRange = "" Then    ItemValue = "$"&amtEndRange    ItemValue = cCur(ItemValue)    If actualValue <= ItemValue Then     bValue = True    End If   Else    ItemValue1 = "$"&amtStartRange    ItemValue2 = "$"&amtEndRange    ItemValue1 = cCur(ItemValue1)    ItemValue2 = cCur(ItemValue2)    If actualValue >= ItemValue1 AND actualValue <= ItemValue2 Then     bValue = True    End If     End If   If bValue = True Then    Reporter.ReportEvent micPass,"Verify Actual Result of "&SearchScenario, "The "&ItemValue&" is displayed as expected in row "&rowNo&"."   Else    Reporter.ReportEvent micFail,"Verify Actual Result of "&SearchScenario, "Actual Value "&actualValue&" and Expected value "&ItemValue&" is not matched in row "&rowNo&"."    End If  Next Else  Reporter.ReportEvent micFail,"Verify Actual Result of "&SearchScenario, "Coloume Not Found" End If   getDateTimestamp = QTP_GetDateTimeString LS.CaptureBitmap GLOBAL_TEST_PATH & Environment.Value("TestName") & SearchScenario &"_"& getDateTimestamp&".PNG"       Call QTP_CaptureScreenshot Set LS = Nothing RepositoriesCollection.Remove(Pos)   If Err.Number <> 0 Then  Reporter.ReportEvent micFail,"BKFS_VerifyAmountRange",Err.Description  BKFS_VerifyAmountRange = False Else  Reporter.ReportEvent micDone,"END","BKFS_VerifyAmountRange"  BKFS_VerifyAmountRange = True End If End Function'''''''''''''''''''''''''''''''''''''''''''''''';''EQ:''Initialize script:'' Added CommonConfig and removed old declarations  - Anbu, 2/25/14'*********** Start Common Code *******************Dim QCResourcesPathQCResourcesPath = "[QualityCenter\Resources] Resources\Common - Credit UAT\"
'Call Environment.LoadFromFile(QCResourcesPath  + "CreditUAT_CommonConfig", True) -- doesn't seem to work on the VD-4UAT VMs which have QTP10Call Environment.LoadFromFile(QCResourcesPath  + "CreditUAT_CommonConfig")
Dim SharedDrive, SharedID_MapDrive, SharedIDPwd_LDAP, SharedIDPwd_DB, SharedIDPwd_AD, SharedIDPwd_QC, SharedLibPathDim GLOBAL_AUTO_DBNAME, GLOBAL_SHARED_ID, GLOBAL_SHARED_ID_PWD_DBSharedDrive = Environment.Value("SharedDrive")GLOBAL_SHARED_ID = Environment.Value("SharedID")SharedID_MapDrive = Environment.Value("SharedID_MapDrive")SharedIDPwd_AD = Environment.Value("SharedIDPwd_AD")GLOBAL_SHARED_ID_PWD_DB = Environment.Value("SharedIDPwd_DB")SharedIDPwd_LDAP = Environment.Value("SharedIDPwd_LDAP")'SharedIDPwd_QC = Environment.Value("SharedIDPwd_QC")GLOBAL_AUTO_DBNAME = Environment.Value("AutoDBName")
Sub MapNWDrive(Letter, SharedFolder, UserID, EncPwd)   'On Error Resume Next   Call RemoveAllNWDrives
 If InStr(Letter, ":") = 0Then   Letter = Letter & ":" End If    Set WshNetwork = CreateObject("WScript.Network") WshNetwork.MapNetworkDrive Letter, SharedFolder, "False", UserID, EncPwd
 Wait 5 'On Error Goto 0End Sub
Sub RemoveAllNWDrives 'On Error Resume Next Dim WshNetwork, NWDrives Set WshNetwork = CreateObject("WScript.Network") Set NWDrives = WshNetwork.EnumNetworkDrives For i = 0 To NWDrives.Count-1 Step 2  If  NWDrives.Item(i) <> "" Then   WshNetwork.RemoveNetworkDrive NWDrives.Item(i), True, True  End If NextEnd Sub
'********** End Common Code ************************Dim GLOBAL_PROJECT_NAMEGLOBAL_PROJECT_NAME = "EQUATOR"
Dim EQSharedDrive, EQLibPath, EQScriptPath
EQSharedDrive = SharedDrive & "EquatorExecution"Call MapNWDrive("T", EQSharedDrive, SharedID_MapDrive, SharedIDPwd_AD)EQSharedDrive = "T:\"EQScriptPath = EQSharedDrive + "Scripts\"EQLibPath = EQSharedDrive + "Libraries\"
If Instr(Environment.Value("ProductVer"), "10.") > 0 Then 'QTP Version 10    ExecuteFile EQLibPath + "EQ_Common.qfl"Else LoadFunctionLibrary EQLibPath + "EQ_Common.qfl" '11,12End If
Dim ExpectedFieldNames, ExpectedData
'#################################FUNCTIONS#########################################'Dim DictObj'EQSharedDrive = "\\fanniemae.com\CORP\DC\Shared\CreditUATAutomation\EquatorExecution\"'EQ_DataPath = EQSharedDrive & "Input Data\"''' This function loads the queries for DataValidation into dictionary' ' @remarks' @author Mahesh Vadlamani' @version 1.0' @date 09/11/2013Function LoadQueries
 Dim oExcel, oWorkbook, oSheet Dim DictDataValQuery Dim iRowCount, sTriggerName, sQuery Set oExcel = CreateObject("Excel.Application") Set DictDataValQuery = CreateObject("Scripting.Dictionary")    'DictObj.CompareMode=1 Set oWorkbook = oExcel.Workbooks.Open (EQ_DataPath & "DataValidation_Input.xls")    Set oSheet = oWorkbook.Worksheets("Data") iRowCount = oSheet.usedrange.rows.count DictDataValQuery.RemoveAll For i =2 to iRowCount  sTriggerName = Trim(oSheet.cells(i, 1))  sQuery = Trim(oSheet.cells(i, 4))  DictDataValQuery.Add UCase(sTriggerName),sQuery Next oWorkbook.Close 1 Set oSheet = Nothing Set oWorkbook = Nothing Set oExcel = Nothing
 Set LoadQueries = DictDataValQuery
End Function
'Function DB_Access(ByVal dBase,ByVal SQL_String)'   Const DB_CLOSED = 0'   Dim oDBConn'   Dim oRS'   Dim arrayRS'   Set oDBConn = CreateObject("adodb.connection")'   oDBConn.ConnectionString = "DRIVER={Microsoft ODBC for Oracle};Server="&dBase&".WORLD;Uid=l2ur47yl;Pwd=Au14tom_;"'   oDBConn.Open'   Set oRS = CreateObject("adodb.recordset")'   oRS.Open SQL_String, oDBConn'   If oRS Is Nothing Then'    arrayRS = Array()'    oRS.Close'   ElseIf oRS.State = DB_CLOSED Then'    arrayRS = Array()' ElseIf oRS.EOF = True Then'  arrayRS = Array()'  oRS.Close' Else'  arrayRS = oRS.GetRows'  oRS.Close'   End If'   oDBConn.Close'   Set oRS = Nothing'   Set oDBConn = Nothing'   DB_Access = arrayRS'End Function
'Function GetDateTimeString' Dim MyDate, Temp' MyDate = Month(Now) &  Day(Now) & Year(Now) &"_" & Hour(Now) & Minute(Now)'' Temp = Month(Now)' If Temp < 10 Then'  Temp = "0" & Temp' End If'    MyDate = Temp'' Temp = Day(Now)' If Temp < 10 Then'  Temp = "0" & Temp' End If'' MyDate = MyDate & Temp & Year(Now) & "_"'' Temp = Hour(Now)' If Temp < 10 Then'  Temp = "0" & Temp' End If'' MyDate = MyDate & Temp''' Temp = Minute(Now)' If Temp < 10 Then'  Temp = "0" & Temp' End If'' MyDate = MyDate & Temp'' GetDateTimeString = MyDate'End Function
Public Function ApplyXSL(ByVal inputXML, ByVal inputXSL, ByVal outputFile)    sXMLLib = "MSXML2.DOMDocument"  Set xmlDoc = CreateObject(sXMLLib) Set xslDoc = CreateObject(sXMLLib)   xmlDoc.async = False  xslDoc.async = False   xslDoc.load inputXSL  xmlDoc.load inputXML   outputText = xmlDoc.transformNode(xslDoc.documentElement)  Set FSO = CreateObject("Scripting.FileSystemObject")  Set outFile = FSO.CreateTextFile(outputFile,True)  outFile.Write outputText  outFile.Close  Set outFile = Nothing  Set FSO = Nothing  Set xmlDoc = Nothing  Set xslDoc = Nothing  Set xmlResults = NothingEnd Function
' This function compairs the expected value of TOQC01 table with  AORLQ19 table for a given REOID .' ' @remarks' @author Naresh Jayaseelan' @version 1.0' @date 09/26/2014
Function DB_ValidateValidations Dim fso, oDataFile, DictDataValQuery Dim arrayDataVal, arrayDataValTemp Dim bTCFlag  'InitializeScript Set fso = CreateObject("Scripting.FileSystemObject") Set oDataFile = fso.CreateTextFile("C:\Data_Validation_" & GetDateTimeString & ".csv", False) oDataFile.WriteLine("Trigger Name,REO ID,Field Name,Expected Value,Actual Value,Result")  Set DictDataValQuery = LoadQueries() sDataValQuery = "Select REO_ID, TRIGGER_NAME, EXP_VALUES, EXP_FIELDNAMES From EQ_DATAVAL_RESULT Where STATUS Is Null" arrayDataValQueryTemp = QTP_ExecuteDBQuery("TOQC01", sDataValQuery) sDataValQuery = "Select REO_ID, TRIGGER_NAME, EXP_VALUES, EXP_FIELDNAMES From EQ_DATAVAL_RESULT Where USED_DATE < SYSDATE - 1/12 AND STATUS Is Null" arrayDataVal = QTP_ExecuteDBQuery("TOQC01", sDataValQuery)  If UBound(arrayDataVal) > -1  Then  For i=0 To UBound(arrayDataVal, 2)   bTCFlag = True '  Global_REO_ID="As092334"   If Trim(arrayDataVal(0, i))=Trim(Global_REO_ID) Then     reo_id = arrayDataVal(0, i)     trigger_name = arrayDataVal(1, i)     expvalues = arrayDataVal(2, i)     expfieldnames = arrayDataVal(3, i)     myArray = Split(expvalues, ",")     fieldArray = Split(expfieldnames, ",")     sSQLString = DictDataValQuery.Item(UCase(trigger_name)) & " AND REO_ID = '" & reo_id & "'"' "select db_query from eq_dataval where trigger_name = '" & trigger_name & "'"     arrayRS = QTP_ExecuteDBQuery("AORLQ19", sSQLString)     If UBound(arrayRS) > -1 Then      For j = 0 to UBound(arrayRS)       If IsNull(arrayRS(j, 0)) Then        arrayRS(j, 0) = "Null"       End If       If CStr(myArray(j)) = CStr(arrayRS(j, 0))  Then        Reporter.ReportEvent micPass, "Data Validation of " & arrayDataVal(1, i), CStr(fieldArray(j)) &" Expected from Equator: " & CStr(myArray(j)) & " | Actual from TRAX: " & CStr(arrayRS(j,0))        oDataFile.WriteLine(arrayDataVal(1,i) & "," & arrayDataVal(0,i) & "," & CStr(fieldArray(j)) & "," & CStr(myArray(j)) & "," & CStr(arrayRS(j,0)) & ",PASSED")       Else        bTCFlag = False        Reporter.ReportEvent micFail, "Data Validation of " & arrayDataVal(1,i), CStr(fieldArray(j)) &" Expected from Equator: " & CStr(myArray(j)) & " | Actual from TRAX: " & CStr(arrayRS(j,0))        oDataFile.WriteLine(arrayDataVal(1,i) & "," & arrayDataVal(0,i) & "," & CStr(fieldArray(j)) & "," & CStr(myArray(j)) & "," & CStr(arrayRS(j,0)) & ",FAILED")       End If      Next      If bTCFlag = True Then       QTP_ExecuteDBQuery "TOQC01", "Update EQ_DATAVAL_RESULT SET STATUS = 'PASSED' Where TRIGGER_NAME = '" & trigger_name & "'"      Else       QTP_ExecuteDBQuery "TOQC01", "Update EQ_DATAVAL_RESULT SET STATUS = 'FAILED' Where TRIGGER_NAME = '" & trigger_name & "'"      End If     Else      Reporter.ReportEvent micFail,arrayDataVal(1,i),"No data available for the REO ID"      QTP_ExecuteDBQuery "TOQC01","Update EQ_DATAVAL_RESULT SET STATUS = 'FAILED' Where TRIGGER_NAME = '" & trigger_name & "'"     End If     Exit For   End If     Next ElseIf UBound(arrayDataValQueryTemp) > -1 Then  Reporter.ReportEvent micFail, "Data Validation", "No qualified records to validate for DB pool. " & _    "Please note that you have to wait at least TWO hours until the synchronization between EQ DB and CLM TRAX DB is done. Any questions, please contact " & _    "Neelamegam, Anbu (anbu_neelamegam@fanniemae.com), Vadlamani, Umamahesh V (umamahesh_v_vadlamani@fanniemae.com) or Kallakuri, Vijaya (vijaya_kallakuri@fanniemae.com) for help." Else  Reporter.ReportEvent micFail, "Data Validation", "No records to validate from DB pool." End If  oDataFile.Close Set DictDataValQuery = Nothing Set oDataFile = Nothing Set fso = Nothing
End Function
 'Global Variables & Global Settings'Dim DictObj ' For storing the user roles/IDs/passwords for login Dim rolesDataFile ' Location of the Roles data file in the temp dirDim GLOBAL_REO_ID  Dim GLOBAL_REO_STATEDim Global_Loan_NumberDim Property_AddressDim GLOBAL_WS_TASK_COUNTDim Task_StatusDim EQ_ObjRepoPath, EQ_EnvVarPath, EQ_DataPath, EQ_RepPath,EQV_RepPath,RepPath,EQ_ResPathDim Sync_HostName, Sync_UserID, Sync_Password, EQ_DestZipPath, EQ_DestMetaPathtc_Result = ""tc_Reason = ""
Dim GLOBAL_INITIAL_DUES '  Environment variable 
Dim GLOBAL_SERVICER_IDGLOBAL_SERVICER_ID = "105330014" ' "105330014-JPMORGAN CHASE BANK, NA" ' Global variable from Title Scripts 
Dim ApprovedTestingBidAmount 'used in Environmental scriptsApprovedTestingBidAmount = ""
Dim AgentVendorPropertyStatus ' this value gets assigned in provide occupancy status or weekly occupancy status or both
Dim GLOBAL_FORECLOSURE_ATTORNEY 'this is foreclosure attorney used in Occupancy scripts.GLOBAL_FORECLOSURE_ATTORNEY= "ALBAN & ALBAN" '"PIERCE & ASSOCIATES, PC"
'This global variable is used for storing run time data fetched for ITTdata validation.Dim Global_ITT_DataDim GLOBAL_BuyerClosingCostDim GLOBAL_OFFER_COUNTDim GLOBAL_Value
EQ_EnvVarPath = EQSharedDriveEQ_DataPath = EQSharedDrive & "Input Data\"EQ_InputDataPath = EQSharedDrive & "Input Data\"EQ_TestDataPath = EQSharedDrive & "Test Data\"
EQ_ResultsPath = EQSharedDrive & "Results\"EQ_SharedLibPath = "\\fanniemae.com\CORP\DC\Shared\CreditUATAutomation\Shared\Libraries\"' Updated OR paths to Shared Drive after SVN setup - Anbu, 5/6/13EQ_RepPath = EQSharedDrive & "Object Repositories\Workstation\"EQV_RepPath = EQSharedDrive & "Object Repositories\Agent_Vendor\"EQAV_RepPath = EQSharedDrive & "Object Repositories\Agent_Vendor\"RepPath = EQSharedDrive & "Object Repositories\"EQ_ObjRepoPath = EQSharedDrive & "Object Repositories\Anbu\"
Sync_HostName = "aliquid-db05"Sync_UserID = "a6aacpt"Sync_Password = "Int_a6a1"EQ_DestZipPath = "/appl/a6aacpt/Outgoing/"EQ_DestMetaPath = "/appl/a6aacpt/Outgoing/ExternalControlFiles/"
'****************************************************************************************************************' Name: InitializeScript' Parameters: None' Description: This function will be called in the beginning of every script to load ORs, '       Libraries and User IDs.'Created by: Anbu'Date:  3/19/2013'History: Updated 2/23/15 to copy the new search scenarios file '****************************************************************************************************************Function InitializeScript
 Reporter.ReportEvent micDone,"START","InitializeScript"
    Setting("DefaultTimeOut")="120000"
 Call CreditUATAuto_LoadSharedLibs Call EQ_LoadFunctionLibraries Call EQ_LoadScriptLibraries
    'Load the common environment variables Dim Env execConfigFile = EQSharedDrive & "ExecutionConfig.xls" Env = CreditUAT_GetEnvironment(execConfigFile) ' Set Environment Var for Environment for later use    Environment.Value("EQ_Env") = Env  Environment.LoadFromFile EQ_EnvVarPath & Env & "-Environment_Variables.xml" rolesDataFile = QTP_copyFileToTempFolder(EQ_DataPath & Env & "_EQ_Roles.xlsx") Call QTP_copyFileToTempFolder(EQ_DataPath & "EQ_SearchScenarios.xlsx") Call InitializeOR   'Call loadRecoveryScenario()   GLOBAL_REO_ID = ""      'Kill all the IE processes before the script is launched. SystemUtil.CloseProcessByName("iexplore.exe")
 'Ravishankar P   6/18/2013 Dim qtApp,qtTest,qtActiveScreenOpt Set qtApp = getObject("","QuickTest.Application") Set qtTest = qtApp.Test Set qtActiveScreenOpt = qtApp.Options.ActiveScreen  'Disable the smart identification during run session 'If qtTest.Settings.Run.DisableSmartIdentification <> True Then  qtTest.Settings.Run.DisableSmartIdentification = False' qtTest.Settings.Run.DisableSmartIdentification = True' End If 'Set Active Screen capture level to None If qtActiveScreenOpt.CaptureLevel <> "None" Then  qtActiveScreenOpt.CaptureLevel = "None" End If 'Set Screen capture only for errors If  qtApp.Options.Run.ImageCaptureForTestResults <> "OnError" Then  qtApp.Options.Run.ImageCaptureForTestResults = "OnError" End If
    Reporter.ReportEvent micDone,"END","InitializeScript"
End Function
Function GetEnvironment   Reporter.ReportEvent micDone,"START","GetEnvironment" 'On Error Resume Next Dim ExecConfigFile
 GetEnvironment = "" Set CurrentTestSet = QCUtil.CurrentTestSet If CurrentTestSet is Nothing Then  GetEnvironment = "BETA"  Exit Function End If Set TSFolder = CurrentTestSet.TestSetFolder folder_name = TSFolder.Name TestSetPath = TSFolder.Name While(folder_name <> "Root" and folder_name <> Empty )    Set TSFolder = TSFolder.Father    folder_name = TSFolder.Name    If folder_name <> "Root" Then     TestSetPath = folder_name & "\" & TestSetPath    End If  WEnd
  strPath =  TestSetPath  'Print strPath
  ExecConfigFile = EQSharedDrive & "ExecutionConfig.xls"     Set FileSys = CreateObject("Scripting.FileSystemObject")   If FileSys.FileExists("C:\Temp\ExecutionConfig.xls") Then  FileSys.DeleteFile "C:\Temp\ExecutionConfig.xls",True  End If  wait(2)  FileSys.CopyFile ExecConfigFile,"C:\Temp\ExecutionConfig.xls",True  ExecConfigFile = "C:\Temp\ExecutionConfig.xls"  'strPath =  TestSetPath & "\"  & CurrentTestSet.Name    'Print ExecConfigFile
  If strPath <> "" Then   Set Con = CreateObject("ADODB.Connection")   Set Rs =  CreateObject("ADODB.RecordSet")   Con.ConnectionString = "Driver={Microsoft Excel Driver (*.xlsx)};DBQ=C:\Temp\ExecutionConfig.xls"   Con.Open   Rs.Open "Select ENVIRONMENT,TestSetFolderPath  FROM ExecutionConfig where TestSetFolderPath = '" & strPath & "'",Con   If Rs.BOF <> True then    Rs.MoveFirst    GetEnvironment =  Rs(0).Value        'Print GetEnvironment        'GlobalTestSet = Rs(1).value   End If  End If
     Reporter.ReportEvent micDone,"END","GetEnvironment"
End Function
'################################################################################' Functions to Initialize, Login and Logout'################################################################################'****************************************************************************************************************' Name: Login' Parameters: ' 1. EQSite - WS, Vendor, Agent' 2. Role - Role name as specified in User Roles data file' Description: This function opens IE, navigates to the Workstation/Vendor/Agent site and logs in'Created by: Anbu'Date:  3/19/2013'History:'****************************************************************************************************************Function Login(EQSite, Role)   Reporter.ReportEvent micDone,"START","Login" Dim URL, rolesData Select Case UCase(TRIM(EQSite))  Case "WS"   URL = Environment.Value("Equator_Workstation_URL")   Set W = Browser("Workstation").Page("Workstation")  Case "VENDOR"   URL = Environment.Value("Equator_Vendor_URL")   Set W = Browser("Agent_Vendor").Page("Agent_Vendor")  Case "AGENT"   URL = Environment.Value("Equator_Agent_URL")   Set W = Browser("Agent_Vendor").Page("Agent_Vendor") End Select
 SystemUtil.Run "iexplore", "-noframemerging " & URL,,,3  Call ProxyLogin
 If Browser("CreationTime:=0").Page("CreationTime:=0").Link("html tag:=A","index:=0","html id:=overridelink").Exist(5) Then  Browser("CreationTime:=0").Page("CreationTime:=0").Link("html tag:=A","index:=0","html id:=overridelink").Click        Browser("CreationTime:=0").Page("CreationTime:=0").Sync End If
 'Ravi P - Removing DictObj and Using getData - 09/05/2014 Set rolesData = getData(rolesDataFile,"Login","Role",Role) W.WebEdit("enter_username").Set rolesData("User_ID") W.WebEdit("enter_password").Set rolesData("PWD") Set rolesData = Nothing
 Environment.Value("strRole")= Role W.WebButton("Login").Click W.Sync 'wait(10) Select Case UCase(TRIM(EQSite))  Case "WS"   W.Sync 'Browser("Workstation").Sync   timeout =1   Do'adding do loop to make sure the correct module is selected    W.WebList("change_lender_id").Select "Fannie Mae"    W.Sync'Browser("Workstation").Sync    wait 15       W.Link("Workflow").Click    W.Sync    Val = W.WebList("change_lender_id").GetROProperty("Value")    If Val="Fannie Mae" Then     Exit Do    End If    timeout = timeout+1   Loop While  timeout < 4
  Case Else   W.Sync'Browser("Agent_Vendor").Sync End Select     Set W = Nothing'    Reporter.ReportEvent micDone,"END","Login"
 If Err.Number <> 0 Then  ErrorHandler GLOBAL_REO_ID,"Login","",Err.Description Else  Reporter.ReportEvent micDone,"END","Login" End If
End Function
'****************************************************************************************************************' Name: Logout' Parameters: ' 1. EQSite - WS, Vendor, Agent' Description: This function logs out Equator based on the EQSite parameter'Created by: Anbu'Date:  3/19/2013'History:'****************************************************************************************************************Function Logout(EQSite)   Reporter.ReportEvent micDone,"START","Logout"    Select Case UCase(EQSite)  Case "WS"   Browser("Workstation").Page("Workstation").Link("Logout").Click   Browser("Workstation").Page("Workstation").Sync   Browser("Workstation").Close   'If Browser("Workstation_1").Exist(5) Then   ' Browser("Workstation_1").Close   'End If   'If Browser("Workstation_2").Exist(5) Then   ' Browser("Workstation_2").Close   'End If  Case "VENDOR", "AGENT"   Browser("Agent_Vendor").Page("Agent_Vendor").Link("Logout").Click   Browser("Agent_Vendor").Page("Agent_Vendor").Sync   Browser("Agent_Vendor").Close End Select Wait 5    Systemutil.CloseProcessByName "iexplore.exe"
 If Err.Number <> 0 Then  ErrorHandler GLOBAL_REO_ID,"Logout","",Err.Description Else  Reporter.ReportEvent micDone,"END","Logout" End If
End Function

Function InitializeOR   Reporter.ReportEvent micDone,"START","InitializeOR"   Dim OR1, OR2   'Uncomment after repositories are consolidated   OR1 = RepositoriesCollection.Find(RepPath &"EQ_Agent_Vendor.tsr")
   If OR1 = -1 Then    RepositoriesCollection.Add(RepPath & "EQ_Agent_Vendor.tsr")   End If      'OR2 = RepositoriesCollection.Find(EQ_ObjRepoPath &"EQ_WS.tsr")   'If OR2 = -1 Then '   RepositoriesCollection.Add(EQ_ObjRepoPath&"EQ_WS.tsr")   'End If
   ' Old Repos - need to be consolidated with the above 2 new ones'   Pos1 = RepositoriesCollection.Find(RepPath&"EQ_Agent.tsr")   'Pos2 = RepositoriesCollection.Find(EQ_RepPath&"EQ_Vendor.tsr")   Pos3 = RepositoriesCollection.Find(RepPath&"EQ_WS.tsr")    Pos4 = RepositoriesCollection.Find(RepPath&"Common_Components.tsr")'    Pos5 = RepositoriesCollection.Find(EQ_RepPath & "EQ_MI.tsr")    'Pos6 = RepositoriesCollection.Find(RepPath&"EQ_WS_Old.tsr")    Pos7 =  RepositoriesCollection.Find(RepPath&"EQ_MI.tsr") Pos8 = RepositoriesCollection.Find(EQAV_RepPath & "EQAV_MI.tsr")
  'Pos9 = RepositoriesCollection.Find(RepPath&"EQ_OpenTasks_Tasks.tsr")'   If Pos1 = -1 Then'    RepositoriesCollection.Add(RepPath&"EQ_Agent.tsr")'   End If'   If Pos2 = -1 Then'    RepositoriesCollection.Add(EQ_RepPath&"EQ_Vendor.tsr")'   End If   If Pos3 = -1 Then    RepositoriesCollection.Add(RepPath&"EQ_WS.tsr")   End If   If Pos4 = -1 Then    RepositoriesCollection.Add(RepPath&"Common_Components.tsr")   End If'      If Pos5 = -1 Then'    RepositoriesCollection.Add(EQ_RepPath & "EQ_MI.tsr")'   End If'      If Pos6 = -1 Then'    RepositoriesCollection.Add(RepPath&"EQ_WS_Old.tsr")'   End If If Pos7 = -1 Then  RepositoriesCollection.Add(RepPath&"EQ_MI.tsr") End If If Pos8 = -1 Then  RepositoriesCollection.Add(EQAV_RepPath &"EQAV_MI.tsr") End If' If Pos9= -1 Then'  RepositoriesCollection.Add(RepPath&"EQ_OpenTasks_Tasks.tsr")' End IfReporter.ReportEvent micDone,"END","InitializeOR"End Function

''' This file contains all the functions related to ITT and IBAT' ' @remarks' @author Mahesh Vadlamani' @version 1.0' @date 5/30/2013'Function LoadUserInfo' Dim Env' Env = Environment.Value("EQ_Env")' Select Case Ucase(Env)'  Case "XA"'   rolesFile = "XA_EQ_Roles.xlsx"'  Case "XB"'   rolesFile = "XB_EQ_Roles.xlsx"'  Case "BETA"'   rolesFile = "BETA_EQ_Roles.xlsx"'  Case "REM"'   rolesFile = "REM_EQ_Roles.xlsx"'  Case Else'   rolesFile = "BETA_EQ_Roles.xlsx"''   temp = "REM_EQ_Roles.xlsx"' End Select
'Ravi P - Removing DictObj and Using getData - 09/05/2014
' strDataFile=fnCopyFile(EQ_DataPath, temp)' DataTable.AddSheet("Login")'    DataTable.ImportSheet strDataFile,"Login","Login"''   'DataTable.Import EQ_DataPath & "EQ_Roles.xlsx"'   Set DictObj = CreateObject("Scripting.Dictionary")'   DictObj.CompareMode=1''   For i = 1 To DataTable.GetSheet("Login").GetRowCount'    sRole = Trim(Datatable.GetSheet("Login").GetParameter("Role").ValueByRow(i))'    DictObj.Add sRole & ".Role", Trim(Datatable.GetSheet("Login").GetParameter("Role").ValueByRow(i))'    DictObj.Add sRole & ".ID", Trim(Datatable.GetSheet("Login").GetParameter("User_ID").ValueByRow(i))' ProxyLogin'ProxyLogin'' ProxyLogin'ProxyLogin'' ProxyLogin'ProxyLogin'' ProxyLogin'ProxyLogin'' ProxyLogin'ProxyLogin'    DictObj.Add sRole & ".PWD", Trim(Datatable.GetSheet("Login").GetParameter("PWD").ValueByRow(i))'    DictObj.Add sRole & ".Name", Trim(Datatable.GetSheet("Login").GetParameter("User_Name").ValueByRow(i))'   Next
'End Function
'================================================================================ Function ProxyLogin If instr(environment.Value("OS"), "XP")>0  Then  If Dialog("Proxy").Exist(30) Then   Dialog("Proxy").WinEdit("User name:").Set GLOBAL_SHARED_ID '"l2ur47yl"   Dialog("Proxy").WinEdit("Password:").Set SharedIDPwd_LDAP '"Au-omat3"   Dialog("Proxy").WinCheckBox("Remember my password").Set "ON"   Dialog("Proxy").WinButton("OK").Click  Else'   ErrorHandler "","ProxyLogin","",Err.Description  End If elseif  instr(environment.Value("OS"), "Windows 8")> 0  then  If Dialog("Windows Security Windows 8").Exist(5) Then   Dialog("Windows Security Windows 8").WinEdit("WinEdit").Set GLOBAL_SHARED_ID   Dialog("Windows Security Windows 8").WinEdit("WinEdit_2").Set SharedIDPwd_LDAP   Dialog("Windows Security Windows 8").WinObject("Windows Security").WinCheckBox("Remember my credentials").Set "ON"   Dialog("Windows Security Windows 8").WinButton("OK").Click  End If End IfEnd Function

'================================================================================ ' Function: CheckUsedCase' Purpose:   Checks if the case has been used by other people by indicating the address. The address will start with the specific name listed. If TRUE, that means they have been used before.' Arguments: Address - Start with the specific name' Returns:  False - The case has NOT been used by other people. '      True - The case has been used by other people. '# Author:  Terry Wang'================================================================================Function CheckUsedCase(ByVal Address) Dim sRegExp Dim bFound
 Set sRegExp = New RegExp sRegExp.Pattern = ".*(JOE|YARA|TRAX|POOL|SXURVK|BHIMA|G3UABN|HUD|AFSAR|ITT|IBAT|AUTO|QTP|PWT|FRBKQ|HECMQ|FBRT|HMRT).*"' sRegExp.Pattern = "^\D+.*"
 CheckUsedCase = sRegExp.Test(UCASE(Address)) Set sRegExp = NothingEnd Function
'********************* Misc Functions *************************************************************************************Function EQ_ErrorHandler(ByVal ErrDesc) Dim sSQLString Dim sErrorDesc
'Update by Terry Wang with the fix to replace ' with '' within SQL string on 3/19/2014'updated 10/20/2014 by swathi G. insert into result table 
 testName = Environment.Value("TestName") REO_ID  = GLOBAL_REO_ID  Desktop.CaptureBitmap "ErrorScreenshot.png", True Reporter.ReportEvent micFail, "Exception Caught",  ErrDesc,  "ErrorScreenshot.png" sErrorDesc = Replace(Left(ErrDesc, 499), "'", "''")  If REO_ID = "" Then  sSQLString = "INSERT INTO AUTO_EQ_USED_REOID(TRIGGER_CASE, USED_DATE, RUN_STATUS, ERROR_DESC) VALUES ('" &  testName & "','" & Date & "','FAILED','" & sErrorDesc & "')" Else  sSQLString = "UPDATE AUTO_EQ_USED_REOID SET RUN_STATUS = 'FAILED', ERROR_DESC = '" & sErrorDesc  & "' WHERE REO_ID = '" & REO_ID & "' AND TRIGGER_CASE = '" &  testName  & "'" End If  Call QTP_ExecuteDBQuery(GLOBAL_AUTO_DBNAME, sSQLString)
 sSQLString = "INSERT INTO Auto_EQ_Result(REO_ID, TRIGGER_CASE, RUN_DATE, RUN_STATUS, ERROR_DESC) VALUES ('" & REO_ID & "', '" &  testName & "','" & Date & "','FAILED','" & sErrorDesc & "')" Call QTP_ExecuteDBQuery(GLOBAL_AUTO_DBNAME, sSQLString)
 Systemutil.CloseProcessByName "iexplore.exe" ExitTestEnd Function
Function ErrorHandler(ByVal REO_ID, ByVal Trigger_Name, ByVal Input_Array, ByVal Error_Desc) Dim sSQLString Dim arrayInput Dim sFormatErrorDesc 'Updated by Usha to populate Issues Details in test lab on 12/03/2015 Dim ISSUE_DETAILS Dim TestInTestSet    ISSUE_DETAILS = Trigger_Name &" :"& REO_ID& ": " & Error_Desc
'Update by Terry Wang with the fix to use Environment.Value("TestName") for Trigger_Name on 3/19/2014'Update by Terry Wang with the fix to replace ' with '' within SQL string on 3/19/2014'Update by Terry Wang with new codes to capture the screen shot on 2/24/2014'updated 10/20/2014 by swathi G. insert into result table  Trigger_Name = Environment.Value("TestName") sFormatErrorDesc = Trigger_Name & ": " & Error_Desc Desktop.CaptureBitmap "ErrorScreenshot.png", True Reporter.ReportEvent micFail, "Exception Caught", sFormatErrorDesc, "ErrorScreenshot.png" sFormatErrorDesc = Replace(Left(sFormatErrorDesc, 499), "'", "''")' Call QTP_CaptureScreenshot
 If REO_ID = "" Then  sSQLString = "INSERT INTO AUTO_EQ_USED_REOID(TRIGGER_CASE, USED_DATE, RUN_STATUS, ERROR_DESC) VALUES ('" & Trigger_Name & "','" & Date & "','FAILED','" & sFormatErrorDesc & "')" Else  sSQLString = "UPDATE AUTO_EQ_USED_REOID SET RUN_STATUS = 'FAILED', ERROR_DESC = '" & sFormatErrorDesc & "' WHERE REO_ID = '" & REO_ID & "' AND TRIGGER_CASE = '" & Trigger_Name & "'" End If
    Call QTP_ExecuteDBQuery(GLOBAL_AUTO_DBNAME, sSQLString)
 sSQLString = "INSERT INTO Auto_EQ_Result(REO_ID, TRIGGER_CASE, RUN_DATE, RUN_STATUS, ERROR_DESC) VALUES ('" & REO_ID & "', '" &  Trigger_Name & "','" & Date & "','FAILED','" & sFormatErrorDesc & "')" Call QTP_ExecuteDBQuery(GLOBAL_AUTO_DBNAME, sSQLString) 'To populate issue_details in ALM test Lab    Set TestInTestSet = QCUtil.CurrentTestSetTest    TestInTestSet.Field("TC_USER_02") = ISSUE_DETAILS    TestInTestSet.Post
 Systemutil.CloseProcessByName "iexplore.exe" ExitTestEnd Function
'--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------Function Error_Handler(REO_ID,Function_Name, Error_Desc)  Dim sFormatErrorDesc  sFormatErrorDesc = Function_Name & " --- " & Error_Desc  Reporter.ReportEvent micFail, "Exception Caught", sFormatErrorDesc  QTP_CaptureScreenshot  ExitTestEnd Function
'================================================================================ ' Function: Pickup_REOID' Purpose:   Pick up a REO ID from the DB' Arguments: Trigger_Name - The Trigger Name that  REO ID is related.'       ToBeDeleted - The flag indicating whether the selected REO ID needs to be deleted.' Returns:  REO ID '      It would be empty if there is no REO ID for that trigger.'# Author:  Terry Wang'================================================================================Function Pickup_REOID(ByVal Trigger_Name, ByVal ToBeDeleted)   Dim sSQLString   Dim arrayRS   Dim REO_ID
   sSQLString = "Select REO_ID FROM AUTO_EQ_REOID_POOL WHERE TRIGGER_CASE = '" & Trigger_Name & "' AND ROWNUM < 2"   arrayRS = QTP_ExecuteDBQuery(GLOBAL_AUTO_DBNAME, sSQLString)   If UBound(arrayRS) > -1 Then  REO_ID = arrayRS(0,0)  sSQLString = "INSERT INTO AUTO_EQ_USED_REOID(REO_ID, TRIGGER_CASE, USED_DATE) VALUES ('" & REO_ID & "','" & Environment.Value("TestName") & "','" & Date & "')"  Call QTP_ExecuteDBQuery(GLOBAL_AUTO_DBNAME, sSQLString)  GLOBAL_REO_ID = REO_ID  Pickup_REOID = REO_ID Else  Pickup_REOID = ""   End If
   If ToBeDeleted = True AND UBound(arrayRS) > -1 Then       sSQLString = "DELETE FROM AUTO_EQ_REOID_POOL WHERE REO_ID = '" & REO_ID & "'"    Call QTP_ExecuteDBQuery(GLOBAL_AUTO_DBNAME, sSQLString)   End IfEnd Function      Function PickupREOIDFromDB(ByVal Trigger_Name, ByVal ToBeDeleted)   Dim sSQLString   Dim arrayRS   Dim REO_ID
   sSQLString = "Select REO_ID FROM AUTO_EQ_REOID_POOL WHERE TRIGGER_CASE LIKE '%" & Trigger_Name & "'  AND ROWNUM < 2"   arrayRS = QTP_ExecuteDBQuery(GLOBAL_AUTO_DBNAME, sSQLString)   If UBound(arrayRS) > -1 Then  REO_ID = arrayRS(0,0)  sSQLString = "INSERT INTO AUTO_EQ_USED_REOID(REO_ID, TRIGGER_CASE, USED_DATE) VALUES ('" & REO_ID & "','" & Environment.Value("TestName") & "','" & Date & "')"  Call QTP_ExecuteDBQuery(GLOBAL_AUTO_DBNAME, sSQLString)  GLOBAL_REO_ID = REO_ID  PickupREOIDFromDB = REO_ID Else  PickupREOIDFromDB = ""   End If
   If ToBeDeleted = True AND UBound(arrayRS) > -1 Then       sSQLString = "DELETE FROM AUTO_EQ_REOID_POOL WHERE REO_ID = '" & REO_ID & "'"    Call QTP_ExecuteDBQuery(GLOBAL_AUTO_DBNAME, sSQLString)   End IfEnd Function
''' Function: CheckUsedREOID Checks if the specified REO ID exists in the DB base. If TRUE, that means they have been used before.' @param REO_ID - Equator / CLM REO ID' @return True or False' @date Created Date:8/5/2013 ' @author Mahesh Vadlamani  ' @version 1.0 ' @remarksFunction CheckUsedREOID(ByVal REO_ID) Dim sSQLString Dim arrayRS sSQLString = "Select REO_ID from AUTO_EQ_USED_REOID Where REO_ID='" & REO_ID & "'" arrayRS = QTP_ExecuteDBQuery(GLOBAL_AUTO_DBNAME, sSQLString) If UBound(arrayRS) > -1 Then  CheckUsedREOID = True Else  CheckUsedREOID = False End IfEnd Function
''' This function Inserts a specific REO ID and its related script name (as Trigger Name) into DB.' @param REO_ID - Equator / CLM REO ID' @return N/A' @date Created Date:8/5/2013 ' @author Terry Wang' @version 1.0 ' @remarksFunction InsertUsedREOID(ByVal REO_ID, ByVal Trigger_Name, ByVal Used_Date) Dim sSQLString sSQLString = "INSERT INTO AUTO_EQ_USED_REOID(REO_ID, TRIGGER_CASE, USED_DATE) VALUES ('" & REO_ID & "','" & Trigger_Name & "','" & Used_Date & "')" Call QTP_ExecuteDBQuery(GLOBAL_AUTO_DBNAME, sSQLString)End Function
''' This function cleans up in the end and saves the REOID and script status to the DB' @param REO_ID - Equator / CLM REO ID' @param Script Name' @param Run Status' @return N/A' @date Created Date:08/19/13' @author  Anbu' @version 1.0 ' @remarks Based on ITT End Up Script; 'updated 10/20/2014 by swathi G. insert into result table Function FinalizeScript(ByVal Run_Status) Dim sSQLString Dim sStatus Dim arrayRS
 REO_ID = GLOBAL_REO_ID Trigger_Name =  Environment.Value("TestName")
 Wait 5
 Select Case Run_Status  Case micFail sStatus = "FAILED"  Case micDone sStatus = "PASSED"  Case micPass sStatus = "PASSED"  Case micWarning sStatus = "WARNING"  Case Else   Reporter.ReportEvent micWarning, "Function: ""FinalizeScript "" Warning", "The ""Run_Status"" : " & Run_Status & " you input is not listed !"   sStatus = UCase(Run_Status) End Select
 sSQLString = "UPDATE AUTO_EQ_USED_REOID SET RUN_STATUS = '" & sStatus & "' WHERE REO_ID = '" & REO_ID & "' AND TRIGGER_CASE = '" & Trigger_Name & "'" Call QTP_ExecuteDBQuery(GLOBAL_AUTO_DBNAME, sSQLString)
 sSQLString = "INSERT INTO Auto_EQ_Result(REO_ID, TRIGGER_CASE, RUN_DATE, RUN_STATUS) VALUES ('" & REO_ID & "', '" &  Trigger_Name & "','" & Date & "','" & sStatus &  "')" Call QTP_ExecuteDBQuery(GLOBAL_AUTO_DBNAME, sSQLString)
 'This will ensure that the script run outside of Testlab will not be written as a Draft Run = Y QCUtil.CurrentRun.Field("RN_DRAFT") = "N"
 'Ravi P - Removing DictObj and Using getData - 09/05/2014 'Set DictObj = NothingEnd Function
''' This function saves REOID for scripts that need to re-use the same REO (Group 1 -->Group 2)' @param ' @param Run Status' @return N/A' @date Created Date:08/19/13' @author  Anbu' @version 1.0 ' @remarks Based on ITT End Up Script
Function SaveREOToDB()  Dim sSQLString  REO_ID = GLOBAL_REO_ID  Trigger_Name =  Environment.Value("TestName")     sSQLString = "INSERT INTO AUTO_EQ_REOID_POOL (REO_ID, TRIGGER_CASE, GEN_DATE) VALUES ('" & REO_ID & "','" & Trigger_Name & "','" & Date & "')"  Call QTP_ExecuteDBQuery(GLOBAL_AUTO_DBNAME, sSQLString)  Wait 3End Function
''' This function prepares the data from datasheet based on trigger name and insert those data into DATAVAL_RESULT for validation later. It merges the function "GetExpectedValues" and "InsertValidationData"' @param ' @return N/A' @date Created Date:04/07/2014' @author Terry Wang' @version 1.0 ' @remarks' updated 2/26/2015,Swathi G , the function name from SaveDataForValidation to EQ_ITT_InsertDataValidationValues; update Swathi G. insert syntax'Function SaveDataForValidationFunction EQ_ITT_InsertDataValidationValues Dim oExcel, oWorkBook, oSheet Dim sExpectedFieldNames, sExpectedData, sSQLString Dim iRowCount Dim CurrentTSTestSet set CurrentTSTestSet = QCUtil.CurrentTestSet  Call QTP_copyFileToTempFolder(EQ_DataPath & "DataValidation_Input.xlsx")' added this by praveen patlolla for Issues #243  If CurrentTSTestSet.Name <> "Property Issues - Group 2 Pre-Reqs" Then  Reporter.ReportEvent micDone, "START", "SaveDataForValidation"  Set oExcel = CreateObject("Excel.Application")  'Set oWorkBook = oExcel.Workbooks.Open (EQ_DataPath & "DataValidation_Input.xlsx")  Set oWorkBook = oExcel.Workbooks.Open (GLOBAL_TEMPDIR & "\DataValidation_Input.xlsx")' added this and commentes above by praveen patlolla for issye #243  Set oSheet = oWorkBook.Worksheets("Data")  For i = 2 To oSheet.usedrange.rows.Count   If UCase(Environment.Value("TestName")) = UCase(oSheet.cells(i,1)) Then    sExpectedFieldNames = ""    sExpectedData = oSheet.cells(i,3)    Exit For   End If  Next  If Global_ITT_Data <>"" Then   sExpectedData =  sExpectedData & Global_ITT_Data  End If  'If CurrentTSTestSet.Name <> "Property Issues - Group 2 Pre-Reqs" Then'   sSQLString = "Insert into EQ_DATAVAL_RESULT (TRIGGER_NAME,REO_ID,EXP_VALUES,USED_DATE) Values ('" & Environment.Value("TestName") & "','" & GLOBAL_REO_ID & "','" & sExpectedData & "',SYSDATE)" ','','" & sExpectedFieldNames & "')"   sSQLString = "Insert into EQ_DATAVAL_RESULT (TRIGGER_NAME,REO_ID,EXP_VALUES,USED_DATE, TEST_SET_NAME) Values ('" & Environment.Value("TestName") & "','" & GLOBAL_REO_ID & "','" & sExpectedData & "',SYSDATE,'" & CurrentTSTestSet.Name  &"')" ','','" & sExpectedFieldNames & "')"   Call QTP_ExecuteDBQuery(GLOBAL_AUTO_DBNAME, sSQLString)  'End If  oWorkBook.Close 1  Set oSheet = Nothing  Set oWorkBook = Nothing  Set oExcel = Nothing  Reporter.ReportEvent micDone, "END", "SaveDataForValidation" End IfEnd Function
''' This function is called during initialize to load the common/shared libraries' @param ' @param Run Status' @return N/A' @date ' @author  Anbu' @version 1.0 ' @remarks Based on ITT End Up Script; updated 4/2/2015 Swathi G interchanged if - else if condition for UFT 12. load library for UFT 11 and 12Function CreditUATAuto_LoadSharedLibs SharedLibPath = SharedDrive & "CreditUATAutomation_SharedResources\Libraries\" If Instr(Environment.Value("ProductVer"), "10.") > 0 Then 'QTP Version 11   ExecuteFile SharedLibPath & "QTPUtility.qfl"   ExecuteFile SharedLibPath & "QCUtility.qfl"   ExecuteFile SharedLibPath & "ExcelUtility.qfl" Else   LoadFunctionLibrary SharedLibPath & "QTPUtility.qfl"   LoadFunctionLibrary SharedLibPath & "QCUtility.qfl"   LoadFunctionLibrary SharedLibPath & "ExcelUtility.qfl"    End IfEnd Function
Function EQ_SaveSearchScenario(ByVal searchType, ByVal searchScenario) Dim sqlString, testName testName = Environment.Value("TestName") sqlString = "INSERT INTO EQ_WS_SEARCH_SCENARIO (SCRIPT_NAME, SEARCH_TYPE, SEARCH_SCENARIO, UPDATED_TIME)" &_     " VALUES ('" +  testName + "', '" + searchType + "', '" + searchScenario + "' , SYSDATE)" Call QTP_ExecuteDBQuery(GLOBAL_AUTO_DBNAME, sqlString)End Function
Function EQ_LoadScriptLibraries Dim scriptName scriptName = Environment.Value("TestName")
 If InStr(scriptName, "Global") > 0  Then  Call QTP_LoadFunctionLibrary(EQScriptPath + "EQ_Scripts_ITT_Global.qfl") End If
 If InStr(scriptName, "QC") > 0  Then  Call QTP_LoadFunctionLibrary(EQScriptPath + "EQ_Scripts_ITT_MaintenanceServices.qfl") End If
 If InStr(scriptName, "PropertyIssues") > 0  Or InStr(scriptName, "Property_Issues") > 0 Or InStr(scriptName, "51318") > 0 Then  Call QTP_LoadFunctionLibrary(EQScriptPath + "EQ_Scripts_PropertyIssues.qfl") End If
 If InStr(scriptName, "HomePath") > 0  Then  Call QTP_LoadFunctionLibrary(EQScriptPath + "EQ_Scripts_ITT_Sales.qfl") End If
 If InStr(scriptName, "Marketing") > 0  Then   Call QTP_LoadFunctionLibrary(EQScriptPath + "EQ_Scripts_Marketing.qfl") End If
 If InStr(scriptName, "Offers") > 0  Then  Call QTP_LoadFunctionLibrary(EQScriptPath + "EQ_Scripts_Offers.qfl") End If
 If InStr(scriptName, "MIClaims") > 0  Then  Call QTP_LoadFunctionLibrary(EQScriptPath + "EQ_Scripts_MIClaims.qfl") End If
 If InStr(scriptName, "MIApproval") > 0  Then  Call QTP_LoadFunctionLibrary(EQScriptPath + "EQ_Scripts_MIApprovals.qfl") End If
 If InStr(scriptName, "MIDisposition") > 0  Then  Call QTP_LoadFunctionLibrary(EQScriptPath + "EQ_Scripts_MIDisposition.qfl") End If
 If InStr(scriptName, "Repairs") > 0  Then  Call QTP_LoadFunctionLibrary(EQScriptPath + "EQ_Scripts_Repairs.qfl") End If
 If InStr(scriptName, "FieldServices") > 0  Then  Call QTP_LoadFunctionLibrary(EQScriptPath + "EQ_Scripts_FieldServices.qfl") End If
 If InStr(scriptName, "OwnerRepurchase") > 0  Then  Call QTP_LoadFunctionLibrary(EQScriptPath + "EQ_Scripts_OwnerRepurchase.qfl") End If
 If InStr(scriptName, "RelocationAssistance") > 0  Then  Call QTP_LoadFunctionLibrary(EQScriptPath + "EQ_Scripts_RelocationAssistance.qfl") End If
 If InStr(scriptName, "Environmental") > 0  Then  Call QTP_LoadFunctionLibrary(EQScriptPath + "EQ_Scripts_Environmental.qfl") End If
 If InStr(scriptName, "Closing") > 0  Then  Call QTP_LoadFunctionLibrary(EQScriptPath + "EQ_Scripts_Closing.qfl") End If
 If InStr(scriptName, "Title") > 0  Then  Call QTP_LoadFunctionLibrary(EQScriptPath + "EQ_Scripts_Title.qfl") End If  If InStr(scriptName, "HOA") > 0  Then  Call QTP_LoadFunctionLibrary(EQScriptPath + "EQ_Scripts_Title.qfl") End If
 If InStr(scriptName, "Issue") > 0  Then  Call QTP_LoadFunctionLibrary(EQScriptPath + "EQ_Scripts_Issues.qfl") End If
 If InStr(scriptName, "Financials") > 0  Then  Call QTP_LoadFunctionLibrary(EQScriptPath + "EQ_Scripts_Financials.qfl") End If
 If InStr(scriptName, "Occupancy") > 0  Then            Call QTP_LoadFunctionLibrary(EQScriptPath + "EQ_Scripts_Occupancy.qfl") End If
 If InStr(scriptName, "OwnerRedemption") > 0  Then  Call QTP_LoadFunctionLibrary(EQScriptPath + "EQ_Scripts_OwnerRedemption.qfl") End If
 If InStr(scriptName, "Inspections") > 0  Then  Call QTP_LoadFunctionLibrary(EQScriptPath + "EQ_Scripts_Inspections.qfl") End If
 If InStr(scriptName, "ModifyQC") > 0  OR  InStr(scriptName, "Issues_QC") > 0  Then  Call QTP_LoadFunctionLibrary(EQScriptPath + "EQ_Scripts_ModifyQC.qfl") End If
 If InStr(scriptName, "CashForRedemption") > 0  Then  Call QTP_LoadFunctionLibrary(EQScriptPath + "EQ_Scripts_CashForRedemption.qfl") End If
 If InStr(scriptName, "Elimination") > 0  Then  Call QTP_LoadFunctionLibrary(EQScriptPath + "EQ_Scripts_Elimination.qfl") End If
 If InStr(scriptName, "HazardClaims") > 0  Then  Call QTP_LoadFunctionLibrary(EQScriptPath + "EQ_Scripts_HazardClaims.qfl") End If
 If InStr(scriptName, "RedemptionConfirmation") > 0  Then  Call QTP_LoadFunctionLibrary(EQScriptPath + "EQ_Scripts_RedemptionConfirmation.qfl") End If
 If InStr(scriptName, "Eviction") > 0  Then  Call QTP_LoadFunctionLibrary(EQScriptPath + "EQ_Scripts_Eviction.qfl") End If
 If InStr(scriptName, "Bankruptcy") > 0  Then  Call QTP_LoadFunctionLibrary(EQScriptPath + "EQ_Scripts_Bankruptcy.qfl") End If
 If InStr(scriptName, "Valuations") > 0  Then  Call QTP_LoadFunctionLibrary(EQScriptPath + "EQ_Scripts_ITT_Valuations.qfl")  Call QTP_LoadFunctionLibrary(EQScriptPath + "EQ_Scripts_IBAT_Valuations.qfl") End If
 If InStr(scriptName, "Expenses") > 0  Then  Call QTP_LoadFunctionLibrary(EQScriptPath + "EQ_Scripts_Expenses.qfl") End If
 If InStr(scriptName, "DataValidation") > 0  Then  Call QTP_LoadFunctionLibrary(EQScriptPath + "EQ_Scripts_ITT_DataValidation.qfl") End If  If InStr(scriptName, "Tax") > 0  Then  Call QTP_LoadFunctionLibrary(EQScriptPath + "EQ_Scripts_Tax.qfl") End If
End Function
Function EQ_LoadFunctionLibraries 'Load All Libraries Call QTP_LoadFunctionLibrary(EQLibPath + "EQ_WS_Common.qfl") Call QTP_LoadFunctionLibrary(EQLibPath + "EQ_AgentVendor_Common.qfl") Call QTP_LoadFunctionLibrary(EQLibPath + "EQ_Marketing.qfl") Call QTP_LoadFunctionLibrary(EQLibPath + "EQ_Offers.qfl") Call QTP_LoadFunctionLibrary(EQLibPath + "EQ_MI.qfl") Call QTP_LoadFunctionLibrary(EQLibPath + "EQ_Repairs.qfl")  Call QTP_LoadFunctionLibrary(EQLibPath + "EQ_FieldServices.qfl")  Call QTP_LoadFunctionLibrary(EQLibPath + "EQ_Title.qfl") Call QTP_LoadFunctionLibrary(EQLibPath + "EQ_HazardClaims.qfl") Call QTP_LoadFunctionLibrary(EQLibPath + "EQ_OwnerRepurchase.qfl") Call QTP_LoadFunctionLibrary(EQLibPath + "EQ_RelocationAssistance.qfl") Call QTP_LoadFunctionLibrary(EQLibPath + "EQ_Valuations.qfl") Call QTP_LoadFunctionLibrary(EQLibPath + "EQ_MaintenanceServices.qfl") Call QTP_LoadFunctionLibrary(EQLibPath + "EQ_PropertyIssues.qfl") Call QTP_LoadFunctionLibrary(EQLibPath + "EQ_Global.qfl") Call QTP_LoadFunctionLibrary(EQLibPath + "EQ_Environmental.qfl")        Call QTP_LoadFunctionLibrary(EQLibPath + "EQ_Elimination.qfl") Call QTP_LoadFunctionLibrary(EQLibPath + "EQ_Financials.qfl") Call QTP_LoadFunctionLibrary(EQLibPath + "EQ_Closing.qfl") Call QTP_LoadFunctionLibrary(EQLibPath + "EQ_Inspections.qfl") Call QTP_LoadFunctionLibrary(EQLibPath + "EQ_OwnerRedemption.qfl") Call QTP_LoadFunctionLibrary(EQLibPath + "EQ_RedemptionConfirmation.qfl") Call QTP_LoadFunctionLibrary(EQLibPath + "EQ_Eviction.qfl") Call QTP_LoadFunctionLibrary(EQLibPath + "EQ_AppSetup.qfl") Call QTP_LoadFunctionLibrary(EQLibPath + "EQ_Bankruptcy.qfl") Call QTP_LoadFunctionLibrary(EQLibPath + "EQ_Expenses.qfl") Call QTP_LoadFunctionLibrary(EQLibPath + "EQ_Tax.qfl")End Function''' This function prepares XML file based on the data from excel sheet' @param ' @return N/A' @date Created Date: 10/22/2014' @author Praveen Patlolla' @version 1.0 ' @remarksFunction CreateXML(ByVal XLSPath, ByVal XLSWorksheetName, ByVal strFile)   Reporter.ReportEvent micDone,"START","CreateXML"
    Dim  maxRow, objFSO, fileName, addData1, rowCount    Dim addData, rowNum, rolesName Dim rolesChgStatus, k, Con, Rs Dim  objFolder, objTextFile, objFile Dim strDirectory, creationTime
 strDirectory =  EQ_ResultsPath &"UserRoleUpdates\XMLFiles\" creationTime = year(now) &"-"& dtTime("M") &"-"& dtTime("D") &"T" & dtTime("H") &":" & dtTime("Min") &":"& dtTime("Sec") &".391-04:00"   Call load_sheet(XLSPath,XLSWorksheetName) maxRow = DataTable.GetSheet(XLSWorksheetName).Getrowcount  ' Create the File System Object Set objFSO = CreateObject("Scripting.FileSystemObject")  If objFSO.FileExists(strDirectory & strFile) Then    Set objFolder = objFSO.GetFolder(strDirectory)    objFSO.DeleteFile(strDirectory & strFile)    Set objFile = objFSO.CreateTextFile(strDirectory & strFile)  fileName = strDirectory & strFile Else    Set objFile = objFSO.CreateTextFile(strDirectory & strFile)    fileName = strDirectory & strFile End If   set objFile = nothing set objFolder = nothing ' End of creation of file
 Set Con = CreateObject("ADODB.Connection") Set Rs =  CreateObject("ADODB.RecordSet") Con.ConnectionString = "Driver={Microsoft Excel Driver (*.xlsx)};DBQ=" +  XLSPath  Con.Open Rs.Open "SELECT * FROM [" & XLSWorksheetName & "$] WHERE flag = 'Y'", Con Rs.MoveFirst Do Until RS.EOF        rowCount = rowCount + 1  RS.MoveNext Loop  Set objTextFile = objFSO.OpenTextFile(fileName, ForAppending, True) ' Writes strText every time you run this VBScript Set addData1 =  getDataByRowNumber(XLSWorksheetName,1)
 objTextFile.WriteLine("<?xml version=""1.0"" encoding=""UTF-8""?>")  objTextFile.WriteLine("<Users xmlns=""http://www.fanniemae.com/npdc/clm/REOIntegration/Outbound/v1.0"">")  objTextFile.WriteLine("<createTime>" &  creationTime & "</createTime>") objTextFile.WriteLine("<recordsCount>" &  rowCount & "</recordsCount>") For rowNum = 1 to maxRow  Set addData =  getDataByRowNumber(XLSWorksheetName,rowNum)  If addData("flag") = "Y" Then   objTextFile.WriteLine("<user id=""" &  addData("id") &""">")    objTextFile.WriteLine("<fstNme>" &  addData("fstNme") & "</fstNme>")   objTextFile.WriteLine("<lstNme>" &  addData("lstNme") & "</lstNme>")   objTextFile.WriteLine("<usrAddr>")   objTextFile.WriteLine("<streetAddress1>" &  addData("streetAddress1") & "</streetAddress1>")   objTextFile.WriteLine("<city>" &  addData("city") & "</city>")   objTextFile.WriteLine("<state>" &  addData("state") & "</state>")   objTextFile.WriteLine("<zip>" &  addData("zip") & "</zip>")   objTextFile.WriteLine("</usrAddr>")   objTextFile.WriteLine("<usrComm>")   objTextFile.WriteLine("<phone>" &  addData("phone") & "</phone>")   objTextFile.WriteLine("<email>" &  addData("User_ID") & "</email>")   objTextFile.WriteLine("</usrComm>")   objTextFile.WriteLine("<usrChgStatus>" &  addData("usrChgStatus") & "</usrChgStatus>")   objTextFile.WriteLine("<roles>")   rolesName = Split(addData("roleNme") ,";")   'rolesChgStatus = Split(addData("roleChgStatus") ,";")   For k = 0 to uBound(rolesName)    objTextFile.WriteLine("<role>")    objTextFile.WriteLine("<roleNme>" &  rolesName(k) & "</roleNme>")    'objTextFile.WriteLine(" <roleChgStatus>" &  rolesChgStatus(k) & "</roleChgStatus>")    objTextFile.WriteLine("<roleChgStatus>" &  addData("roleChgStatus") & "</roleChgStatus>")    objTextFile.WriteLine("</role>")   Next   objTextFile.WriteLine("</roles>")     objTextFile.WriteLine("</user>")  End If Next objTextFile.WriteLine("</Users>")  Set addData = Nothing
 objTextFile.Close Set objTextFile = Nothing Set objFSO = Nothing Set Con = Nothing Set Rs = Nothing wait(5) End Function
''' This function used to validates the XML file ' @param ' @return N/A' @date Created Date: 10/22/2014' @author Praveen Patlolla' @version 1.0 ' @remarksFunction ValidateXML(ByVal XMLDataFile)   Reporter.ReportEvent micDone,"START","ValidateXML" Dim xmlDoc
   Set xmlDoc = CreateObject("Microsoft.XMLDOM") xmlDoc.Async = False xmlDoc.Load(XMLDataFile)  xmlDoc.validateOnParse = True  If xmlDoc.Load(XMLDataFile) Then   ValidateXML = True Else     ValidateXML = False End If
 Set xmlDoc = Nothing
End Function
''' This function is used to return month, data, hour, min, sec in 2 digits(with preceding zero) if the len is 1' @param ' @return N/A' @date Created Date: 10/22/2014' @author Praveen Patlolla' @version 1.0 ' @remarksFunction dtTime(ByVal DateTime)   Select Case DateTime   Case "M"   dtTime = Right("0" & Month(Now),2)   Case "D"   dtTime = Right("0" & Day(Now),2)   Case "H"   dtTime = Right("0" & Hour(Now),2)   Case "Min"   dtTime = Right("0" & Minute(Now),2)   Case "Sec"   dtTime = Right("0" & Second(Now),2)   End SelectEnd Function

'****************************************************************************************************************' Name: EQ_CreateIITDataValidationFile' @param ' @return N/A' @date Created Date: 10/24/2014' @author Naresh J' @version 1.0 ' @remarks'****************************************************************************************************************Function EQ_CreateIITDataValidationFile If Err.Number <> 0 Then  ErrorHandler GLOBAL_REO_ID,"EQ_CreateIITDataValidationFile","IIT file will not be created, due to error message:- ",Err.Description Elseif  GLOBAL_REO_ID <> "" then  Reporter.ReportEvent micDone,"START","EQ_CreateIITDataValidationFile"        hostName = QTP_GetHostName  getDateTimestamp = QTP_GetDateTimeString  resultsFile = EQ_ResultsPath+"ITTDataValidation\"+ Environment("TestName") + "_Results_" + hostName  + "_" + getDateTimestamp + ".csv"  DataTable.AddSheet "Data"  'DataTable.Import EQ_DataPath & "DataValidation_Input.xlsx"  DataTable.ImportSheet EQ_DataPath & "DataValidation_Input.xlsx","Data","Data"  row=DataTable.GetSheet("Data").GetRowCount  For intLoop=1 to row   DataTable.GetSheet("Data").SetCurrentRow(intLoop)   If UCase(Environment("TestName")) =Ucase(DataTable.GetSheet("Data").GetParameter("Trigger_Name").ValueByRow(intLoop)) then    sExpectedData = DataTable.GetSheet("Data").GetParameter("Values").ValueByRow(intLoop)    sQuery = DataTable.GetSheet("Data").GetParameter("Query").ValueByRow(intLoop)    Exit for   end if  Next  Set csvObj= CreateObject("Scripting.FileSystemObject")  Set csvFile = csvObj.CreateTextFile(resultsFile,true)    csvFile.Writeline "REOID,"& sQuery  If Global_ITT_Data <>"" Then   csvFile.Writeline GLOBAL_REO_ID & "," & sExpectedData & Global_ITT_Data  else   csvFile.Writeline GLOBAL_REO_ID & "," & sExpectedData  End If  Set csvFile =nothing  Set csvObj=nothing End IfEnd Function
''' This function used to create meta file ' @param ' @return N/A' @date Created Date: 10/30/2014' @author Praveen Patlolla' @version 1.0 ' @remarksFunction CreateMetaFile(metaFileName, zipFileName) Reporter.ReportEvent micDone,"START","CreateMetaFile"   Dim objFSO, objTextFile ' Create the File System Object Set objFSO = CreateObject("Scripting.FileSystemObject") Set objTextFile = objFSO.OpenTextFile(metaFileName, ForAppending, True)  objTextFile.WriteLine("<?xml version=""1.0"" encoding=""UTF-8""?>")  objTextFile.WriteLine("<outboundDocument formatVersion=""1.0"">")  objTextFile.WriteLine("<documentRoutingInfo>") objTextFile.WriteLine("<senderRoutingId>a6aREOIacpt</senderRoutingId>") objTextFile.WriteLine("<receiverRoutingId>TR139738X-REOI-1perf</receiverRoutingId>") objTextFile.WriteLine("</documentRoutingInfo>") objTextFile.WriteLine("<documentDataMetaInfo>") objTextFile.WriteLine("<payloadDirectoryUri>/export/appl/a6aacpt/Outgoing</payloadDirectoryUri>") objTextFile.WriteLine("<payloadGroup fileCount=""1"" trackingInfo=""Payload Delivery Group"">") objTextFile.WriteLine("<payloadInfo>") objTextFile.WriteLine("<payloadFile type=""BINARY"" subType=""BINARY"">"  & zipFileName & "</payloadFile>") objTextFile.WriteLine("<payloadFileMetaInfo timestamp=""2014-03-11T12:14:36.441-04:00"" recordCount=""0""/>") objTextFile.WriteLine("</payloadInfo>") objTextFile.WriteLine("</payloadGroup>") objTextFile.WriteLine("</documentDataMetaInfo>") objTextFile.WriteLine("</outboundDocument>")  objTextFile.Close Set objTextFile = Nothing set objFile = nothingEnd Function
''' This function saves Teast Case for  occupany feature scripts that need to check and skip if it is already executed' @param ' @param Run Status' @return N/A' @date Created Date:12/12/14' @author  Praveen' @version 1.0 ' @remarks Function InsertIntoAutoEQOccupancyDB(ByVal TestID, ByVal TestName, ByVal Flag, ByVal REO)  Dim sSQLString     sSQLString = "INSERT INTO AUTO_EQ_OCCUPANCY (Test_Case_No, Test_Script_Name, Flag, REO_ID) VALUES ('" & TestID & "','" & TestName & "' ,'" & Flag & "' ,'" & REO & "')"  Call QTP_ExecuteDBQuery(GLOBAL_AUTO_DBNAME, sSQLString)  Wait 3End Function
''' This function returns a flag based on the where condition' @param :Test Case ID, Table Name' @param Run Status' @return N/A' @date Created Date:12/12/14' @author  Praveen' @version 1.0 ' @remarks 
Function PickupTESTIDFromDB(ByVal TestID, ByVal TableName)   Dim sSQLString   Dim arrayRS
   sSQLString = "Select Flag FROM " & TableName & " where Test_Case_No = '" & TestID & "'"   arrayRS = QTP_ExecuteDBQuery(GLOBAL_AUTO_DBNAME, sSQLString)   If UBound(arrayRS) > -1 Then  PickupTESTIDFromDB = arrayRS(0,0) Else  PickupTESTIDFromDB = ""   End IfEnd Function

Public Function ApplyXSL(ByVal inputXML, ByVal inputXSL, ByVal outputFile)    sXMLLib = "MSXML2.DOMDocument"  Set xmlDoc = CreateObject(sXMLLib) Set xslDoc = CreateObject(sXMLLib)   xmlDoc.async = False  xslDoc.async = False   xslDoc.load inputXSL  xmlDoc.load inputXML   outputText = xmlDoc.transformNode(xslDoc.documentElement)  Set FSO = CreateObject("Scripting.FileSystemObject")  Set outFile = FSO.CreateTextFile(outputFile,True)  outFile.Write outputText  outFile.Close  Set outFile = Nothing  Set FSO = Nothing  Set xmlDoc = Nothing  Set xslDoc = Nothing  Set xmlResults = NothingEnd Function
''' This function saves the file on folder from Equator sites' @param :FilePathName - folder path and file name to be saved as, FileURL - URL of the link which has file (eg. personal property evaluation, EQSite (agent, Vendor, or WS) , Role (Admin, Agent1, ...)' @return N/A' @date Created Date:9/2/15' @author  Swathi' @version 1.0 ' @remarks Function SaveFilefromWeb(FilePathName, FileURL, EQSite, Role)'loginsite Agent, Vendor, or WS   Reporter.ReportEvent micDone,"START","SaveFilefromWeb" 'GLOBAL_SHARED_ID = "L2UR47YL" 'SharedIDPwd_LDAP = "Crbat_01" 'loginurl=Environment.Value("Equator_Agent_URL") 'SiteUsername="autoagent2@fanniemae.com" 'SitePassord="Fanniemae1"  Dim rolesData, SiteUsername, SitePassord Select Case UCase(TRIM(EQSite))  Case "WS"   loginurl = Environment.Value("Equator_Workstation_URL")  Case "VENDOR"   loginurl = Environment.Value("Equator_Vendor_URL")  Case "AGENT"   loginurl = Environment.Value("Equator_Agent_URL") End Select  Set rolesData = getData(rolesDataFile,"Login","Role",Role) SiteUsername = rolesData("User_ID") SitePassord = rolesData("PWD") Set rolesData = Nothing  Dim WinHttpReq Set WinHttpReq = CreateObject("WinHttp.WinHttpRequest.5.1") WinHttpReq.SetProxy 2, "bcproxy.fanniemae.com"  WinHttpReq.Open "Get", loginurl, False WinHttpReq.SetCredentials GLOBAL_SHARED_ID,SharedIDPwd_LDAP, 1 'for proxy authentication  WinHttpReq.send  start = instr(WinHttpReq.ResponseText, "'sTokenValue':'") end1 = instr (WinHttpReq.ResponseText, "};") eqrf =  mid(WinHttpReq.ResponseText, start + 15, end1 - start - 16) postdata = "auth_username=" & SiteUsername & "&auth_password="& SitePassord &"&eqrf=" & eqrf WinHttpReq.Open "Post", loginurl WinHttpReq.setRequestHeader "Content-Type", "application/x-www-form-urlencoded" WinHttpReq.SetCredentials GLOBAL_SHARED_ID,SharedIDPwd_LDAP, 1 'for proxy authentication WinHttpReq.send(postdata)  WinHttpReq.Open "GET", FileURL, False WinHttpReq.SetCredentials GLOBAL_SHARED_ID,SharedIDPwd_LDAP, 1 'for proxy authentication WinHttpReq.SetTimeouts 90000, 90000, 90000, 90000  WinHttpReq.Send Print WinHttpReq.ResponseText If WinHttpReq.Status = 200 Then     Set oStream = CreateObject("ADODB.Stream")     oStream.Open     oStream.Type = 1     'wscript.echo WinHttpReq.responseText     oStream.Write WinHttpReq.responseBody     oStream.SaveToFile FilePathName, 2 ' 1 = no overwrite, 2 = overwrite     oStream.Close End If   Reporter.ReportEvent micDone,"END","SaveFilefromWeb"End Function

'================================================================================ ' Function: CheckHECMLoanNumber' Purpose:   Checks if the loan number is hecm. initial requirement for this was the loan number starts with digit 6' Arguments: Loan number - Start with the specific character/digit' Returns:  False -  non hecm loan '      True - hecm loan '# Author:  Swathi Gaddam 4/26/2016'================================================================================
Function CheckHECMLoanNumber(ByVal LoanNumber) Dim sRegExp Dim bFound
 Set sRegExp = New RegExp sRegExp.Pattern = "^(6).*"' sRegExp.Pattern = "^\D+.*"
 CheckHECMLoanNumber = sRegExp.Test(UCASE(LoanNumber)) Set sRegExp = NothingEnd Function

''' This function is used to change Servicer Name/ID' @' @date Created 10/20/2015' @author Praveen Patlolla' @version 1.0 ' @remarks Using Repository; 8/17/2016. moved the function from hoa library qflFunction WS_UpdateServicerID ( ByVal ServicerName) Reporter.ReportEvent micDone,"START","WS_UpdateServicerID" Set WObj = Browser("Workstation").Page("Workstation") Set oChildLink = WObj.WebTable("No Photo Available").ChildItem(2, 3, "Link", 0) oChildLink.Click WObj.Sync
 If ServicerName = "No" Then  WObj.WebList("foreclosure_attorney").Select "Select One" Else   WObj.WebList("foreclosure_attorney").Select ServicerName End If
    WObj.WebButton("Save Property Changes").Click 'Browser("Workstation").Sync WObj.Sync
 WObj.WebButton("View").Click 'Browser("Workstation").Sync WObj.Sync Set WObj = Nothing
 If Err.Number <> 0 Then  ErrorHandler GLOBAL_REO_ID,"WS_UpdateServicerID","",Err.Description Else  Reporter.ReportEvent micDone,"END","WS_UpdateServicerID" End IfEnd Function
''' This function Used to Inserts a specific REO ID in to Auction Table in DB.' @param REO_ID,Date_Created' @return N/A' @date Created Date:12/12/2016 ' @author Naveen.B' @version 1.0 ' @remarksFunction InsertAuctionREOID(ByVal REO_ID, ByVal Date_Created) Dim sSQLString sSQLString = "INSERT INTO Auto_EQ_Aution(REO_ID, DATE_CREATED) VALUES ('" & REO_ID & "','" & Date_Created & "')" Call QTP_ExecuteDBQuery(GLOBAL_AUTO_DBNAME, sSQLString)End Function
''' This function used to Update Event Name to Auction Table in DB.' @param EventName : Should be unique Name, Ex: Automation_20161213162103' @return N/A' @date Created Date:12/12/2016' @author Naveen.B' @version 1.0 ' @remarksFunction UpdateEventNameToDB(ByVal EventName) Dim sSQLString sSQLString = "UPDATE  Auto_EQ_Aution SET EVENT_NAME ='"& EventName &"' WHERE ROWNUM=1" Call QTP_ExecuteDBQuery(GLOBAL_AUTO_DBNAME, sSQLString)End Function
''' This function used to pick REO from Auction Table in DB and to delete that REO.' @param ToBeDeleted : To Delete REO From DB Ex: TRURE, FALSE' @return N/A' @date Created Date:12/15/2016' @author Naveen.B' @version 1.0 ' @remarksFunction PickAuctionREOIDFromDB(ByVal ToBeDeleted)   Dim sSQLString   Dim arrayRS   Dim REO_ID   sSQLString = "Select REO_ID FROM Auto_EQ_Aution WHERE ROWNUM = 1"   arrayRS = QTP_ExecuteDBQuery(GLOBAL_AUTO_DBNAME, sSQLString)   If UBound(arrayRS) > -1 Then  REO_ID = arrayRS(0,0)  GLOBAL_REO_ID = REO_ID  PickAuctionREOIDFromDB = REO_ID Else  PickAuctionREOIDFromDB = ""   End If   If ToBeDeleted = True AND UBound(arrayRS) > -1 Then       sSQLString = "DELETE FROM Auto_EQ_Aution WHERE REO_ID = '" & REO_ID & "'"    Call QTP_ExecuteDBQuery(GLOBAL_AUTO_DBNAME, sSQLString)   End If   If GLOBAL_REO_ID = "" Then     Reporter.ReportEvent micFail, Environment.Value("TestName") & " Failed", "No REO ID Available !"  ExitAction   End IfEnd Function
Function RightClick_SaveTargetAs(WebObject, FilePathName)'Replaces the file if exists with the new file  Set WshShell = CreateObject("WScript.Shell") Setting.WebPackage("ReplayType") = 2 timeout = 1Do WebObject.RightClick Wait 2 WshShell.sendkeys "{DOWN}" WshShell.sendkeys "{DOWN}" WshShell.sendkeys "{DOWN}" WshShell.sendkeys "{DOWN}" WshShell.sendkeys "{ENTER}" Wait 10 If timeout>5 Then  Exit Do End If timeout = timeout+1Loop While Not(Browser("index:=0").Dialog("text:=Save As","nativeclass:=#32770","is owned window:=True").Exist(5)) Setting.WebPackage("ReplayType") = 1 Set WshShell = nothing
'TRY 2If Not(Browser("index:=0").Dialog("text:=Save As","nativeclass:=#32770","is owned window:=True").Exist) Then   Set WshShell = CreateObject("WScript.Shell")  Setting.WebPackage("ReplayType") = 2  timeout = 1 Do  Call RightClickObj (WebObject, 10, 0)  Wait 2  WshShell.sendkeys "{DOWN}"  WshShell.sendkeys "{DOWN}"  WshShell.sendkeys "{DOWN}"  WshShell.sendkeys "{DOWN}"  WshShell.sendkeys "{ENTER}"  Wait 10  If timeout>5 Then   Exit Do  End If  timeout = timeout+1 Loop While Not(Browser("index:=0").Dialog("text:=Save As","nativeclass:=#32770","is owned window:=True").Exist(5))  Setting.WebPackage("ReplayType") = 1  Set WshShell = nothingEnd If
If Not(Browser("index:=0").Dialog("text:=Save As","nativeclass:=#32770","is owned window:=True").Exist) Then msgbox "right click on the pdf link and save as"End If
Browser("index:=0").Dialog("text:=Save As","nativeclass:=#32770","is owned window:=True").WinEdit("attached text:=File name:","nativeclass:=Edit").Type FilePathNameWait(2)Browser("index:=0").Dialog("text:=Save As","nativeclass:=#32770","is owned window:=True").WinButton("text:=&Save","nativeclass:=Button").ClickWait(2)If Dialog("text:=Confirm Save As","nativeclass:=#32770").WinButton("text:=&Yes","nativeclass:=Button").Exist Then Dialog("text:=Confirm Save As","nativeclass:=#32770").WinButton("text:=&Yes","nativeclass:=Button").Click End IfEnd Function

''' This function used upload files. this was introduced phase 1 in 10.07 release' @param EQSite = WS or VENDOR or AGENT; fileType: file name from testData folder' @date Created Date:6/12/2017' @author Swathi G' @version 1.0 ' @remarksFunction FileManagerUploadFiles(EQSite, filetype) Reporter.ReportEvent micDone,"START","FileManagerUploadFiles" RepositoriesCollection.Add(EQ_RepPath&"EQ_FileManagerUploadFiles.tsr") Pos = RepositoriesCollection.Find(EQ_RepPath&"EQ_FileManagerUploadFiles.tsr") Select Case UCase(TRIM(EQSite))  Case "WS"   Set W = Browser("Workstation").Page("Workstation")  Case "VENDOR"   Set W = Browser("Agent_Vendor").Page("Agent_Vendor")  Case "AGENT"   Set W = Browser("Agent_Vendor").Page("Agent_Vendor") End Select W.Link("Open File Manager").Click Wait 5 W.WebElement("Select Files").Click Dialog("Choose File to Upload").WinEdit("File name:").Set EQ_TestDataPath & filetype '"Equator.jpg" wait 2 Dialog("Choose File to Upload").WinButton("Open").Click W.WebEdit("FileAttachedDescription").Set "Test" W.WebElement("Save Changes").Click Wait 5 W.WebButton("Alert_Ok").DoubleClick 'Alert All changes saved successfully. click isnt working. changed to doubleclick Wait 5 W.Sync Set W = Nothing RepositoriesCollection.Remove(Pos) If Err.Number <> 0 Then  ErrorHandler GLOBAL_REO_ID,"FileManagerUploadFiles","",Err.Description Else  Reporter.ReportEvent micDone,"END","FileManagerUploadFiles" End IfEnd Function
'''The function below uses the DeviceReplay object to perform a right-click operation on any object by retrieving the coordinates of the object.' @param Obj, Offset_x, Offset_y' @date Created Date:6/27/2017' @author Swathi G' @version 1.0 ' @remarksFunction RightClickObj(Obj, Offset_x, Offset_y) x_coord = Obj.GetROProperty("abs_x") y_coord = Obj.GetROProperty("abs_y") Set dr = CreateObject("Mercury.DeviceReplay") dr.MouseClick x_coord + Offset_x, y_coord + Offset_y, 2End Function




























